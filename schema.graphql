"""A connection to a list of `City` values."""
type CitiesConnection {
  """A list of `City` objects."""
  nodes: [City]!

  """
  A list of edges which contains the `City` and cursor to aid in pagination.
  """
  edges: [CitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `City` you could get from the connection."""
  totalCount: Int
}

"""A `City` edge in the connection."""
type CitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `City` at the end of the edge."""
  node: City
}

"""Methods to use when ordering `City`."""
enum CitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  COUNTRY_ID_ASC
  COUNTRY_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type City implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!
  countryId: UUID
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Country` that is related to this `City`."""
  country: Country

  """Reads and enables pagination through a set of `University`."""
  universities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `University`."""
    orderBy: [UniversitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UniversityCondition
  ): UniversitiesConnection!

  """Reads and enables pagination through a set of `Profile`."""
  profiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfileCondition
  ): ProfilesConnection!
}

"""
A condition to be used against `City` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CityCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `countryId` field."""
  countryId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `City`"""
input CityInput {
  id: UUID
  name: String!
  countryId: UUID
  createdAt: Datetime
  updatedAt: Datetime
}

"""Represents an update to a `City`. Fields that are set will be updated."""
input CityPatch {
  id: UUID
  name: String
  countryId: UUID
  createdAt: Datetime
  updatedAt: Datetime
}

"""Code editor, each row define one version of some code editor"""
type CodeEditor implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!

  """Name of code editor. Use official name, like Visual Studio"""
  name: String!

  """Alias for code editor. Mostly used as search keyword, like VSC"""
  alias: String

  """
  Version of code editor. Version is used for define which margin version is will be used, like Visual Studio 2017
  """
  version: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `ProfilesToCodeEditor`."""
  profilesToCodeEditors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProfilesToCodeEditor`."""
    orderBy: [ProfilesToCodeEditorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfilesToCodeEditorCondition
  ): ProfilesToCodeEditorsConnection!
}

"""
A condition to be used against `CodeEditor` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CodeEditorCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `alias` field."""
  alias: String

  """Checks for equality with the object’s `version` field."""
  version: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `CodeEditor`"""
input CodeEditorInput {
  id: UUID

  """Name of code editor. Use official name, like Visual Studio"""
  name: String!

  """Alias for code editor. Mostly used as search keyword, like VSC"""
  alias: String

  """
  Version of code editor. Version is used for define which margin version is will be used, like Visual Studio 2017
  """
  version: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `CodeEditor`. Fields that are set will be updated.
"""
input CodeEditorPatch {
  id: UUID

  """Name of code editor. Use official name, like Visual Studio"""
  name: String

  """Alias for code editor. Mostly used as search keyword, like VSC"""
  alias: String

  """
  Version of code editor. Version is used for define which margin version is will be used, like Visual Studio 2017
  """
  version: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `CodeEditor` values."""
type CodeEditorsConnection {
  """A list of `CodeEditor` objects."""
  nodes: [CodeEditor]!

  """
  A list of edges which contains the `CodeEditor` and cursor to aid in pagination.
  """
  edges: [CodeEditorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CodeEditor` you could get from the connection."""
  totalCount: Int
}

"""A `CodeEditor` edge in the connection."""
type CodeEditorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CodeEditor` at the end of the edge."""
  node: CodeEditor
}

"""Methods to use when ordering `CodeEditor`."""
enum CodeEditorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  ALIAS_ASC
  ALIAS_DESC
  VERSION_ASC
  VERSION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Compilers for programming languages"""
type Compiler implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!

  """Compiler name"""
  name: String!

  """Alias of compiler. Mostly used as search word, like gcc"""
  alias: String

  """
  Compiler full code name aka "g++.exe (i686-posix-dwarf-rev0, Built by MinGW-W64 project) 8.1.0"
  """
  code: String

  """Compiler version"""
  version: String!

  """Language which compile"""
  languageId: UUID
  comment: String!

  """Is this interpreter"""
  isInterpreter: Boolean
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `ProgrammingLanguage` that is related to this `Compiler`.
  """
  language: ProgrammingLanguage

  """Reads and enables pagination through a set of `Solution`."""
  solutions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Solution`."""
    orderBy: [SolutionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SolutionCondition
  ): SolutionsConnection!
}

"""
A condition to be used against `Compiler` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CompilerCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `alias` field."""
  alias: String

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `version` field."""
  version: String

  """Checks for equality with the object’s `languageId` field."""
  languageId: UUID

  """Checks for equality with the object’s `comment` field."""
  comment: String

  """Checks for equality with the object’s `isInterpreter` field."""
  isInterpreter: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Compiler`"""
input CompilerInput {
  id: UUID

  """Compiler name"""
  name: String!

  """Alias of compiler. Mostly used as search word, like gcc"""
  alias: String

  """
  Compiler full code name aka "g++.exe (i686-posix-dwarf-rev0, Built by MinGW-W64 project) 8.1.0"
  """
  code: String

  """Compiler version"""
  version: String!

  """Language which compile"""
  languageId: UUID
  comment: String!

  """Is this interpreter"""
  isInterpreter: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Compiler`. Fields that are set will be updated.
"""
input CompilerPatch {
  id: UUID

  """Compiler name"""
  name: String

  """Alias of compiler. Mostly used as search word, like gcc"""
  alias: String

  """
  Compiler full code name aka "g++.exe (i686-posix-dwarf-rev0, Built by MinGW-W64 project) 8.1.0"
  """
  code: String

  """Compiler version"""
  version: String

  """Language which compile"""
  languageId: UUID
  comment: String

  """Is this interpreter"""
  isInterpreter: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `Compiler` values."""
type CompilersConnection {
  """A list of `Compiler` objects."""
  nodes: [Compiler]!

  """
  A list of edges which contains the `Compiler` and cursor to aid in pagination.
  """
  edges: [CompilersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Compiler` you could get from the connection."""
  totalCount: Int
}

"""A `Compiler` edge in the connection."""
type CompilersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Compiler` at the end of the edge."""
  node: Compiler
}

"""Methods to use when ordering `Compiler`."""
enum CompilersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  ALIAS_ASC
  ALIAS_DESC
  CODE_ASC
  CODE_DESC
  VERSION_ASC
  VERSION_DESC
  LANGUAGE_ID_ASC
  LANGUAGE_ID_DESC
  COMMENT_ASC
  COMMENT_DESC
  IS_INTERPRETER_ASC
  IS_INTERPRETER_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Contest implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!
  text: String
  creator: UUID!
  startDate: Datetime
  endDate: Datetime
  startPublicationDate: Datetime
  endPublicationDate: Datetime
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `Contest`."""
  user: User

  """Reads and enables pagination through a set of `ContestsToTeam`."""
  contestsToTeams(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ContestsToTeam`."""
    orderBy: [ContestsToTeamsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContestsToTeamCondition
  ): ContestsToTeamsConnection!

  """Reads and enables pagination through a set of `ContestsToProfile`."""
  contestsToProfiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ContestsToProfile`."""
    orderBy: [ContestsToProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContestsToProfileCondition
  ): ContestsToProfilesConnection!
}

"""
A condition to be used against `Contest` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ContestCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `text` field."""
  text: String

  """Checks for equality with the object’s `creator` field."""
  creator: UUID

  """Checks for equality with the object’s `startDate` field."""
  startDate: Datetime

  """Checks for equality with the object’s `endDate` field."""
  endDate: Datetime

  """Checks for equality with the object’s `startPublicationDate` field."""
  startPublicationDate: Datetime

  """Checks for equality with the object’s `endPublicationDate` field."""
  endPublicationDate: Datetime

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Contest`"""
input ContestInput {
  id: UUID
  name: String!
  text: String
  creator: UUID!
  startDate: Datetime
  endDate: Datetime
  startPublicationDate: Datetime
  endPublicationDate: Datetime
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Contest`. Fields that are set will be updated.
"""
input ContestPatch {
  id: UUID
  name: String
  text: String
  creator: UUID
  startDate: Datetime
  endDate: Datetime
  startPublicationDate: Datetime
  endPublicationDate: Datetime
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `Contest` values."""
type ContestsConnection {
  """A list of `Contest` objects."""
  nodes: [Contest]!

  """
  A list of edges which contains the `Contest` and cursor to aid in pagination.
  """
  edges: [ContestsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contest` you could get from the connection."""
  totalCount: Int
}

"""A `Contest` edge in the connection."""
type ContestsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contest` at the end of the edge."""
  node: Contest
}

"""Methods to use when ordering `Contest`."""
enum ContestsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  TEXT_ASC
  TEXT_DESC
  CREATOR_ASC
  CREATOR_DESC
  START_DATE_ASC
  START_DATE_DESC
  END_DATE_ASC
  END_DATE_DESC
  START_PUBLICATION_DATE_ASC
  START_PUBLICATION_DATE_DESC
  END_PUBLICATION_DATE_ASC
  END_PUBLICATION_DATE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ContestsToProfile implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  contestId: UUID!
  profileId: UUID!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Contest` that is related to this `ContestsToProfile`."""
  contest: Contest

  """Reads a single `Profile` that is related to this `ContestsToProfile`."""
  profile: Profile
}

"""
A condition to be used against `ContestsToProfile` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ContestsToProfileCondition {
  """Checks for equality with the object’s `contestId` field."""
  contestId: UUID

  """Checks for equality with the object’s `profileId` field."""
  profileId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `ContestsToProfile`"""
input ContestsToProfileInput {
  contestId: UUID!
  profileId: UUID!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `ContestsToProfile`. Fields that are set will be updated.
"""
input ContestsToProfilePatch {
  contestId: UUID
  profileId: UUID
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `ContestsToProfile` values."""
type ContestsToProfilesConnection {
  """A list of `ContestsToProfile` objects."""
  nodes: [ContestsToProfile]!

  """
  A list of edges which contains the `ContestsToProfile` and cursor to aid in pagination.
  """
  edges: [ContestsToProfilesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ContestsToProfile` you could get from the connection.
  """
  totalCount: Int
}

"""A `ContestsToProfile` edge in the connection."""
type ContestsToProfilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContestsToProfile` at the end of the edge."""
  node: ContestsToProfile
}

"""Methods to use when ordering `ContestsToProfile`."""
enum ContestsToProfilesOrderBy {
  NATURAL
  CONTEST_ID_ASC
  CONTEST_ID_DESC
  PROFILE_ID_ASC
  PROFILE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ContestsToTeam implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  contestId: UUID!
  teamId: UUID!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Contest` that is related to this `ContestsToTeam`."""
  contest: Contest

  """Reads a single `Team` that is related to this `ContestsToTeam`."""
  team: Team
}

"""
A condition to be used against `ContestsToTeam` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ContestsToTeamCondition {
  """Checks for equality with the object’s `contestId` field."""
  contestId: UUID

  """Checks for equality with the object’s `teamId` field."""
  teamId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `ContestsToTeam`"""
input ContestsToTeamInput {
  contestId: UUID!
  teamId: UUID!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `ContestsToTeam`. Fields that are set will be updated.
"""
input ContestsToTeamPatch {
  contestId: UUID
  teamId: UUID
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `ContestsToTeam` values."""
type ContestsToTeamsConnection {
  """A list of `ContestsToTeam` objects."""
  nodes: [ContestsToTeam]!

  """
  A list of edges which contains the `ContestsToTeam` and cursor to aid in pagination.
  """
  edges: [ContestsToTeamsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ContestsToTeam` you could get from the connection."""
  totalCount: Int
}

"""A `ContestsToTeam` edge in the connection."""
type ContestsToTeamsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContestsToTeam` at the end of the edge."""
  node: ContestsToTeam
}

"""Methods to use when ordering `ContestsToTeam`."""
enum ContestsToTeamsOrderBy {
  NATURAL
  CONTEST_ID_ASC
  CONTEST_ID_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Country` values."""
type CountriesConnection {
  """A list of `Country` objects."""
  nodes: [Country]!

  """
  A list of edges which contains the `Country` and cursor to aid in pagination.
  """
  edges: [CountriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Country` you could get from the connection."""
  totalCount: Int
}

"""A `Country` edge in the connection."""
type CountriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Country` at the end of the edge."""
  node: Country
}

"""Methods to use when ordering `Country`."""
enum CountriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Country implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `City`."""
  cities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `City`."""
    orderBy: [CitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CityCondition
  ): CitiesConnection!
}

"""
A condition to be used against `Country` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CountryCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Country`"""
input CountryInput {
  id: UUID
  name: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Country`. Fields that are set will be updated.
"""
input CountryPatch {
  id: UUID
  name: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the create `City` mutation."""
input CreateCityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `City` to be created by this mutation."""
  city: CityInput!
}

"""The output of our create `City` mutation."""
type CreateCityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `City` that was created by this mutation."""
  city: City

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Country` that is related to this `City`."""
  country: Country

  """An edge for our `City`. May be used by Relay 1."""
  cityEdge(
    """The method to use when ordering `City`."""
    orderBy: [CitiesOrderBy!] = PRIMARY_KEY_ASC
  ): CitiesEdge
}

"""All input for the create `CodeEditor` mutation."""
input CreateCodeEditorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CodeEditor` to be created by this mutation."""
  codeEditor: CodeEditorInput!
}

"""The output of our create `CodeEditor` mutation."""
type CreateCodeEditorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CodeEditor` that was created by this mutation."""
  codeEditor: CodeEditor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CodeEditor`. May be used by Relay 1."""
  codeEditorEdge(
    """The method to use when ordering `CodeEditor`."""
    orderBy: [CodeEditorsOrderBy!] = PRIMARY_KEY_ASC
  ): CodeEditorsEdge
}

"""All input for the create `Compiler` mutation."""
input CreateCompilerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Compiler` to be created by this mutation."""
  compiler: CompilerInput!
}

"""The output of our create `Compiler` mutation."""
type CreateCompilerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Compiler` that was created by this mutation."""
  compiler: Compiler

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProgrammingLanguage` that is related to this `Compiler`.
  """
  language: ProgrammingLanguage

  """An edge for our `Compiler`. May be used by Relay 1."""
  compilerEdge(
    """The method to use when ordering `Compiler`."""
    orderBy: [CompilersOrderBy!] = PRIMARY_KEY_ASC
  ): CompilersEdge
}

"""All input for the create `Contest` mutation."""
input CreateContestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Contest` to be created by this mutation."""
  contest: ContestInput!
}

"""The output of our create `Contest` mutation."""
type CreateContestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Contest` that was created by this mutation."""
  contest: Contest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Contest`."""
  user: User

  """An edge for our `Contest`. May be used by Relay 1."""
  contestEdge(
    """The method to use when ordering `Contest`."""
    orderBy: [ContestsOrderBy!] = PRIMARY_KEY_ASC
  ): ContestsEdge
}

"""All input for the create `ContestsToProfile` mutation."""
input CreateContestsToProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ContestsToProfile` to be created by this mutation."""
  contestsToProfile: ContestsToProfileInput!
}

"""The output of our create `ContestsToProfile` mutation."""
type CreateContestsToProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContestsToProfile` that was created by this mutation."""
  contestsToProfile: ContestsToProfile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Contest` that is related to this `ContestsToProfile`."""
  contest: Contest

  """Reads a single `Profile` that is related to this `ContestsToProfile`."""
  profile: Profile

  """An edge for our `ContestsToProfile`. May be used by Relay 1."""
  contestsToProfileEdge(
    """The method to use when ordering `ContestsToProfile`."""
    orderBy: [ContestsToProfilesOrderBy!] = PRIMARY_KEY_ASC
  ): ContestsToProfilesEdge
}

"""All input for the create `ContestsToTeam` mutation."""
input CreateContestsToTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ContestsToTeam` to be created by this mutation."""
  contestsToTeam: ContestsToTeamInput!
}

"""The output of our create `ContestsToTeam` mutation."""
type CreateContestsToTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContestsToTeam` that was created by this mutation."""
  contestsToTeam: ContestsToTeam

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Contest` that is related to this `ContestsToTeam`."""
  contest: Contest

  """Reads a single `Team` that is related to this `ContestsToTeam`."""
  team: Team

  """An edge for our `ContestsToTeam`. May be used by Relay 1."""
  contestsToTeamEdge(
    """The method to use when ordering `ContestsToTeam`."""
    orderBy: [ContestsToTeamsOrderBy!] = PRIMARY_KEY_ASC
  ): ContestsToTeamsEdge
}

"""All input for the create `Country` mutation."""
input CreateCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Country` to be created by this mutation."""
  country: CountryInput!
}

"""The output of our create `Country` mutation."""
type CreateCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Country` that was created by this mutation."""
  country: Country

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Country`. May be used by Relay 1."""
  countryEdge(
    """The method to use when ordering `Country`."""
    orderBy: [CountriesOrderBy!] = PRIMARY_KEY_ASC
  ): CountriesEdge
}

"""All input for the create `FailType` mutation."""
input CreateFailTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FailType` to be created by this mutation."""
  failType: FailTypeInput!
}

"""The output of our create `FailType` mutation."""
type CreateFailTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FailType` that was created by this mutation."""
  failType: FailType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FailType`. May be used by Relay 1."""
  failTypeEdge(
    """The method to use when ordering `FailType`."""
    orderBy: [FailTypesOrderBy!] = PRIMARY_KEY_ASC
  ): FailTypesEdge
}

"""All input for the create `Language` mutation."""
input CreateLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Language` to be created by this mutation."""
  language: LanguageInput!
}

"""The output of our create `Language` mutation."""
type CreateLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Language` that was created by this mutation."""
  language: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Language`. May be used by Relay 1."""
  languageEdge(
    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = PRIMARY_KEY_ASC
  ): LanguagesEdge
}

"""All input for the create `Problem` mutation."""
input CreateProblemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Problem` to be created by this mutation."""
  problem: ProblemInput!
}

"""The output of our create `Problem` mutation."""
type CreateProblemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Problem` that was created by this mutation."""
  problem: Problem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ProgramInputType` that is related to this `Problem`."""
  programInputType: ProgramInputType

  """Reads a single `ProgramOutputType` that is related to this `Problem`."""
  programOutputType: ProgramOutputType

  """Reads a single `Profile` that is related to this `Problem`."""
  author_profile: Profile

  """Reads a single `Profile` that is related to this `Problem`."""
  tester_profile: Profile

  """An edge for our `Problem`. May be used by Relay 1."""
  problemEdge(
    """The method to use when ordering `Problem`."""
    orderBy: [ProblemsOrderBy!] = PRIMARY_KEY_ASC
  ): ProblemsEdge
}

"""All input for the create `ProblemsToTag` mutation."""
input CreateProblemsToTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProblemsToTag` to be created by this mutation."""
  problemsToTag: ProblemsToTagInput!
}

"""The output of our create `ProblemsToTag` mutation."""
type CreateProblemsToTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProblemsToTag` that was created by this mutation."""
  problemsToTag: ProblemsToTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Problem` that is related to this `ProblemsToTag`."""
  problem: Problem

  """Reads a single `Tag` that is related to this `ProblemsToTag`."""
  tag: Tag

  """An edge for our `ProblemsToTag`. May be used by Relay 1."""
  problemsToTagEdge(
    """The method to use when ordering `ProblemsToTag`."""
    orderBy: [ProblemsToTagsOrderBy!] = PRIMARY_KEY_ASC
  ): ProblemsToTagsEdge
}

"""All input for the create `Profile` mutation."""
input CreateProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Profile` to be created by this mutation."""
  profile: ProfileInput!
}

"""The output of our create `Profile` mutation."""
type CreateProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Profile` that was created by this mutation."""
  profile: Profile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Profile`."""
  user: User

  """Reads a single `City` that is related to this `Profile`."""
  city: City

  """Reads a single `University` that is related to this `Profile`."""
  university: University

  """An edge for our `Profile`. May be used by Relay 1."""
  profileEdge(
    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = PRIMARY_KEY_ASC
  ): ProfilesEdge
}

"""All input for the create `ProfilesToCodeEditor` mutation."""
input CreateProfilesToCodeEditorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProfilesToCodeEditor` to be created by this mutation."""
  profilesToCodeEditor: ProfilesToCodeEditorInput!
}

"""The output of our create `ProfilesToCodeEditor` mutation."""
type CreateProfilesToCodeEditorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProfilesToCodeEditor` that was created by this mutation."""
  profilesToCodeEditor: ProfilesToCodeEditor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Profile` that is related to this `ProfilesToCodeEditor`.
  """
  profile: Profile

  """
  Reads a single `CodeEditor` that is related to this `ProfilesToCodeEditor`.
  """
  codeEditor: CodeEditor

  """An edge for our `ProfilesToCodeEditor`. May be used by Relay 1."""
  profilesToCodeEditorEdge(
    """The method to use when ordering `ProfilesToCodeEditor`."""
    orderBy: [ProfilesToCodeEditorsOrderBy!] = PRIMARY_KEY_ASC
  ): ProfilesToCodeEditorsEdge
}

"""All input for the create `ProfilesToProgrammingLanguage` mutation."""
input CreateProfilesToProgrammingLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProfilesToProgrammingLanguage` to be created by this mutation."""
  profilesToProgrammingLanguage: ProfilesToProgrammingLanguageInput!
}

"""The output of our create `ProfilesToProgrammingLanguage` mutation."""
type CreateProfilesToProgrammingLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProfilesToProgrammingLanguage` that was created by this mutation."""
  profilesToProgrammingLanguage: ProfilesToProgrammingLanguage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Profile` that is related to this `ProfilesToProgrammingLanguage`.
  """
  profile: Profile

  """
  Reads a single `ProgrammingLanguage` that is related to this `ProfilesToProgrammingLanguage`.
  """
  language: ProgrammingLanguage

  """
  An edge for our `ProfilesToProgrammingLanguage`. May be used by Relay 1.
  """
  profilesToProgrammingLanguageEdge(
    """The method to use when ordering `ProfilesToProgrammingLanguage`."""
    orderBy: [ProfilesToProgrammingLanguagesOrderBy!] = PRIMARY_KEY_ASC
  ): ProfilesToProgrammingLanguagesEdge
}

"""All input for the create `ProfilesToTravel` mutation."""
input CreateProfilesToTravelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProfilesToTravel` to be created by this mutation."""
  profilesToTravel: ProfilesToTravelInput!
}

"""The output of our create `ProfilesToTravel` mutation."""
type CreateProfilesToTravelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProfilesToTravel` that was created by this mutation."""
  profilesToTravel: ProfilesToTravel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Profile` that is related to this `ProfilesToTravel`."""
  profile: Profile

  """Reads a single `Travel` that is related to this `ProfilesToTravel`."""
  travel: Travel

  """An edge for our `ProfilesToTravel`. May be used by Relay 1."""
  profilesToTravelEdge(
    """The method to use when ordering `ProfilesToTravel`."""
    orderBy: [ProfilesToTravelsOrderBy!] = PRIMARY_KEY_ASC
  ): ProfilesToTravelsEdge
}

"""All input for the create `ProgramInputType` mutation."""
input CreateProgramInputTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProgramInputType` to be created by this mutation."""
  programInputType: ProgramInputTypeInput!
}

"""The output of our create `ProgramInputType` mutation."""
type CreateProgramInputTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProgramInputType` that was created by this mutation."""
  programInputType: ProgramInputType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProgramInputType`. May be used by Relay 1."""
  programInputTypeEdge(
    """The method to use when ordering `ProgramInputType`."""
    orderBy: [ProgramInputTypesOrderBy!] = PRIMARY_KEY_ASC
  ): ProgramInputTypesEdge
}

"""All input for the create `ProgrammingLanguage` mutation."""
input CreateProgrammingLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProgrammingLanguage` to be created by this mutation."""
  programmingLanguage: ProgrammingLanguageInput!
}

"""The output of our create `ProgrammingLanguage` mutation."""
type CreateProgrammingLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProgrammingLanguage` that was created by this mutation."""
  programmingLanguage: ProgrammingLanguage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProgrammingLanguage`. May be used by Relay 1."""
  programmingLanguageEdge(
    """The method to use when ordering `ProgrammingLanguage`."""
    orderBy: [ProgrammingLanguagesOrderBy!] = PRIMARY_KEY_ASC
  ): ProgrammingLanguagesEdge
}

"""All input for the create `ProgramOutputType` mutation."""
input CreateProgramOutputTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProgramOutputType` to be created by this mutation."""
  programOutputType: ProgramOutputTypeInput!
}

"""The output of our create `ProgramOutputType` mutation."""
type CreateProgramOutputTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProgramOutputType` that was created by this mutation."""
  programOutputType: ProgramOutputType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProgramOutputType`. May be used by Relay 1."""
  programOutputTypeEdge(
    """The method to use when ordering `ProgramOutputType`."""
    orderBy: [ProgramOutputTypesOrderBy!] = PRIMARY_KEY_ASC
  ): ProgramOutputTypesEdge
}

"""All input for the create `Solution` mutation."""
input CreateSolutionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Solution` to be created by this mutation."""
  solution: SolutionInput!
}

"""The output of our create `Solution` mutation."""
type CreateSolutionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Solution` that was created by this mutation."""
  solution: Solution

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Problem` that is related to this `Solution`."""
  problem: Problem

  """Reads a single `Compiler` that is related to this `Solution`."""
  compiler: Compiler

  """An edge for our `Solution`. May be used by Relay 1."""
  solutionEdge(
    """The method to use when ordering `Solution`."""
    orderBy: [SolutionsOrderBy!] = PRIMARY_KEY_ASC
  ): SolutionsEdge
}

"""All input for the create `SolutionRun` mutation."""
input CreateSolutionRunInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SolutionRun` to be created by this mutation."""
  solutionRun: SolutionRunInput!
}

"""The output of our create `SolutionRun` mutation."""
type CreateSolutionRunPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SolutionRun` that was created by this mutation."""
  solutionRun: SolutionRun

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Solution` that is related to this `SolutionRun`."""
  solution: Solution

  """Reads a single `Test` that is related to this `SolutionRun`."""
  failedTest: Test

  """Reads a single `FailType` that is related to this `SolutionRun`."""
  failType: FailType

  """An edge for our `SolutionRun`. May be used by Relay 1."""
  solutionRunEdge(
    """The method to use when ordering `SolutionRun`."""
    orderBy: [SolutionRunsOrderBy!] = PRIMARY_KEY_ASC
  ): SolutionRunsEdge
}

"""All input for the create `Tag` mutation."""
input CreateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Tag` to be created by this mutation."""
  tag: TagInput!
}

"""The output of our create `Tag` mutation."""
type CreateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tag` that was created by this mutation."""
  tag: Tag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = PRIMARY_KEY_ASC
  ): TagsEdge
}

"""All input for the create `Team` mutation."""
input CreateTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Team` to be created by this mutation."""
  team: TeamInput!
}

"""The output of our create `Team` mutation."""
type CreateTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Team` that was created by this mutation."""
  team: Team

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Team`. May be used by Relay 1."""
  teamEdge(
    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!] = PRIMARY_KEY_ASC
  ): TeamsEdge
}

"""All input for the create `TeamsToProfile` mutation."""
input CreateTeamsToProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TeamsToProfile` to be created by this mutation."""
  teamsToProfile: TeamsToProfileInput!
}

"""The output of our create `TeamsToProfile` mutation."""
type CreateTeamsToProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TeamsToProfile` that was created by this mutation."""
  teamsToProfile: TeamsToProfile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Team` that is related to this `TeamsToProfile`."""
  team: Team

  """Reads a single `Profile` that is related to this `TeamsToProfile`."""
  profile: Profile

  """An edge for our `TeamsToProfile`. May be used by Relay 1."""
  teamsToProfileEdge(
    """The method to use when ordering `TeamsToProfile`."""
    orderBy: [TeamsToProfilesOrderBy!] = PRIMARY_KEY_ASC
  ): TeamsToProfilesEdge
}

"""All input for the create `Test` mutation."""
input CreateTestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Test` to be created by this mutation."""
  test: TestInput!
}

"""The output of our create `Test` mutation."""
type CreateTestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Test` that was created by this mutation."""
  test: Test

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Problem` that is related to this `Test`."""
  problem: Problem

  """An edge for our `Test`. May be used by Relay 1."""
  testEdge(
    """The method to use when ordering `Test`."""
    orderBy: [TestsOrderBy!] = PRIMARY_KEY_ASC
  ): TestsEdge
}

"""All input for the create `Travel` mutation."""
input CreateTravelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Travel` to be created by this mutation."""
  travel: TravelInput!
}

"""The output of our create `Travel` mutation."""
type CreateTravelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Travel` that was created by this mutation."""
  travel: Travel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Travel`. May be used by Relay 1."""
  travelEdge(
    """The method to use when ordering `Travel`."""
    orderBy: [TravelsOrderBy!] = PRIMARY_KEY_ASC
  ): TravelsEdge
}

"""All input for the create `University` mutation."""
input CreateUniversityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `University` to be created by this mutation."""
  university: UniversityInput!
}

"""The output of our create `University` mutation."""
type CreateUniversityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `University` that was created by this mutation."""
  university: University

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `City` that is related to this `University`."""
  city: City

  """An edge for our `University`. May be used by Relay 1."""
  universityEdge(
    """The method to use when ordering `University`."""
    orderBy: [UniversitiesOrderBy!] = PRIMARY_KEY_ASC
  ): UniversitiesEdge
}

"""All input for the create `UserAuthentication` mutation."""
input CreateUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserAuthentication` to be created by this mutation."""
  userAuthentication: UserAuthenticationInput!
}

"""The output of our create `UserAuthentication` mutation."""
type CreateUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAuthentication` that was created by this mutation."""
  userAuthentication: UserAuthentication

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserAuthentication`. May be used by Relay 1."""
  userAuthenticationEdge(
    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = PRIMARY_KEY_ASC
  ): UserAuthenticationsEdge
}

"""All input for the create `UserAuthenticationSecret` mutation."""
input CreateUserAuthenticationSecretInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserAuthenticationSecret` to be created by this mutation."""
  userAuthenticationSecret: UserAuthenticationSecretInput!
}

"""The output of our create `UserAuthenticationSecret` mutation."""
type CreateUserAuthenticationSecretPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAuthenticationSecret` that was created by this mutation."""
  userAuthenticationSecret: UserAuthenticationSecret

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `UserAuthentication` that is related to this `UserAuthenticationSecret`.
  """
  userAuthentication: UserAuthentication

  """An edge for our `UserAuthenticationSecret`. May be used by Relay 1."""
  userAuthenticationSecretEdge(
    """The method to use when ordering `UserAuthenticationSecret`."""
    orderBy: [UserAuthenticationSecretsOrderBy!] = PRIMARY_KEY_ASC
  ): UserAuthenticationSecretsEdge
}

"""All input for the create `UserEmail` mutation."""
input CreateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserEmail` to be created by this mutation."""
  userEmail: UserEmailInput!
}

"""The output of our create `UserEmail` mutation."""
type CreateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserEmail` that was created by this mutation."""
  userEmail: UserEmail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = PRIMARY_KEY_ASC
  ): UserEmailsEdge
}

"""All input for the create `UserEmailSecret` mutation."""
input CreateUserEmailSecretInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserEmailSecret` to be created by this mutation."""
  userEmailSecret: UserEmailSecretInput!
}

"""The output of our create `UserEmailSecret` mutation."""
type CreateUserEmailSecretPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserEmailSecret` that was created by this mutation."""
  userEmailSecret: UserEmailSecret

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `UserEmail` that is related to this `UserEmailSecret`."""
  userEmail: UserEmail

  """An edge for our `UserEmailSecret`. May be used by Relay 1."""
  userEmailSecretEdge(
    """The method to use when ordering `UserEmailSecret`."""
    orderBy: [UserEmailSecretsOrderBy!] = PRIMARY_KEY_ASC
  ): UserEmailSecretsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

"""All input for the create `UserSecret` mutation."""
input CreateUserSecretInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserSecret` to be created by this mutation."""
  userSecret: UserSecretInput!
}

"""The output of our create `UserSecret` mutation."""
type CreateUserSecretPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSecret` that was created by this mutation."""
  userSecret: UserSecret

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserSecret`."""
  user: User

  """An edge for our `UserSecret`. May be used by Relay 1."""
  userSecretEdge(
    """The method to use when ordering `UserSecret`."""
    orderBy: [UserSecretsOrderBy!] = PRIMARY_KEY_ASC
  ): UserSecretsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteCityById` mutation."""
input DeleteCityByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteCity` mutation."""
input DeleteCityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `City` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `City` mutation."""
type DeleteCityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `City` that was deleted by this mutation."""
  city: City
  deletedCityId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Country` that is related to this `City`."""
  country: Country

  """An edge for our `City`. May be used by Relay 1."""
  cityEdge(
    """The method to use when ordering `City`."""
    orderBy: [CitiesOrderBy!] = PRIMARY_KEY_ASC
  ): CitiesEdge
}

"""All input for the `deleteCodeEditorById` mutation."""
input DeleteCodeEditorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteCodeEditorByNameAndVersion` mutation."""
input DeleteCodeEditorByNameAndVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Name of code editor. Use official name, like Visual Studio"""
  name: String!

  """
  Version of code editor. Version is used for define which margin version is will be used, like Visual Studio 2017
  """
  version: String!
}

"""All input for the `deleteCodeEditorByVersion` mutation."""
input DeleteCodeEditorByVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Version of code editor. Version is used for define which margin version is will be used, like Visual Studio 2017
  """
  version: String!
}

"""All input for the `deleteCodeEditor` mutation."""
input DeleteCodeEditorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CodeEditor` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CodeEditor` mutation."""
type DeleteCodeEditorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CodeEditor` that was deleted by this mutation."""
  codeEditor: CodeEditor
  deletedCodeEditorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CodeEditor`. May be used by Relay 1."""
  codeEditorEdge(
    """The method to use when ordering `CodeEditor`."""
    orderBy: [CodeEditorsOrderBy!] = PRIMARY_KEY_ASC
  ): CodeEditorsEdge
}

"""All input for the `deleteCompilerById` mutation."""
input DeleteCompilerByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteCompilerByNameAndVersion` mutation."""
input DeleteCompilerByNameAndVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Compiler name"""
  name: String!

  """Compiler version"""
  version: String!
}

"""All input for the `deleteCompilerByVersion` mutation."""
input DeleteCompilerByVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Compiler version"""
  version: String!
}

"""All input for the `deleteCompiler` mutation."""
input DeleteCompilerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Compiler` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Compiler` mutation."""
type DeleteCompilerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Compiler` that was deleted by this mutation."""
  compiler: Compiler
  deletedCompilerId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProgrammingLanguage` that is related to this `Compiler`.
  """
  language: ProgrammingLanguage

  """An edge for our `Compiler`. May be used by Relay 1."""
  compilerEdge(
    """The method to use when ordering `Compiler`."""
    orderBy: [CompilersOrderBy!] = PRIMARY_KEY_ASC
  ): CompilersEdge
}

"""All input for the `deleteContestById` mutation."""
input DeleteContestByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteContest` mutation."""
input DeleteContestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Contest` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Contest` mutation."""
type DeleteContestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Contest` that was deleted by this mutation."""
  contest: Contest
  deletedContestId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Contest`."""
  user: User

  """An edge for our `Contest`. May be used by Relay 1."""
  contestEdge(
    """The method to use when ordering `Contest`."""
    orderBy: [ContestsOrderBy!] = PRIMARY_KEY_ASC
  ): ContestsEdge
}

"""
All input for the `deleteContestsToProfileByContestIdAndProfileId` mutation.
"""
input DeleteContestsToProfileByContestIdAndProfileIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  contestId: UUID!
  profileId: UUID!
}

"""All input for the `deleteContestsToProfile` mutation."""
input DeleteContestsToProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContestsToProfile` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ContestsToProfile` mutation."""
type DeleteContestsToProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContestsToProfile` that was deleted by this mutation."""
  contestsToProfile: ContestsToProfile
  deletedContestsToProfileId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Contest` that is related to this `ContestsToProfile`."""
  contest: Contest

  """Reads a single `Profile` that is related to this `ContestsToProfile`."""
  profile: Profile

  """An edge for our `ContestsToProfile`. May be used by Relay 1."""
  contestsToProfileEdge(
    """The method to use when ordering `ContestsToProfile`."""
    orderBy: [ContestsToProfilesOrderBy!] = PRIMARY_KEY_ASC
  ): ContestsToProfilesEdge
}

"""All input for the `deleteContestsToTeamByContestIdAndTeamId` mutation."""
input DeleteContestsToTeamByContestIdAndTeamIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  contestId: UUID!
  teamId: UUID!
}

"""All input for the `deleteContestsToTeam` mutation."""
input DeleteContestsToTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContestsToTeam` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ContestsToTeam` mutation."""
type DeleteContestsToTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContestsToTeam` that was deleted by this mutation."""
  contestsToTeam: ContestsToTeam
  deletedContestsToTeamId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Contest` that is related to this `ContestsToTeam`."""
  contest: Contest

  """Reads a single `Team` that is related to this `ContestsToTeam`."""
  team: Team

  """An edge for our `ContestsToTeam`. May be used by Relay 1."""
  contestsToTeamEdge(
    """The method to use when ordering `ContestsToTeam`."""
    orderBy: [ContestsToTeamsOrderBy!] = PRIMARY_KEY_ASC
  ): ContestsToTeamsEdge
}

"""All input for the `deleteCountryById` mutation."""
input DeleteCountryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteCountry` mutation."""
input DeleteCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Country` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Country` mutation."""
type DeleteCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Country` that was deleted by this mutation."""
  country: Country
  deletedCountryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Country`. May be used by Relay 1."""
  countryEdge(
    """The method to use when ordering `Country`."""
    orderBy: [CountriesOrderBy!] = PRIMARY_KEY_ASC
  ): CountriesEdge
}

"""All input for the `deleteFailTypeById` mutation."""
input DeleteFailTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteFailType` mutation."""
input DeleteFailTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FailType` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `FailType` mutation."""
type DeleteFailTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FailType` that was deleted by this mutation."""
  failType: FailType
  deletedFailTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FailType`. May be used by Relay 1."""
  failTypeEdge(
    """The method to use when ordering `FailType`."""
    orderBy: [FailTypesOrderBy!] = PRIMARY_KEY_ASC
  ): FailTypesEdge
}

"""All input for the `deleteLanguageById` mutation."""
input DeleteLanguageByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteLanguage` mutation."""
input DeleteLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Language` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Language` mutation."""
type DeleteLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Language` that was deleted by this mutation."""
  language: Language
  deletedLanguageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Language`. May be used by Relay 1."""
  languageEdge(
    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = PRIMARY_KEY_ASC
  ): LanguagesEdge
}

"""All input for the `deleteProblemById` mutation."""
input DeleteProblemByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteProblem` mutation."""
input DeleteProblemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Problem` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Problem` mutation."""
type DeleteProblemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Problem` that was deleted by this mutation."""
  problem: Problem
  deletedProblemId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ProgramInputType` that is related to this `Problem`."""
  programInputType: ProgramInputType

  """Reads a single `ProgramOutputType` that is related to this `Problem`."""
  programOutputType: ProgramOutputType

  """Reads a single `Profile` that is related to this `Problem`."""
  author_profile: Profile

  """Reads a single `Profile` that is related to this `Problem`."""
  tester_profile: Profile

  """An edge for our `Problem`. May be used by Relay 1."""
  problemEdge(
    """The method to use when ordering `Problem`."""
    orderBy: [ProblemsOrderBy!] = PRIMARY_KEY_ASC
  ): ProblemsEdge
}

"""All input for the `deleteProblemsToTagByProblemIdAndTagId` mutation."""
input DeleteProblemsToTagByProblemIdAndTagIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  problemId: UUID!
  tagId: UUID!
}

"""All input for the `deleteProblemsToTag` mutation."""
input DeleteProblemsToTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProblemsToTag` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ProblemsToTag` mutation."""
type DeleteProblemsToTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProblemsToTag` that was deleted by this mutation."""
  problemsToTag: ProblemsToTag
  deletedProblemsToTagId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Problem` that is related to this `ProblemsToTag`."""
  problem: Problem

  """Reads a single `Tag` that is related to this `ProblemsToTag`."""
  tag: Tag

  """An edge for our `ProblemsToTag`. May be used by Relay 1."""
  problemsToTagEdge(
    """The method to use when ordering `ProblemsToTag`."""
    orderBy: [ProblemsToTagsOrderBy!] = PRIMARY_KEY_ASC
  ): ProblemsToTagsEdge
}

"""All input for the `deleteProfileById` mutation."""
input DeleteProfileByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteProfile` mutation."""
input DeleteProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Profile` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Profile` mutation."""
type DeleteProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Profile` that was deleted by this mutation."""
  profile: Profile
  deletedProfileId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Profile`."""
  user: User

  """Reads a single `City` that is related to this `Profile`."""
  city: City

  """Reads a single `University` that is related to this `Profile`."""
  university: University

  """An edge for our `Profile`. May be used by Relay 1."""
  profileEdge(
    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = PRIMARY_KEY_ASC
  ): ProfilesEdge
}

"""
All input for the `deleteProfilesToCodeEditorByProfileIdAndCodeEditorId` mutation.
"""
input DeleteProfilesToCodeEditorByProfileIdAndCodeEditorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  profileId: UUID!
  codeEditorId: UUID!
}

"""All input for the `deleteProfilesToCodeEditor` mutation."""
input DeleteProfilesToCodeEditorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProfilesToCodeEditor` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ProfilesToCodeEditor` mutation."""
type DeleteProfilesToCodeEditorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProfilesToCodeEditor` that was deleted by this mutation."""
  profilesToCodeEditor: ProfilesToCodeEditor
  deletedProfilesToCodeEditorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Profile` that is related to this `ProfilesToCodeEditor`.
  """
  profile: Profile

  """
  Reads a single `CodeEditor` that is related to this `ProfilesToCodeEditor`.
  """
  codeEditor: CodeEditor

  """An edge for our `ProfilesToCodeEditor`. May be used by Relay 1."""
  profilesToCodeEditorEdge(
    """The method to use when ordering `ProfilesToCodeEditor`."""
    orderBy: [ProfilesToCodeEditorsOrderBy!] = PRIMARY_KEY_ASC
  ): ProfilesToCodeEditorsEdge
}

"""
All input for the `deleteProfilesToProgrammingLanguageByProfileIdAndLanguageId` mutation.
"""
input DeleteProfilesToProgrammingLanguageByProfileIdAndLanguageIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  profileId: UUID!
  languageId: UUID!
}

"""All input for the `deleteProfilesToProgrammingLanguage` mutation."""
input DeleteProfilesToProgrammingLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProfilesToProgrammingLanguage` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ProfilesToProgrammingLanguage` mutation."""
type DeleteProfilesToProgrammingLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProfilesToProgrammingLanguage` that was deleted by this mutation."""
  profilesToProgrammingLanguage: ProfilesToProgrammingLanguage
  deletedProfilesToProgrammingLanguageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Profile` that is related to this `ProfilesToProgrammingLanguage`.
  """
  profile: Profile

  """
  Reads a single `ProgrammingLanguage` that is related to this `ProfilesToProgrammingLanguage`.
  """
  language: ProgrammingLanguage

  """
  An edge for our `ProfilesToProgrammingLanguage`. May be used by Relay 1.
  """
  profilesToProgrammingLanguageEdge(
    """The method to use when ordering `ProfilesToProgrammingLanguage`."""
    orderBy: [ProfilesToProgrammingLanguagesOrderBy!] = PRIMARY_KEY_ASC
  ): ProfilesToProgrammingLanguagesEdge
}

"""
All input for the `deleteProfilesToTravelByProfileIdAndTravelId` mutation.
"""
input DeleteProfilesToTravelByProfileIdAndTravelIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  profileId: UUID!
  travelId: UUID!
}

"""All input for the `deleteProfilesToTravel` mutation."""
input DeleteProfilesToTravelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProfilesToTravel` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ProfilesToTravel` mutation."""
type DeleteProfilesToTravelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProfilesToTravel` that was deleted by this mutation."""
  profilesToTravel: ProfilesToTravel
  deletedProfilesToTravelId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Profile` that is related to this `ProfilesToTravel`."""
  profile: Profile

  """Reads a single `Travel` that is related to this `ProfilesToTravel`."""
  travel: Travel

  """An edge for our `ProfilesToTravel`. May be used by Relay 1."""
  profilesToTravelEdge(
    """The method to use when ordering `ProfilesToTravel`."""
    orderBy: [ProfilesToTravelsOrderBy!] = PRIMARY_KEY_ASC
  ): ProfilesToTravelsEdge
}

"""All input for the `deleteProgramInputTypeById` mutation."""
input DeleteProgramInputTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteProgramInputType` mutation."""
input DeleteProgramInputTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProgramInputType` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ProgramInputType` mutation."""
type DeleteProgramInputTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProgramInputType` that was deleted by this mutation."""
  programInputType: ProgramInputType
  deletedProgramInputTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProgramInputType`. May be used by Relay 1."""
  programInputTypeEdge(
    """The method to use when ordering `ProgramInputType`."""
    orderBy: [ProgramInputTypesOrderBy!] = PRIMARY_KEY_ASC
  ): ProgramInputTypesEdge
}

"""All input for the `deleteProgrammingLanguageById` mutation."""
input DeleteProgrammingLanguageByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
All input for the `deleteProgrammingLanguageByNameAndVersion` mutation.
"""
input DeleteProgrammingLanguageByNameAndVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Name of language. Use official name, like C++, Go, JavaScript, but not cpp, Golang, ES
  """
  name: String!

  """
  Version of language. Version is used for compiler or interpreter. Also can have definition of used extensions and presets
  """
  version: String!
}

"""All input for the `deleteProgrammingLanguageByVersion` mutation."""
input DeleteProgrammingLanguageByVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Version of language. Version is used for compiler or interpreter. Also can have definition of used extensions and presets
  """
  version: String!
}

"""All input for the `deleteProgrammingLanguage` mutation."""
input DeleteProgrammingLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProgrammingLanguage` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ProgrammingLanguage` mutation."""
type DeleteProgrammingLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProgrammingLanguage` that was deleted by this mutation."""
  programmingLanguage: ProgrammingLanguage
  deletedProgrammingLanguageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProgrammingLanguage`. May be used by Relay 1."""
  programmingLanguageEdge(
    """The method to use when ordering `ProgrammingLanguage`."""
    orderBy: [ProgrammingLanguagesOrderBy!] = PRIMARY_KEY_ASC
  ): ProgrammingLanguagesEdge
}

"""All input for the `deleteProgramOutputTypeById` mutation."""
input DeleteProgramOutputTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteProgramOutputType` mutation."""
input DeleteProgramOutputTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProgramOutputType` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ProgramOutputType` mutation."""
type DeleteProgramOutputTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProgramOutputType` that was deleted by this mutation."""
  programOutputType: ProgramOutputType
  deletedProgramOutputTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProgramOutputType`. May be used by Relay 1."""
  programOutputTypeEdge(
    """The method to use when ordering `ProgramOutputType`."""
    orderBy: [ProgramOutputTypesOrderBy!] = PRIMARY_KEY_ASC
  ): ProgramOutputTypesEdge
}

"""All input for the `deleteSolutionById` mutation."""
input DeleteSolutionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteSolution` mutation."""
input DeleteSolutionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Solution` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Solution` mutation."""
type DeleteSolutionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Solution` that was deleted by this mutation."""
  solution: Solution
  deletedSolutionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Problem` that is related to this `Solution`."""
  problem: Problem

  """Reads a single `Compiler` that is related to this `Solution`."""
  compiler: Compiler

  """An edge for our `Solution`. May be used by Relay 1."""
  solutionEdge(
    """The method to use when ordering `Solution`."""
    orderBy: [SolutionsOrderBy!] = PRIMARY_KEY_ASC
  ): SolutionsEdge
}

"""All input for the `deleteSolutionRunById` mutation."""
input DeleteSolutionRunByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteSolutionRun` mutation."""
input DeleteSolutionRunInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SolutionRun` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SolutionRun` mutation."""
type DeleteSolutionRunPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SolutionRun` that was deleted by this mutation."""
  solutionRun: SolutionRun
  deletedSolutionRunId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Solution` that is related to this `SolutionRun`."""
  solution: Solution

  """Reads a single `Test` that is related to this `SolutionRun`."""
  failedTest: Test

  """Reads a single `FailType` that is related to this `SolutionRun`."""
  failType: FailType

  """An edge for our `SolutionRun`. May be used by Relay 1."""
  solutionRunEdge(
    """The method to use when ordering `SolutionRun`."""
    orderBy: [SolutionRunsOrderBy!] = PRIMARY_KEY_ASC
  ): SolutionRunsEdge
}

"""All input for the `deleteTagById` mutation."""
input DeleteTagByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteTag` mutation."""
input DeleteTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tag` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Tag` mutation."""
type DeleteTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tag` that was deleted by this mutation."""
  tag: Tag
  deletedTagId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = PRIMARY_KEY_ASC
  ): TagsEdge
}

"""All input for the `deleteTeamById` mutation."""
input DeleteTeamByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteTeam` mutation."""
input DeleteTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Team` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Team` mutation."""
type DeleteTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Team` that was deleted by this mutation."""
  team: Team
  deletedTeamId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Team`. May be used by Relay 1."""
  teamEdge(
    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!] = PRIMARY_KEY_ASC
  ): TeamsEdge
}

"""All input for the `deleteTeamsToProfileByTeamIdAndProfileId` mutation."""
input DeleteTeamsToProfileByTeamIdAndProfileIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  teamId: UUID!
  profileId: UUID!
}

"""All input for the `deleteTeamsToProfile` mutation."""
input DeleteTeamsToProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TeamsToProfile` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TeamsToProfile` mutation."""
type DeleteTeamsToProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TeamsToProfile` that was deleted by this mutation."""
  teamsToProfile: TeamsToProfile
  deletedTeamsToProfileId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Team` that is related to this `TeamsToProfile`."""
  team: Team

  """Reads a single `Profile` that is related to this `TeamsToProfile`."""
  profile: Profile

  """An edge for our `TeamsToProfile`. May be used by Relay 1."""
  teamsToProfileEdge(
    """The method to use when ordering `TeamsToProfile`."""
    orderBy: [TeamsToProfilesOrderBy!] = PRIMARY_KEY_ASC
  ): TeamsToProfilesEdge
}

"""All input for the `deleteTestById` mutation."""
input DeleteTestByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteTest` mutation."""
input DeleteTestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Test` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Test` mutation."""
type DeleteTestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Test` that was deleted by this mutation."""
  test: Test
  deletedTestId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Problem` that is related to this `Test`."""
  problem: Problem

  """An edge for our `Test`. May be used by Relay 1."""
  testEdge(
    """The method to use when ordering `Test`."""
    orderBy: [TestsOrderBy!] = PRIMARY_KEY_ASC
  ): TestsEdge
}

"""All input for the `deleteTravelById` mutation."""
input DeleteTravelByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteTravel` mutation."""
input DeleteTravelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Travel` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Travel` mutation."""
type DeleteTravelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Travel` that was deleted by this mutation."""
  travel: Travel
  deletedTravelId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Travel`. May be used by Relay 1."""
  travelEdge(
    """The method to use when ordering `Travel`."""
    orderBy: [TravelsOrderBy!] = PRIMARY_KEY_ASC
  ): TravelsEdge
}

"""All input for the `deleteUniversityById` mutation."""
input DeleteUniversityByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteUniversity` mutation."""
input DeleteUniversityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `University` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `University` mutation."""
type DeleteUniversityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `University` that was deleted by this mutation."""
  university: University
  deletedUniversityId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `City` that is related to this `University`."""
  city: City

  """An edge for our `University`. May be used by Relay 1."""
  universityEdge(
    """The method to use when ordering `University`."""
    orderBy: [UniversitiesOrderBy!] = PRIMARY_KEY_ASC
  ): UniversitiesEdge
}

"""All input for the `deleteUserAuthenticationById` mutation."""
input DeleteUserAuthenticationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
All input for the `deleteUserAuthenticationByServiceAndIdentifier` mutation.
"""
input DeleteUserAuthenticationByServiceAndIdentifierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The login service used, e.g. `twitter` or `github`."""
  service: String!

  """A unique identifier for the user within the login service."""
  identifier: String!
}

"""All input for the `deleteUserAuthentication` mutation."""
input DeleteUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAuthentication` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `UserAuthentication` mutation."""
type DeleteUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAuthentication` that was deleted by this mutation."""
  userAuthentication: UserAuthentication
  deletedUserAuthenticationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserAuthentication`. May be used by Relay 1."""
  userAuthenticationEdge(
    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = PRIMARY_KEY_ASC
  ): UserAuthenticationsEdge
}

"""
All input for the `deleteUserAuthenticationSecretByUserAuthenticationId` mutation.
"""
input DeleteUserAuthenticationSecretByUserAuthenticationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userAuthenticationId: UUID!
}

"""All input for the `deleteUserAuthenticationSecret` mutation."""
input DeleteUserAuthenticationSecretInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAuthenticationSecret` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `UserAuthenticationSecret` mutation."""
type DeleteUserAuthenticationSecretPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAuthenticationSecret` that was deleted by this mutation."""
  userAuthenticationSecret: UserAuthenticationSecret
  deletedUserAuthenticationSecretId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `UserAuthentication` that is related to this `UserAuthenticationSecret`.
  """
  userAuthentication: UserAuthentication

  """An edge for our `UserAuthenticationSecret`. May be used by Relay 1."""
  userAuthenticationSecretEdge(
    """The method to use when ordering `UserAuthenticationSecret`."""
    orderBy: [UserAuthenticationSecretsOrderBy!] = PRIMARY_KEY_ASC
  ): UserAuthenticationSecretsEdge
}

"""All input for the `deleteUserById` mutation."""
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: UUID!
}

"""All input for the `deleteUserByUsername` mutation."""
input DeleteUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""All input for the `deleteUserEmailById` mutation."""
input DeleteUserEmailByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteUserEmailByUserIdAndEmail` mutation."""
input DeleteUserEmailByUserIdAndEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: UUID!

  """The users email address, in `a@b.c` format."""
  email: String!
}

"""All input for the `deleteUserEmail` mutation."""
input DeleteUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserEmail` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `UserEmail` mutation."""
type DeleteUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserEmail` that was deleted by this mutation."""
  userEmail: UserEmail
  deletedUserEmailId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = PRIMARY_KEY_ASC
  ): UserEmailsEdge
}

"""All input for the `deleteUserEmailSecretByUserEmailId` mutation."""
input DeleteUserEmailSecretByUserEmailIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userEmailId: UUID!
}

"""All input for the `deleteUserEmailSecret` mutation."""
input DeleteUserEmailSecretInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserEmailSecret` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `UserEmailSecret` mutation."""
type DeleteUserEmailSecretPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserEmailSecret` that was deleted by this mutation."""
  userEmailSecret: UserEmailSecret
  deletedUserEmailSecretId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `UserEmail` that is related to this `UserEmailSecret`."""
  userEmail: UserEmail

  """An edge for our `UserEmailSecret`. May be used by Relay 1."""
  userEmailSecretEdge(
    """The method to use when ordering `UserEmailSecret`."""
    orderBy: [UserEmailSecretsOrderBy!] = PRIMARY_KEY_ASC
  ): UserEmailSecretsEdge
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

"""All input for the `deleteUserSecretByUserId` mutation."""
input DeleteUserSecretByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: UUID!
}

"""All input for the `deleteUserSecret` mutation."""
input DeleteUserSecretInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserSecret` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `UserSecret` mutation."""
type DeleteUserSecretPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSecret` that was deleted by this mutation."""
  userSecret: UserSecret
  deletedUserSecretId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserSecret`."""
  user: User

  """An edge for our `UserSecret`. May be used by Relay 1."""
  userSecretEdge(
    """The method to use when ordering `UserSecret`."""
    orderBy: [UserSecretsOrderBy!] = PRIMARY_KEY_ASC
  ): UserSecretsEdge
}

"""
Describe types of run program, aka "not equal test output", "exit with error",...
"""
type FailType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `SolutionRun`."""
  solutionRuns(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SolutionRun`."""
    orderBy: [SolutionRunsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SolutionRunCondition
  ): SolutionRunsConnection!
}

"""
A condition to be used against `FailType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FailTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `FailType`"""
input FailTypeInput {
  id: UUID
  name: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `FailType`. Fields that are set will be updated.
"""
input FailTypePatch {
  id: UUID
  name: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `FailType` values."""
type FailTypesConnection {
  """A list of `FailType` objects."""
  nodes: [FailType]!

  """
  A list of edges which contains the `FailType` and cursor to aid in pagination.
  """
  edges: [FailTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FailType` you could get from the connection."""
  totalCount: Int
}

"""A `FailType` edge in the connection."""
type FailTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FailType` at the end of the edge."""
  node: FailType
}

"""Methods to use when ordering `FailType`."""
enum FailTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `forgotPassword` mutation."""
input ForgotPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `forgotPassword` mutation."""
type ForgotPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  success: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Languages ​​from which the application is accessible"""
type Language implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!

  """Language name is displayed to user"""
  name: String!

  """
  Language code is used in url or other places, aka "some.com/en/..."
  """
  code: String!
  createdAt: Datetime!
  updatedAt: Datetime!
}

"""
A condition to be used against `Language` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LanguageCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Language`"""
input LanguageInput {
  id: UUID

  """Language name is displayed to user"""
  name: String!

  """
  Language code is used in url or other places, aka "some.com/en/..."
  """
  code: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Language`. Fields that are set will be updated.
"""
input LanguagePatch {
  id: UUID

  """Language name is displayed to user"""
  name: String

  """
  Language code is used in url or other places, aka "some.com/en/..."
  """
  code: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `Language` values."""
type LanguagesConnection {
  """A list of `Language` objects."""
  nodes: [Language]!

  """
  A list of edges which contains the `Language` and cursor to aid in pagination.
  """
  edges: [LanguagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Language` you could get from the connection."""
  totalCount: Int
}

"""A `Language` edge in the connection."""
type LanguagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Language` at the end of the edge."""
  node: Language
}

"""Methods to use when ordering `Language`."""
enum LanguagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CODE_ASC
  CODE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `linkOrRegisterUser` mutation."""
input LinkOrRegisterUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  fUserId: UUID
  fService: String
  fIdentifier: String
  fProfile: JSON
  fAuthDetails: JSON
}

"""The output of our `linkOrRegisterUser` mutation."""
type LinkOrRegisterUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

"""All input for the `login` mutation."""
input LoginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
  password: String!
}

"""The output of our `login` mutation."""
type LoginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `City`."""
  createCity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCityInput!
  ): CreateCityPayload

  """Creates a single `CodeEditor`."""
  createCodeEditor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCodeEditorInput!
  ): CreateCodeEditorPayload

  """Creates a single `Compiler`."""
  createCompiler(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCompilerInput!
  ): CreateCompilerPayload

  """Creates a single `Contest`."""
  createContest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateContestInput!
  ): CreateContestPayload

  """Creates a single `ContestsToProfile`."""
  createContestsToProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateContestsToProfileInput!
  ): CreateContestsToProfilePayload

  """Creates a single `ContestsToTeam`."""
  createContestsToTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateContestsToTeamInput!
  ): CreateContestsToTeamPayload

  """Creates a single `Country`."""
  createCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCountryInput!
  ): CreateCountryPayload

  """Creates a single `FailType`."""
  createFailType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFailTypeInput!
  ): CreateFailTypePayload

  """Creates a single `Language`."""
  createLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLanguageInput!
  ): CreateLanguagePayload

  """Creates a single `Problem`."""
  createProblem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProblemInput!
  ): CreateProblemPayload

  """Creates a single `ProblemsToTag`."""
  createProblemsToTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProblemsToTagInput!
  ): CreateProblemsToTagPayload

  """Creates a single `Profile`."""
  createProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProfileInput!
  ): CreateProfilePayload

  """Creates a single `ProfilesToCodeEditor`."""
  createProfilesToCodeEditor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProfilesToCodeEditorInput!
  ): CreateProfilesToCodeEditorPayload

  """Creates a single `ProfilesToProgrammingLanguage`."""
  createProfilesToProgrammingLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProfilesToProgrammingLanguageInput!
  ): CreateProfilesToProgrammingLanguagePayload

  """Creates a single `ProfilesToTravel`."""
  createProfilesToTravel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProfilesToTravelInput!
  ): CreateProfilesToTravelPayload

  """Creates a single `ProgramInputType`."""
  createProgramInputType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProgramInputTypeInput!
  ): CreateProgramInputTypePayload

  """Creates a single `ProgramOutputType`."""
  createProgramOutputType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProgramOutputTypeInput!
  ): CreateProgramOutputTypePayload

  """Creates a single `ProgrammingLanguage`."""
  createProgrammingLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProgrammingLanguageInput!
  ): CreateProgrammingLanguagePayload

  """Creates a single `Solution`."""
  createSolution(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSolutionInput!
  ): CreateSolutionPayload

  """Creates a single `SolutionRun`."""
  createSolutionRun(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSolutionRunInput!
  ): CreateSolutionRunPayload

  """Creates a single `Tag`."""
  createTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTagInput!
  ): CreateTagPayload

  """Creates a single `Team`."""
  createTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTeamInput!
  ): CreateTeamPayload

  """Creates a single `TeamsToProfile`."""
  createTeamsToProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTeamsToProfileInput!
  ): CreateTeamsToProfilePayload

  """Creates a single `Test`."""
  createTest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTestInput!
  ): CreateTestPayload

  """Creates a single `Travel`."""
  createTravel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTravelInput!
  ): CreateTravelPayload

  """Creates a single `University`."""
  createUniversity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUniversityInput!
  ): CreateUniversityPayload

  """Creates a single `UserAuthentication`."""
  createUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserAuthenticationInput!
  ): CreateUserAuthenticationPayload

  """Creates a single `UserEmail`."""
  createUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserEmailInput!
  ): CreateUserEmailPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `UserAuthenticationSecret`."""
  createUserAuthenticationSecret(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserAuthenticationSecretInput!
  ): CreateUserAuthenticationSecretPayload

  """Creates a single `UserEmailSecret`."""
  createUserEmailSecret(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserEmailSecretInput!
  ): CreateUserEmailSecretPayload

  """Creates a single `UserSecret`."""
  createUserSecret(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserSecretInput!
  ): CreateUserSecretPayload

  """Updates a single `City` using its globally unique id and a patch."""
  updateCity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCityInput!
  ): UpdateCityPayload

  """Updates a single `City` using a unique key and a patch."""
  updateCityById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCityByIdInput!
  ): UpdateCityPayload

  """
  Updates a single `CodeEditor` using its globally unique id and a patch.
  """
  updateCodeEditor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCodeEditorInput!
  ): UpdateCodeEditorPayload

  """Updates a single `CodeEditor` using a unique key and a patch."""
  updateCodeEditorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCodeEditorByIdInput!
  ): UpdateCodeEditorPayload

  """Updates a single `CodeEditor` using a unique key and a patch."""
  updateCodeEditorByNameAndVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCodeEditorByNameAndVersionInput!
  ): UpdateCodeEditorPayload

  """Updates a single `CodeEditor` using a unique key and a patch."""
  updateCodeEditorByVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCodeEditorByVersionInput!
  ): UpdateCodeEditorPayload

  """Updates a single `Compiler` using its globally unique id and a patch."""
  updateCompiler(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompilerInput!
  ): UpdateCompilerPayload

  """Updates a single `Compiler` using a unique key and a patch."""
  updateCompilerById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompilerByIdInput!
  ): UpdateCompilerPayload

  """Updates a single `Compiler` using a unique key and a patch."""
  updateCompilerByNameAndVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompilerByNameAndVersionInput!
  ): UpdateCompilerPayload

  """Updates a single `Compiler` using a unique key and a patch."""
  updateCompilerByVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompilerByVersionInput!
  ): UpdateCompilerPayload

  """Updates a single `Contest` using its globally unique id and a patch."""
  updateContest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContestInput!
  ): UpdateContestPayload

  """Updates a single `Contest` using a unique key and a patch."""
  updateContestById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContestByIdInput!
  ): UpdateContestPayload

  """
  Updates a single `ContestsToProfile` using its globally unique id and a patch.
  """
  updateContestsToProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContestsToProfileInput!
  ): UpdateContestsToProfilePayload

  """Updates a single `ContestsToProfile` using a unique key and a patch."""
  updateContestsToProfileByContestIdAndProfileId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContestsToProfileByContestIdAndProfileIdInput!
  ): UpdateContestsToProfilePayload

  """
  Updates a single `ContestsToTeam` using its globally unique id and a patch.
  """
  updateContestsToTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContestsToTeamInput!
  ): UpdateContestsToTeamPayload

  """Updates a single `ContestsToTeam` using a unique key and a patch."""
  updateContestsToTeamByContestIdAndTeamId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContestsToTeamByContestIdAndTeamIdInput!
  ): UpdateContestsToTeamPayload

  """Updates a single `Country` using its globally unique id and a patch."""
  updateCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCountryInput!
  ): UpdateCountryPayload

  """Updates a single `Country` using a unique key and a patch."""
  updateCountryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCountryByIdInput!
  ): UpdateCountryPayload

  """Updates a single `FailType` using its globally unique id and a patch."""
  updateFailType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFailTypeInput!
  ): UpdateFailTypePayload

  """Updates a single `FailType` using a unique key and a patch."""
  updateFailTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFailTypeByIdInput!
  ): UpdateFailTypePayload

  """Updates a single `Language` using its globally unique id and a patch."""
  updateLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageInput!
  ): UpdateLanguagePayload

  """Updates a single `Language` using a unique key and a patch."""
  updateLanguageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageByIdInput!
  ): UpdateLanguagePayload

  """Updates a single `Problem` using its globally unique id and a patch."""
  updateProblem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProblemInput!
  ): UpdateProblemPayload

  """Updates a single `Problem` using a unique key and a patch."""
  updateProblemById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProblemByIdInput!
  ): UpdateProblemPayload

  """
  Updates a single `ProblemsToTag` using its globally unique id and a patch.
  """
  updateProblemsToTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProblemsToTagInput!
  ): UpdateProblemsToTagPayload

  """Updates a single `ProblemsToTag` using a unique key and a patch."""
  updateProblemsToTagByProblemIdAndTagId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProblemsToTagByProblemIdAndTagIdInput!
  ): UpdateProblemsToTagPayload

  """Updates a single `Profile` using its globally unique id and a patch."""
  updateProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfileInput!
  ): UpdateProfilePayload

  """Updates a single `Profile` using a unique key and a patch."""
  updateProfileById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfileByIdInput!
  ): UpdateProfilePayload

  """
  Updates a single `ProfilesToCodeEditor` using its globally unique id and a patch.
  """
  updateProfilesToCodeEditor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfilesToCodeEditorInput!
  ): UpdateProfilesToCodeEditorPayload

  """
  Updates a single `ProfilesToCodeEditor` using a unique key and a patch.
  """
  updateProfilesToCodeEditorByProfileIdAndCodeEditorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfilesToCodeEditorByProfileIdAndCodeEditorIdInput!
  ): UpdateProfilesToCodeEditorPayload

  """
  Updates a single `ProfilesToProgrammingLanguage` using its globally unique id and a patch.
  """
  updateProfilesToProgrammingLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfilesToProgrammingLanguageInput!
  ): UpdateProfilesToProgrammingLanguagePayload

  """
  Updates a single `ProfilesToProgrammingLanguage` using a unique key and a patch.
  """
  updateProfilesToProgrammingLanguageByProfileIdAndLanguageId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfilesToProgrammingLanguageByProfileIdAndLanguageIdInput!
  ): UpdateProfilesToProgrammingLanguagePayload

  """
  Updates a single `ProfilesToTravel` using its globally unique id and a patch.
  """
  updateProfilesToTravel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfilesToTravelInput!
  ): UpdateProfilesToTravelPayload

  """Updates a single `ProfilesToTravel` using a unique key and a patch."""
  updateProfilesToTravelByProfileIdAndTravelId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfilesToTravelByProfileIdAndTravelIdInput!
  ): UpdateProfilesToTravelPayload

  """
  Updates a single `ProgramInputType` using its globally unique id and a patch.
  """
  updateProgramInputType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProgramInputTypeInput!
  ): UpdateProgramInputTypePayload

  """Updates a single `ProgramInputType` using a unique key and a patch."""
  updateProgramInputTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProgramInputTypeByIdInput!
  ): UpdateProgramInputTypePayload

  """
  Updates a single `ProgramOutputType` using its globally unique id and a patch.
  """
  updateProgramOutputType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProgramOutputTypeInput!
  ): UpdateProgramOutputTypePayload

  """Updates a single `ProgramOutputType` using a unique key and a patch."""
  updateProgramOutputTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProgramOutputTypeByIdInput!
  ): UpdateProgramOutputTypePayload

  """
  Updates a single `ProgrammingLanguage` using its globally unique id and a patch.
  """
  updateProgrammingLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProgrammingLanguageInput!
  ): UpdateProgrammingLanguagePayload

  """Updates a single `ProgrammingLanguage` using a unique key and a patch."""
  updateProgrammingLanguageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProgrammingLanguageByIdInput!
  ): UpdateProgrammingLanguagePayload

  """Updates a single `ProgrammingLanguage` using a unique key and a patch."""
  updateProgrammingLanguageByNameAndVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProgrammingLanguageByNameAndVersionInput!
  ): UpdateProgrammingLanguagePayload

  """Updates a single `ProgrammingLanguage` using a unique key and a patch."""
  updateProgrammingLanguageByVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProgrammingLanguageByVersionInput!
  ): UpdateProgrammingLanguagePayload

  """Updates a single `Solution` using its globally unique id and a patch."""
  updateSolution(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSolutionInput!
  ): UpdateSolutionPayload

  """Updates a single `Solution` using a unique key and a patch."""
  updateSolutionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSolutionByIdInput!
  ): UpdateSolutionPayload

  """
  Updates a single `SolutionRun` using its globally unique id and a patch.
  """
  updateSolutionRun(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSolutionRunInput!
  ): UpdateSolutionRunPayload

  """Updates a single `SolutionRun` using a unique key and a patch."""
  updateSolutionRunById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSolutionRunByIdInput!
  ): UpdateSolutionRunPayload

  """Updates a single `Tag` using its globally unique id and a patch."""
  updateTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagInput!
  ): UpdateTagPayload

  """Updates a single `Tag` using a unique key and a patch."""
  updateTagById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagByIdInput!
  ): UpdateTagPayload

  """Updates a single `Team` using its globally unique id and a patch."""
  updateTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamInput!
  ): UpdateTeamPayload

  """Updates a single `Team` using a unique key and a patch."""
  updateTeamById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamByIdInput!
  ): UpdateTeamPayload

  """
  Updates a single `TeamsToProfile` using its globally unique id and a patch.
  """
  updateTeamsToProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamsToProfileInput!
  ): UpdateTeamsToProfilePayload

  """Updates a single `TeamsToProfile` using a unique key and a patch."""
  updateTeamsToProfileByTeamIdAndProfileId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamsToProfileByTeamIdAndProfileIdInput!
  ): UpdateTeamsToProfilePayload

  """Updates a single `Test` using its globally unique id and a patch."""
  updateTest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTestInput!
  ): UpdateTestPayload

  """Updates a single `Test` using a unique key and a patch."""
  updateTestById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTestByIdInput!
  ): UpdateTestPayload

  """Updates a single `Travel` using its globally unique id and a patch."""
  updateTravel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTravelInput!
  ): UpdateTravelPayload

  """Updates a single `Travel` using a unique key and a patch."""
  updateTravelById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTravelByIdInput!
  ): UpdateTravelPayload

  """
  Updates a single `University` using its globally unique id and a patch.
  """
  updateUniversity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUniversityInput!
  ): UpdateUniversityPayload

  """Updates a single `University` using a unique key and a patch."""
  updateUniversityById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUniversityByIdInput!
  ): UpdateUniversityPayload

  """
  Updates a single `UserAuthentication` using its globally unique id and a patch.
  """
  updateUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAuthenticationInput!
  ): UpdateUserAuthenticationPayload

  """Updates a single `UserAuthentication` using a unique key and a patch."""
  updateUserAuthenticationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAuthenticationByIdInput!
  ): UpdateUserAuthenticationPayload

  """Updates a single `UserAuthentication` using a unique key and a patch."""
  updateUserAuthenticationByServiceAndIdentifier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAuthenticationByServiceAndIdentifierInput!
  ): UpdateUserAuthenticationPayload

  """Updates a single `UserEmail` using its globally unique id and a patch."""
  updateUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserEmailInput!
  ): UpdateUserEmailPayload

  """Updates a single `UserEmail` using a unique key and a patch."""
  updateUserEmailById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserEmailByIdInput!
  ): UpdateUserEmailPayload

  """Updates a single `UserEmail` using a unique key and a patch."""
  updateUserEmailByUserIdAndEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserEmailByUserIdAndEmailInput!
  ): UpdateUserEmailPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload

  """
  Updates a single `UserAuthenticationSecret` using its globally unique id and a patch.
  """
  updateUserAuthenticationSecret(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAuthenticationSecretInput!
  ): UpdateUserAuthenticationSecretPayload

  """
  Updates a single `UserAuthenticationSecret` using a unique key and a patch.
  """
  updateUserAuthenticationSecretByUserAuthenticationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAuthenticationSecretByUserAuthenticationIdInput!
  ): UpdateUserAuthenticationSecretPayload

  """
  Updates a single `UserEmailSecret` using its globally unique id and a patch.
  """
  updateUserEmailSecret(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserEmailSecretInput!
  ): UpdateUserEmailSecretPayload

  """Updates a single `UserEmailSecret` using a unique key and a patch."""
  updateUserEmailSecretByUserEmailId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserEmailSecretByUserEmailIdInput!
  ): UpdateUserEmailSecretPayload

  """
  Updates a single `UserSecret` using its globally unique id and a patch.
  """
  updateUserSecret(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserSecretInput!
  ): UpdateUserSecretPayload

  """Updates a single `UserSecret` using a unique key and a patch."""
  updateUserSecretByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserSecretByUserIdInput!
  ): UpdateUserSecretPayload

  """Deletes a single `City` using its globally unique id."""
  deleteCity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCityInput!
  ): DeleteCityPayload

  """Deletes a single `City` using a unique key."""
  deleteCityById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCityByIdInput!
  ): DeleteCityPayload

  """Deletes a single `CodeEditor` using its globally unique id."""
  deleteCodeEditor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCodeEditorInput!
  ): DeleteCodeEditorPayload

  """Deletes a single `CodeEditor` using a unique key."""
  deleteCodeEditorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCodeEditorByIdInput!
  ): DeleteCodeEditorPayload

  """Deletes a single `CodeEditor` using a unique key."""
  deleteCodeEditorByNameAndVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCodeEditorByNameAndVersionInput!
  ): DeleteCodeEditorPayload

  """Deletes a single `CodeEditor` using a unique key."""
  deleteCodeEditorByVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCodeEditorByVersionInput!
  ): DeleteCodeEditorPayload

  """Deletes a single `Compiler` using its globally unique id."""
  deleteCompiler(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompilerInput!
  ): DeleteCompilerPayload

  """Deletes a single `Compiler` using a unique key."""
  deleteCompilerById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompilerByIdInput!
  ): DeleteCompilerPayload

  """Deletes a single `Compiler` using a unique key."""
  deleteCompilerByNameAndVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompilerByNameAndVersionInput!
  ): DeleteCompilerPayload

  """Deletes a single `Compiler` using a unique key."""
  deleteCompilerByVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompilerByVersionInput!
  ): DeleteCompilerPayload

  """Deletes a single `Contest` using its globally unique id."""
  deleteContest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContestInput!
  ): DeleteContestPayload

  """Deletes a single `Contest` using a unique key."""
  deleteContestById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContestByIdInput!
  ): DeleteContestPayload

  """Deletes a single `ContestsToProfile` using its globally unique id."""
  deleteContestsToProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContestsToProfileInput!
  ): DeleteContestsToProfilePayload

  """Deletes a single `ContestsToProfile` using a unique key."""
  deleteContestsToProfileByContestIdAndProfileId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContestsToProfileByContestIdAndProfileIdInput!
  ): DeleteContestsToProfilePayload

  """Deletes a single `ContestsToTeam` using its globally unique id."""
  deleteContestsToTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContestsToTeamInput!
  ): DeleteContestsToTeamPayload

  """Deletes a single `ContestsToTeam` using a unique key."""
  deleteContestsToTeamByContestIdAndTeamId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContestsToTeamByContestIdAndTeamIdInput!
  ): DeleteContestsToTeamPayload

  """Deletes a single `Country` using its globally unique id."""
  deleteCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCountryInput!
  ): DeleteCountryPayload

  """Deletes a single `Country` using a unique key."""
  deleteCountryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCountryByIdInput!
  ): DeleteCountryPayload

  """Deletes a single `FailType` using its globally unique id."""
  deleteFailType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFailTypeInput!
  ): DeleteFailTypePayload

  """Deletes a single `FailType` using a unique key."""
  deleteFailTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFailTypeByIdInput!
  ): DeleteFailTypePayload

  """Deletes a single `Language` using its globally unique id."""
  deleteLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageInput!
  ): DeleteLanguagePayload

  """Deletes a single `Language` using a unique key."""
  deleteLanguageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageByIdInput!
  ): DeleteLanguagePayload

  """Deletes a single `Problem` using its globally unique id."""
  deleteProblem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProblemInput!
  ): DeleteProblemPayload

  """Deletes a single `Problem` using a unique key."""
  deleteProblemById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProblemByIdInput!
  ): DeleteProblemPayload

  """Deletes a single `ProblemsToTag` using its globally unique id."""
  deleteProblemsToTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProblemsToTagInput!
  ): DeleteProblemsToTagPayload

  """Deletes a single `ProblemsToTag` using a unique key."""
  deleteProblemsToTagByProblemIdAndTagId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProblemsToTagByProblemIdAndTagIdInput!
  ): DeleteProblemsToTagPayload

  """Deletes a single `Profile` using its globally unique id."""
  deleteProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfileInput!
  ): DeleteProfilePayload

  """Deletes a single `Profile` using a unique key."""
  deleteProfileById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfileByIdInput!
  ): DeleteProfilePayload

  """Deletes a single `ProfilesToCodeEditor` using its globally unique id."""
  deleteProfilesToCodeEditor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfilesToCodeEditorInput!
  ): DeleteProfilesToCodeEditorPayload

  """Deletes a single `ProfilesToCodeEditor` using a unique key."""
  deleteProfilesToCodeEditorByProfileIdAndCodeEditorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfilesToCodeEditorByProfileIdAndCodeEditorIdInput!
  ): DeleteProfilesToCodeEditorPayload

  """
  Deletes a single `ProfilesToProgrammingLanguage` using its globally unique id.
  """
  deleteProfilesToProgrammingLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfilesToProgrammingLanguageInput!
  ): DeleteProfilesToProgrammingLanguagePayload

  """Deletes a single `ProfilesToProgrammingLanguage` using a unique key."""
  deleteProfilesToProgrammingLanguageByProfileIdAndLanguageId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfilesToProgrammingLanguageByProfileIdAndLanguageIdInput!
  ): DeleteProfilesToProgrammingLanguagePayload

  """Deletes a single `ProfilesToTravel` using its globally unique id."""
  deleteProfilesToTravel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfilesToTravelInput!
  ): DeleteProfilesToTravelPayload

  """Deletes a single `ProfilesToTravel` using a unique key."""
  deleteProfilesToTravelByProfileIdAndTravelId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfilesToTravelByProfileIdAndTravelIdInput!
  ): DeleteProfilesToTravelPayload

  """Deletes a single `ProgramInputType` using its globally unique id."""
  deleteProgramInputType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProgramInputTypeInput!
  ): DeleteProgramInputTypePayload

  """Deletes a single `ProgramInputType` using a unique key."""
  deleteProgramInputTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProgramInputTypeByIdInput!
  ): DeleteProgramInputTypePayload

  """Deletes a single `ProgramOutputType` using its globally unique id."""
  deleteProgramOutputType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProgramOutputTypeInput!
  ): DeleteProgramOutputTypePayload

  """Deletes a single `ProgramOutputType` using a unique key."""
  deleteProgramOutputTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProgramOutputTypeByIdInput!
  ): DeleteProgramOutputTypePayload

  """Deletes a single `ProgrammingLanguage` using its globally unique id."""
  deleteProgrammingLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProgrammingLanguageInput!
  ): DeleteProgrammingLanguagePayload

  """Deletes a single `ProgrammingLanguage` using a unique key."""
  deleteProgrammingLanguageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProgrammingLanguageByIdInput!
  ): DeleteProgrammingLanguagePayload

  """Deletes a single `ProgrammingLanguage` using a unique key."""
  deleteProgrammingLanguageByNameAndVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProgrammingLanguageByNameAndVersionInput!
  ): DeleteProgrammingLanguagePayload

  """Deletes a single `ProgrammingLanguage` using a unique key."""
  deleteProgrammingLanguageByVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProgrammingLanguageByVersionInput!
  ): DeleteProgrammingLanguagePayload

  """Deletes a single `Solution` using its globally unique id."""
  deleteSolution(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSolutionInput!
  ): DeleteSolutionPayload

  """Deletes a single `Solution` using a unique key."""
  deleteSolutionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSolutionByIdInput!
  ): DeleteSolutionPayload

  """Deletes a single `SolutionRun` using its globally unique id."""
  deleteSolutionRun(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSolutionRunInput!
  ): DeleteSolutionRunPayload

  """Deletes a single `SolutionRun` using a unique key."""
  deleteSolutionRunById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSolutionRunByIdInput!
  ): DeleteSolutionRunPayload

  """Deletes a single `Tag` using its globally unique id."""
  deleteTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagInput!
  ): DeleteTagPayload

  """Deletes a single `Tag` using a unique key."""
  deleteTagById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagByIdInput!
  ): DeleteTagPayload

  """Deletes a single `Team` using its globally unique id."""
  deleteTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamInput!
  ): DeleteTeamPayload

  """Deletes a single `Team` using a unique key."""
  deleteTeamById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamByIdInput!
  ): DeleteTeamPayload

  """Deletes a single `TeamsToProfile` using its globally unique id."""
  deleteTeamsToProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamsToProfileInput!
  ): DeleteTeamsToProfilePayload

  """Deletes a single `TeamsToProfile` using a unique key."""
  deleteTeamsToProfileByTeamIdAndProfileId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamsToProfileByTeamIdAndProfileIdInput!
  ): DeleteTeamsToProfilePayload

  """Deletes a single `Test` using its globally unique id."""
  deleteTest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTestInput!
  ): DeleteTestPayload

  """Deletes a single `Test` using a unique key."""
  deleteTestById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTestByIdInput!
  ): DeleteTestPayload

  """Deletes a single `Travel` using its globally unique id."""
  deleteTravel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTravelInput!
  ): DeleteTravelPayload

  """Deletes a single `Travel` using a unique key."""
  deleteTravelById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTravelByIdInput!
  ): DeleteTravelPayload

  """Deletes a single `University` using its globally unique id."""
  deleteUniversity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUniversityInput!
  ): DeleteUniversityPayload

  """Deletes a single `University` using a unique key."""
  deleteUniversityById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUniversityByIdInput!
  ): DeleteUniversityPayload

  """Deletes a single `UserAuthentication` using its globally unique id."""
  deleteUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthenticationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationByIdInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthenticationByServiceAndIdentifier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationByServiceAndIdentifierInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserEmail` using its globally unique id."""
  deleteUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmailById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailByIdInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmailByUserIdAndEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailByUserIdAndEmailInput!
  ): DeleteUserEmailPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUsernameInput!
  ): DeleteUserPayload

  """
  Deletes a single `UserAuthenticationSecret` using its globally unique id.
  """
  deleteUserAuthenticationSecret(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationSecretInput!
  ): DeleteUserAuthenticationSecretPayload

  """Deletes a single `UserAuthenticationSecret` using a unique key."""
  deleteUserAuthenticationSecretByUserAuthenticationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationSecretByUserAuthenticationIdInput!
  ): DeleteUserAuthenticationSecretPayload

  """Deletes a single `UserEmailSecret` using its globally unique id."""
  deleteUserEmailSecret(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailSecretInput!
  ): DeleteUserEmailSecretPayload

  """Deletes a single `UserEmailSecret` using a unique key."""
  deleteUserEmailSecretByUserEmailId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailSecretByUserEmailIdInput!
  ): DeleteUserEmailSecretPayload

  """Deletes a single `UserSecret` using its globally unique id."""
  deleteUserSecret(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserSecretInput!
  ): DeleteUserSecretPayload

  """Deletes a single `UserSecret` using a unique key."""
  deleteUserSecretByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserSecretByUserIdInput!
  ): DeleteUserSecretPayload

  """
  If you've forgotten your password, give us one of your email addresses and we'
  send you a reset token. Note this only works if you have added an email address!
  """
  forgotPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ForgotPasswordInput!
  ): ForgotPasswordPayload

  """
  After triggering forgotPassword, you'll be sent a reset token. Combine this
  with your user ID and a new password to reset your password.
  """
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload

  """
  If you're logged in, this will link an additional OAuth login to your account
  if necessary. If you're logged out it may find if an account already exists
  (based on OAuth details or email address) and return that, or create a new
  user account if necessary.
  """
  linkOrRegisterUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LinkOrRegisterUserInput!
  ): LinkOrRegisterUserPayload

  """
  Returns a user that matches the username/password combo, or null on failure.
  """
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload

  """
  Creates a user account. All arguments are optional, it trusts the calling method to perform sanitisation.
  """
  reallyCreateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ReallyCreateUserInput!
  ): ReallyCreateUserPayload

  """
  Used to register a user from information gleaned from OAuth. Primarily used by link_or_register_user
  """
  registerUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterUserInput!
  ): RegisterUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""nOlympiad programming task"""
type Problem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!

  """Name of problem"""
  name: String!

  """Problem description"""
  description: String!

  """Description for input data"""
  inputDescription: String!

  """Description for output data"""
  outputDescription: String!

  """Addition note, mostly used be author and tester"""
  note: String

  """Type input of problem, aka stdin"""
  inputType: UUID

  """Type output of problem, aka stdout"""
  outputType: UUID

  """Time limit for problem. Units is milliseconds"""
  limitTime: Int!

  """Memory limit for problem. Units is bytes"""
  limitMemory: Int!

  """Define if this problem can be visible in current moment"""
  isOpen: Boolean

  """Date of problem creation"""
  createdAt: Datetime!

  """Date of last problem modification"""
  updatedAt: Datetime!

  """Date when problem must be open"""
  publishedAt: Datetime

  """Creator of problem"""
  author: UUID

  """Tester of problem"""
  tester: UUID

  """Reads a single `ProgramInputType` that is related to this `Problem`."""
  programInputType: ProgramInputType

  """Reads a single `ProgramOutputType` that is related to this `Problem`."""
  programOutputType: ProgramOutputType

  """Reads a single `Profile` that is related to this `Problem`."""
  author_profile: Profile

  """Reads a single `Profile` that is related to this `Problem`."""
  tester_profile: Profile

  """Reads and enables pagination through a set of `ProblemsToTag`."""
  problemsToTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProblemsToTag`."""
    orderBy: [ProblemsToTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProblemsToTagCondition
  ): ProblemsToTagsConnection!

  """Reads and enables pagination through a set of `Test`."""
  tests(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Test`."""
    orderBy: [TestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TestCondition
  ): TestsConnection!

  """Reads and enables pagination through a set of `Solution`."""
  solutions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Solution`."""
    orderBy: [SolutionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SolutionCondition
  ): SolutionsConnection!
}

"""
A condition to be used against `Problem` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProblemCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `inputDescription` field."""
  inputDescription: String

  """Checks for equality with the object’s `outputDescription` field."""
  outputDescription: String

  """Checks for equality with the object’s `note` field."""
  note: String

  """Checks for equality with the object’s `inputType` field."""
  inputType: UUID

  """Checks for equality with the object’s `outputType` field."""
  outputType: UUID

  """Checks for equality with the object’s `limitTime` field."""
  limitTime: Int

  """Checks for equality with the object’s `limitMemory` field."""
  limitMemory: Int

  """Checks for equality with the object’s `isOpen` field."""
  isOpen: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `publishedAt` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s `author` field."""
  author: UUID

  """Checks for equality with the object’s `tester` field."""
  tester: UUID
}

"""An input for mutations affecting `Problem`"""
input ProblemInput {
  id: UUID

  """Name of problem"""
  name: String!

  """Problem description"""
  description: String!

  """Description for input data"""
  inputDescription: String!

  """Description for output data"""
  outputDescription: String!

  """Addition note, mostly used be author and tester"""
  note: String

  """Type input of problem, aka stdin"""
  inputType: UUID

  """Type output of problem, aka stdout"""
  outputType: UUID

  """Time limit for problem. Units is milliseconds"""
  limitTime: Int!

  """Memory limit for problem. Units is bytes"""
  limitMemory: Int!

  """Define if this problem can be visible in current moment"""
  isOpen: Boolean

  """Date of problem creation"""
  createdAt: Datetime

  """Date of last problem modification"""
  updatedAt: Datetime

  """Date when problem must be open"""
  publishedAt: Datetime

  """Creator of problem"""
  author: UUID

  """Tester of problem"""
  tester: UUID
}

"""
Represents an update to a `Problem`. Fields that are set will be updated.
"""
input ProblemPatch {
  id: UUID

  """Name of problem"""
  name: String

  """Problem description"""
  description: String

  """Description for input data"""
  inputDescription: String

  """Description for output data"""
  outputDescription: String

  """Addition note, mostly used be author and tester"""
  note: String

  """Type input of problem, aka stdin"""
  inputType: UUID

  """Type output of problem, aka stdout"""
  outputType: UUID

  """Time limit for problem. Units is milliseconds"""
  limitTime: Int

  """Memory limit for problem. Units is bytes"""
  limitMemory: Int

  """Define if this problem can be visible in current moment"""
  isOpen: Boolean

  """Date of problem creation"""
  createdAt: Datetime

  """Date of last problem modification"""
  updatedAt: Datetime

  """Date when problem must be open"""
  publishedAt: Datetime

  """Creator of problem"""
  author: UUID

  """Tester of problem"""
  tester: UUID
}

"""A connection to a list of `Problem` values."""
type ProblemsConnection {
  """A list of `Problem` objects."""
  nodes: [Problem]!

  """
  A list of edges which contains the `Problem` and cursor to aid in pagination.
  """
  edges: [ProblemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Problem` you could get from the connection."""
  totalCount: Int
}

"""A `Problem` edge in the connection."""
type ProblemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Problem` at the end of the edge."""
  node: Problem
}

"""Methods to use when ordering `Problem`."""
enum ProblemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  INPUT_DESCRIPTION_ASC
  INPUT_DESCRIPTION_DESC
  OUTPUT_DESCRIPTION_ASC
  OUTPUT_DESCRIPTION_DESC
  NOTE_ASC
  NOTE_DESC
  INPUT_TYPE_ASC
  INPUT_TYPE_DESC
  OUTPUT_TYPE_ASC
  OUTPUT_TYPE_DESC
  LIMIT_TIME_ASC
  LIMIT_TIME_DESC
  LIMIT_MEMORY_ASC
  LIMIT_MEMORY_DESC
  IS_OPEN_ASC
  IS_OPEN_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  AUTHOR_ASC
  AUTHOR_DESC
  TESTER_ASC
  TESTER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ProblemsToTag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  problemId: UUID!
  tagId: UUID!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Problem` that is related to this `ProblemsToTag`."""
  problem: Problem

  """Reads a single `Tag` that is related to this `ProblemsToTag`."""
  tag: Tag
}

"""
A condition to be used against `ProblemsToTag` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProblemsToTagCondition {
  """Checks for equality with the object’s `problemId` field."""
  problemId: UUID

  """Checks for equality with the object’s `tagId` field."""
  tagId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `ProblemsToTag`"""
input ProblemsToTagInput {
  problemId: UUID!
  tagId: UUID!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `ProblemsToTag`. Fields that are set will be updated.
"""
input ProblemsToTagPatch {
  problemId: UUID
  tagId: UUID
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `ProblemsToTag` values."""
type ProblemsToTagsConnection {
  """A list of `ProblemsToTag` objects."""
  nodes: [ProblemsToTag]!

  """
  A list of edges which contains the `ProblemsToTag` and cursor to aid in pagination.
  """
  edges: [ProblemsToTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProblemsToTag` you could get from the connection."""
  totalCount: Int
}

"""A `ProblemsToTag` edge in the connection."""
type ProblemsToTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProblemsToTag` at the end of the edge."""
  node: ProblemsToTag
}

"""Methods to use when ordering `ProblemsToTag`."""
enum ProblemsToTagsOrderBy {
  NATURAL
  PROBLEM_ID_ASC
  PROBLEM_ID_DESC
  TAG_ID_ASC
  TAG_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Profile implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  userId: UUID
  firstName: String
  familyName: String
  lastName: String
  phone: String
  groupNumber: String
  course: Int
  cityId: UUID
  universityId: UUID
  isTeacher: Boolean
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `Profile`."""
  user: User

  """Reads a single `City` that is related to this `Profile`."""
  city: City

  """Reads a single `University` that is related to this `Profile`."""
  university: University

  """Reads and enables pagination through a set of `ProfilesToTravel`."""
  profilesToTravels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProfilesToTravel`."""
    orderBy: [ProfilesToTravelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfilesToTravelCondition
  ): ProfilesToTravelsConnection!

  """
  Reads and enables pagination through a set of `ProfilesToProgrammingLanguage`.
  """
  profilesToProgrammingLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProfilesToProgrammingLanguage`."""
    orderBy: [ProfilesToProgrammingLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfilesToProgrammingLanguageCondition
  ): ProfilesToProgrammingLanguagesConnection!

  """Reads and enables pagination through a set of `ProfilesToCodeEditor`."""
  profilesToCodeEditors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProfilesToCodeEditor`."""
    orderBy: [ProfilesToCodeEditorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfilesToCodeEditorCondition
  ): ProfilesToCodeEditorsConnection!

  """Reads and enables pagination through a set of `Problem`."""
  problems_author(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Problem`."""
    orderBy: [ProblemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProblemCondition
  ): ProblemsConnection!

  """Reads and enables pagination through a set of `Problem`."""
  problems_tester(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Problem`."""
    orderBy: [ProblemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProblemCondition
  ): ProblemsConnection!

  """Reads and enables pagination through a set of `TeamsToProfile`."""
  teamsToProfiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TeamsToProfile`."""
    orderBy: [TeamsToProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamsToProfileCondition
  ): TeamsToProfilesConnection!

  """Reads and enables pagination through a set of `ContestsToProfile`."""
  contestsToProfiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ContestsToProfile`."""
    orderBy: [ContestsToProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContestsToProfileCondition
  ): ContestsToProfilesConnection!
}

"""
A condition to be used against `Profile` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProfileCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `familyName` field."""
  familyName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `groupNumber` field."""
  groupNumber: String

  """Checks for equality with the object’s `course` field."""
  course: Int

  """Checks for equality with the object’s `cityId` field."""
  cityId: UUID

  """Checks for equality with the object’s `universityId` field."""
  universityId: UUID

  """Checks for equality with the object’s `isTeacher` field."""
  isTeacher: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Profile`"""
input ProfileInput {
  id: UUID
  userId: UUID
  firstName: String
  familyName: String
  lastName: String
  phone: String
  groupNumber: String
  course: Int
  cityId: UUID
  universityId: UUID
  isTeacher: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Profile`. Fields that are set will be updated.
"""
input ProfilePatch {
  id: UUID
  userId: UUID
  firstName: String
  familyName: String
  lastName: String
  phone: String
  groupNumber: String
  course: Int
  cityId: UUID
  universityId: UUID
  isTeacher: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `Profile` values."""
type ProfilesConnection {
  """A list of `Profile` objects."""
  nodes: [Profile]!

  """
  A list of edges which contains the `Profile` and cursor to aid in pagination.
  """
  edges: [ProfilesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Profile` you could get from the connection."""
  totalCount: Int
}

"""A `Profile` edge in the connection."""
type ProfilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Profile` at the end of the edge."""
  node: Profile
}

"""Methods to use when ordering `Profile`."""
enum ProfilesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  FAMILY_NAME_ASC
  FAMILY_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  PHONE_ASC
  PHONE_DESC
  GROUP_NUMBER_ASC
  GROUP_NUMBER_DESC
  COURSE_ASC
  COURSE_DESC
  CITY_ID_ASC
  CITY_ID_DESC
  UNIVERSITY_ID_ASC
  UNIVERSITY_ID_DESC
  IS_TEACHER_ASC
  IS_TEACHER_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ProfilesToCodeEditor implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  profileId: UUID!
  codeEditorId: UUID!
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Profile` that is related to this `ProfilesToCodeEditor`.
  """
  profile: Profile

  """
  Reads a single `CodeEditor` that is related to this `ProfilesToCodeEditor`.
  """
  codeEditor: CodeEditor
}

"""
A condition to be used against `ProfilesToCodeEditor` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ProfilesToCodeEditorCondition {
  """Checks for equality with the object’s `profileId` field."""
  profileId: UUID

  """Checks for equality with the object’s `codeEditorId` field."""
  codeEditorId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `ProfilesToCodeEditor`"""
input ProfilesToCodeEditorInput {
  profileId: UUID!
  codeEditorId: UUID!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `ProfilesToCodeEditor`. Fields that are set will be updated.
"""
input ProfilesToCodeEditorPatch {
  profileId: UUID
  codeEditorId: UUID
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `ProfilesToCodeEditor` values."""
type ProfilesToCodeEditorsConnection {
  """A list of `ProfilesToCodeEditor` objects."""
  nodes: [ProfilesToCodeEditor]!

  """
  A list of edges which contains the `ProfilesToCodeEditor` and cursor to aid in pagination.
  """
  edges: [ProfilesToCodeEditorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProfilesToCodeEditor` you could get from the connection.
  """
  totalCount: Int
}

"""A `ProfilesToCodeEditor` edge in the connection."""
type ProfilesToCodeEditorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProfilesToCodeEditor` at the end of the edge."""
  node: ProfilesToCodeEditor
}

"""Methods to use when ordering `ProfilesToCodeEditor`."""
enum ProfilesToCodeEditorsOrderBy {
  NATURAL
  PROFILE_ID_ASC
  PROFILE_ID_DESC
  CODE_EDITOR_ID_ASC
  CODE_EDITOR_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ProfilesToProgrammingLanguage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  profileId: UUID!
  languageId: UUID!
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Profile` that is related to this `ProfilesToProgrammingLanguage`.
  """
  profile: Profile

  """
  Reads a single `ProgrammingLanguage` that is related to this `ProfilesToProgrammingLanguage`.
  """
  language: ProgrammingLanguage
}

"""
A condition to be used against `ProfilesToProgrammingLanguage` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ProfilesToProgrammingLanguageCondition {
  """Checks for equality with the object’s `profileId` field."""
  profileId: UUID

  """Checks for equality with the object’s `languageId` field."""
  languageId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `ProfilesToProgrammingLanguage`"""
input ProfilesToProgrammingLanguageInput {
  profileId: UUID!
  languageId: UUID!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `ProfilesToProgrammingLanguage`. Fields that are set will be updated.
"""
input ProfilesToProgrammingLanguagePatch {
  profileId: UUID
  languageId: UUID
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `ProfilesToProgrammingLanguage` values."""
type ProfilesToProgrammingLanguagesConnection {
  """A list of `ProfilesToProgrammingLanguage` objects."""
  nodes: [ProfilesToProgrammingLanguage]!

  """
  A list of edges which contains the `ProfilesToProgrammingLanguage` and cursor to aid in pagination.
  """
  edges: [ProfilesToProgrammingLanguagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProfilesToProgrammingLanguage` you could get from the connection.
  """
  totalCount: Int
}

"""A `ProfilesToProgrammingLanguage` edge in the connection."""
type ProfilesToProgrammingLanguagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProfilesToProgrammingLanguage` at the end of the edge."""
  node: ProfilesToProgrammingLanguage
}

"""Methods to use when ordering `ProfilesToProgrammingLanguage`."""
enum ProfilesToProgrammingLanguagesOrderBy {
  NATURAL
  PROFILE_ID_ASC
  PROFILE_ID_DESC
  LANGUAGE_ID_ASC
  LANGUAGE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ProfilesToTravel implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  profileId: UUID!
  travelId: UUID!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Profile` that is related to this `ProfilesToTravel`."""
  profile: Profile

  """Reads a single `Travel` that is related to this `ProfilesToTravel`."""
  travel: Travel
}

"""
A condition to be used against `ProfilesToTravel` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProfilesToTravelCondition {
  """Checks for equality with the object’s `profileId` field."""
  profileId: UUID

  """Checks for equality with the object’s `travelId` field."""
  travelId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `ProfilesToTravel`"""
input ProfilesToTravelInput {
  profileId: UUID!
  travelId: UUID!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `ProfilesToTravel`. Fields that are set will be updated.
"""
input ProfilesToTravelPatch {
  profileId: UUID
  travelId: UUID
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `ProfilesToTravel` values."""
type ProfilesToTravelsConnection {
  """A list of `ProfilesToTravel` objects."""
  nodes: [ProfilesToTravel]!

  """
  A list of edges which contains the `ProfilesToTravel` and cursor to aid in pagination.
  """
  edges: [ProfilesToTravelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProfilesToTravel` you could get from the connection.
  """
  totalCount: Int
}

"""A `ProfilesToTravel` edge in the connection."""
type ProfilesToTravelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProfilesToTravel` at the end of the edge."""
  node: ProfilesToTravel
}

"""Methods to use when ordering `ProfilesToTravel`."""
enum ProfilesToTravelsOrderBy {
  NATURAL
  PROFILE_ID_ASC
  PROFILE_ID_DESC
  TRAVEL_ID_ASC
  TRAVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ProgramInputType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `Problem`."""
  problems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Problem`."""
    orderBy: [ProblemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProblemCondition
  ): ProblemsConnection!
}

"""
A condition to be used against `ProgramInputType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProgramInputTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `ProgramInputType`"""
input ProgramInputTypeInput {
  id: UUID
  name: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `ProgramInputType`. Fields that are set will be updated.
"""
input ProgramInputTypePatch {
  id: UUID
  name: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `ProgramInputType` values."""
type ProgramInputTypesConnection {
  """A list of `ProgramInputType` objects."""
  nodes: [ProgramInputType]!

  """
  A list of edges which contains the `ProgramInputType` and cursor to aid in pagination.
  """
  edges: [ProgramInputTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProgramInputType` you could get from the connection.
  """
  totalCount: Int
}

"""A `ProgramInputType` edge in the connection."""
type ProgramInputTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProgramInputType` at the end of the edge."""
  node: ProgramInputType
}

"""Methods to use when ordering `ProgramInputType`."""
enum ProgramInputTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Programming language, each row define one version of some language"""
type ProgrammingLanguage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!

  """
  Name of language. Use official name, like C++, Go, JavaScript, but not cpp, Golang, ES
  """
  name: String!

  """
  Alias for language. Mostly used as search keyword, like Golang, or define explicitly version of language, like ECMAScript
  """
  alias: String

  """
  Version of language. Version is used for compiler or interpreter. Also can have definition of used extensions and presets
  """
  version: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads and enables pagination through a set of `ProfilesToProgrammingLanguage`.
  """
  profilesToProgrammingLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProfilesToProgrammingLanguage`."""
    orderBy: [ProfilesToProgrammingLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfilesToProgrammingLanguageCondition
  ): ProfilesToProgrammingLanguagesConnection!

  """Reads and enables pagination through a set of `Compiler`."""
  compilers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Compiler`."""
    orderBy: [CompilersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompilerCondition
  ): CompilersConnection!
}

"""
A condition to be used against `ProgrammingLanguage` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ProgrammingLanguageCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `alias` field."""
  alias: String

  """Checks for equality with the object’s `version` field."""
  version: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `ProgrammingLanguage`"""
input ProgrammingLanguageInput {
  id: UUID

  """
  Name of language. Use official name, like C++, Go, JavaScript, but not cpp, Golang, ES
  """
  name: String!

  """
  Alias for language. Mostly used as search keyword, like Golang, or define explicitly version of language, like ECMAScript
  """
  alias: String

  """
  Version of language. Version is used for compiler or interpreter. Also can have definition of used extensions and presets
  """
  version: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `ProgrammingLanguage`. Fields that are set will be updated.
"""
input ProgrammingLanguagePatch {
  id: UUID

  """
  Name of language. Use official name, like C++, Go, JavaScript, but not cpp, Golang, ES
  """
  name: String

  """
  Alias for language. Mostly used as search keyword, like Golang, or define explicitly version of language, like ECMAScript
  """
  alias: String

  """
  Version of language. Version is used for compiler or interpreter. Also can have definition of used extensions and presets
  """
  version: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `ProgrammingLanguage` values."""
type ProgrammingLanguagesConnection {
  """A list of `ProgrammingLanguage` objects."""
  nodes: [ProgrammingLanguage]!

  """
  A list of edges which contains the `ProgrammingLanguage` and cursor to aid in pagination.
  """
  edges: [ProgrammingLanguagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProgrammingLanguage` you could get from the connection.
  """
  totalCount: Int
}

"""A `ProgrammingLanguage` edge in the connection."""
type ProgrammingLanguagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProgrammingLanguage` at the end of the edge."""
  node: ProgrammingLanguage
}

"""Methods to use when ordering `ProgrammingLanguage`."""
enum ProgrammingLanguagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  ALIAS_ASC
  ALIAS_DESC
  VERSION_ASC
  VERSION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ProgramOutputType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `Problem`."""
  problems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Problem`."""
    orderBy: [ProblemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProblemCondition
  ): ProblemsConnection!
}

"""
A condition to be used against `ProgramOutputType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProgramOutputTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `ProgramOutputType`"""
input ProgramOutputTypeInput {
  id: UUID
  name: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `ProgramOutputType`. Fields that are set will be updated.
"""
input ProgramOutputTypePatch {
  id: UUID
  name: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `ProgramOutputType` values."""
type ProgramOutputTypesConnection {
  """A list of `ProgramOutputType` objects."""
  nodes: [ProgramOutputType]!

  """
  A list of edges which contains the `ProgramOutputType` and cursor to aid in pagination.
  """
  edges: [ProgramOutputTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProgramOutputType` you could get from the connection.
  """
  totalCount: Int
}

"""A `ProgramOutputType` edge in the connection."""
type ProgramOutputTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProgramOutputType` at the end of the edge."""
  node: ProgramOutputType
}

"""Methods to use when ordering `ProgramOutputType`."""
enum ProgramOutputTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `City`."""
  allCities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `City`."""
    orderBy: [CitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CityCondition
  ): CitiesConnection

  """Reads and enables pagination through a set of `CodeEditor`."""
  allCodeEditors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CodeEditor`."""
    orderBy: [CodeEditorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CodeEditorCondition
  ): CodeEditorsConnection

  """Reads and enables pagination through a set of `Compiler`."""
  allCompilers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Compiler`."""
    orderBy: [CompilersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompilerCondition
  ): CompilersConnection

  """Reads and enables pagination through a set of `Contest`."""
  allContests(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Contest`."""
    orderBy: [ContestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContestCondition
  ): ContestsConnection

  """Reads and enables pagination through a set of `ContestsToProfile`."""
  allContestsToProfiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ContestsToProfile`."""
    orderBy: [ContestsToProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContestsToProfileCondition
  ): ContestsToProfilesConnection

  """Reads and enables pagination through a set of `ContestsToTeam`."""
  allContestsToTeams(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ContestsToTeam`."""
    orderBy: [ContestsToTeamsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContestsToTeamCondition
  ): ContestsToTeamsConnection

  """Reads and enables pagination through a set of `Country`."""
  allCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Country`."""
    orderBy: [CountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CountryCondition
  ): CountriesConnection

  """Reads and enables pagination through a set of `FailType`."""
  allFailTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FailType`."""
    orderBy: [FailTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FailTypeCondition
  ): FailTypesConnection

  """Reads and enables pagination through a set of `Language`."""
  allLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition
  ): LanguagesConnection

  """Reads and enables pagination through a set of `Problem`."""
  allProblems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Problem`."""
    orderBy: [ProblemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProblemCondition
  ): ProblemsConnection

  """Reads and enables pagination through a set of `ProblemsToTag`."""
  allProblemsToTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProblemsToTag`."""
    orderBy: [ProblemsToTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProblemsToTagCondition
  ): ProblemsToTagsConnection

  """Reads and enables pagination through a set of `Profile`."""
  allProfiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfileCondition
  ): ProfilesConnection

  """Reads and enables pagination through a set of `ProfilesToCodeEditor`."""
  allProfilesToCodeEditors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProfilesToCodeEditor`."""
    orderBy: [ProfilesToCodeEditorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfilesToCodeEditorCondition
  ): ProfilesToCodeEditorsConnection

  """
  Reads and enables pagination through a set of `ProfilesToProgrammingLanguage`.
  """
  allProfilesToProgrammingLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProfilesToProgrammingLanguage`."""
    orderBy: [ProfilesToProgrammingLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfilesToProgrammingLanguageCondition
  ): ProfilesToProgrammingLanguagesConnection

  """Reads and enables pagination through a set of `ProfilesToTravel`."""
  allProfilesToTravels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProfilesToTravel`."""
    orderBy: [ProfilesToTravelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfilesToTravelCondition
  ): ProfilesToTravelsConnection

  """Reads and enables pagination through a set of `ProgramInputType`."""
  allProgramInputTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProgramInputType`."""
    orderBy: [ProgramInputTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProgramInputTypeCondition
  ): ProgramInputTypesConnection

  """Reads and enables pagination through a set of `ProgramOutputType`."""
  allProgramOutputTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProgramOutputType`."""
    orderBy: [ProgramOutputTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProgramOutputTypeCondition
  ): ProgramOutputTypesConnection

  """Reads and enables pagination through a set of `ProgrammingLanguage`."""
  allProgrammingLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProgrammingLanguage`."""
    orderBy: [ProgrammingLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProgrammingLanguageCondition
  ): ProgrammingLanguagesConnection

  """Reads and enables pagination through a set of `Solution`."""
  allSolutions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Solution`."""
    orderBy: [SolutionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SolutionCondition
  ): SolutionsConnection

  """Reads and enables pagination through a set of `SolutionRun`."""
  allSolutionRuns(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SolutionRun`."""
    orderBy: [SolutionRunsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SolutionRunCondition
  ): SolutionRunsConnection

  """Reads and enables pagination through a set of `Tag`."""
  allTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition
  ): TagsConnection

  """Reads and enables pagination through a set of `Team`."""
  allTeams(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamCondition
  ): TeamsConnection

  """Reads and enables pagination through a set of `TeamsToProfile`."""
  allTeamsToProfiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TeamsToProfile`."""
    orderBy: [TeamsToProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamsToProfileCondition
  ): TeamsToProfilesConnection

  """Reads and enables pagination through a set of `Test`."""
  allTests(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Test`."""
    orderBy: [TestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TestCondition
  ): TestsConnection

  """Reads and enables pagination through a set of `Travel`."""
  allTravels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Travel`."""
    orderBy: [TravelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TravelCondition
  ): TravelsConnection

  """Reads and enables pagination through a set of `University`."""
  allUniversities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `University`."""
    orderBy: [UniversitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UniversityCondition
  ): UniversitiesConnection

  """
  Reads and enables pagination through a set of `UserAuthenticationSecret`.
  """
  allUserAuthenticationSecrets(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserAuthenticationSecret`."""
    orderBy: [UserAuthenticationSecretsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationSecretCondition
  ): UserAuthenticationSecretsConnection

  """Reads and enables pagination through a set of `UserEmailSecret`."""
  allUserEmailSecrets(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserEmailSecret`."""
    orderBy: [UserEmailSecretsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailSecretCondition
  ): UserEmailSecretsConnection

  """Reads and enables pagination through a set of `UserSecret`."""
  allUserSecrets(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserSecret`."""
    orderBy: [UserSecretsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserSecretCondition
  ): UserSecretsConnection
  cityById(id: UUID!): City
  codeEditorById(id: UUID!): CodeEditor
  codeEditorByNameAndVersion(name: String!, version: String!): CodeEditor
  codeEditorByVersion(version: String!): CodeEditor
  compilerById(id: UUID!): Compiler
  compilerByNameAndVersion(name: String!, version: String!): Compiler
  compilerByVersion(version: String!): Compiler
  contestById(id: UUID!): Contest
  contestsToProfileByContestIdAndProfileId(contestId: UUID!, profileId: UUID!): ContestsToProfile
  contestsToTeamByContestIdAndTeamId(contestId: UUID!, teamId: UUID!): ContestsToTeam
  countryById(id: UUID!): Country
  failTypeById(id: UUID!): FailType
  languageById(id: UUID!): Language
  problemById(id: UUID!): Problem
  problemsToTagByProblemIdAndTagId(problemId: UUID!, tagId: UUID!): ProblemsToTag
  profileById(id: UUID!): Profile
  profilesToCodeEditorByProfileIdAndCodeEditorId(profileId: UUID!, codeEditorId: UUID!): ProfilesToCodeEditor
  profilesToProgrammingLanguageByProfileIdAndLanguageId(profileId: UUID!, languageId: UUID!): ProfilesToProgrammingLanguage
  profilesToTravelByProfileIdAndTravelId(profileId: UUID!, travelId: UUID!): ProfilesToTravel
  programInputTypeById(id: UUID!): ProgramInputType
  programOutputTypeById(id: UUID!): ProgramOutputType
  programmingLanguageById(id: UUID!): ProgrammingLanguage
  programmingLanguageByNameAndVersion(name: String!, version: String!): ProgrammingLanguage
  programmingLanguageByVersion(version: String!): ProgrammingLanguage
  solutionById(id: UUID!): Solution
  solutionRunById(id: UUID!): SolutionRun
  tagById(id: UUID!): Tag
  teamById(id: UUID!): Team
  teamsToProfileByTeamIdAndProfileId(teamId: UUID!, profileId: UUID!): TeamsToProfile
  testById(id: UUID!): Test
  travelById(id: UUID!): Travel
  universityById(id: UUID!): University
  userAuthenticationById(id: UUID!): UserAuthentication
  userAuthenticationByServiceAndIdentifier(service: String!, identifier: String!): UserAuthentication
  userEmailById(id: UUID!): UserEmail
  userEmailByUserIdAndEmail(userId: UUID!, email: String!): UserEmail
  userById(id: UUID!): User
  userByUsername(username: String!): User
  userAuthenticationSecretByUserAuthenticationId(userAuthenticationId: UUID!): UserAuthenticationSecret
  userEmailSecretByUserEmailId(userEmailId: UUID!): UserEmailSecret
  userSecretByUserId(userId: UUID!): UserSecret
  currentUser: User
  currentUserCanSendSolution(problemId: UUID): Boolean

  """Reads and enables pagination through a set of `Country`."""
  searchCountries(
    search: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): CountriesConnection!

  """Reads a single `City` using its globally unique `ID`."""
  city(
    """The globally unique `ID` to be used in selecting a single `City`."""
    nodeId: ID!
  ): City

  """Reads a single `CodeEditor` using its globally unique `ID`."""
  codeEditor(
    """
    The globally unique `ID` to be used in selecting a single `CodeEditor`.
    """
    nodeId: ID!
  ): CodeEditor

  """Reads a single `Compiler` using its globally unique `ID`."""
  compiler(
    """The globally unique `ID` to be used in selecting a single `Compiler`."""
    nodeId: ID!
  ): Compiler

  """Reads a single `Contest` using its globally unique `ID`."""
  contest(
    """The globally unique `ID` to be used in selecting a single `Contest`."""
    nodeId: ID!
  ): Contest

  """Reads a single `ContestsToProfile` using its globally unique `ID`."""
  contestsToProfile(
    """
    The globally unique `ID` to be used in selecting a single `ContestsToProfile`.
    """
    nodeId: ID!
  ): ContestsToProfile

  """Reads a single `ContestsToTeam` using its globally unique `ID`."""
  contestsToTeam(
    """
    The globally unique `ID` to be used in selecting a single `ContestsToTeam`.
    """
    nodeId: ID!
  ): ContestsToTeam

  """Reads a single `Country` using its globally unique `ID`."""
  country(
    """The globally unique `ID` to be used in selecting a single `Country`."""
    nodeId: ID!
  ): Country

  """Reads a single `FailType` using its globally unique `ID`."""
  failType(
    """The globally unique `ID` to be used in selecting a single `FailType`."""
    nodeId: ID!
  ): FailType

  """Reads a single `Language` using its globally unique `ID`."""
  language(
    """The globally unique `ID` to be used in selecting a single `Language`."""
    nodeId: ID!
  ): Language

  """Reads a single `Problem` using its globally unique `ID`."""
  problem(
    """The globally unique `ID` to be used in selecting a single `Problem`."""
    nodeId: ID!
  ): Problem

  """Reads a single `ProblemsToTag` using its globally unique `ID`."""
  problemsToTag(
    """
    The globally unique `ID` to be used in selecting a single `ProblemsToTag`.
    """
    nodeId: ID!
  ): ProblemsToTag

  """Reads a single `Profile` using its globally unique `ID`."""
  profile(
    """The globally unique `ID` to be used in selecting a single `Profile`."""
    nodeId: ID!
  ): Profile

  """Reads a single `ProfilesToCodeEditor` using its globally unique `ID`."""
  profilesToCodeEditor(
    """
    The globally unique `ID` to be used in selecting a single `ProfilesToCodeEditor`.
    """
    nodeId: ID!
  ): ProfilesToCodeEditor

  """
  Reads a single `ProfilesToProgrammingLanguage` using its globally unique `ID`.
  """
  profilesToProgrammingLanguage(
    """
    The globally unique `ID` to be used in selecting a single `ProfilesToProgrammingLanguage`.
    """
    nodeId: ID!
  ): ProfilesToProgrammingLanguage

  """Reads a single `ProfilesToTravel` using its globally unique `ID`."""
  profilesToTravel(
    """
    The globally unique `ID` to be used in selecting a single `ProfilesToTravel`.
    """
    nodeId: ID!
  ): ProfilesToTravel

  """Reads a single `ProgramInputType` using its globally unique `ID`."""
  programInputType(
    """
    The globally unique `ID` to be used in selecting a single `ProgramInputType`.
    """
    nodeId: ID!
  ): ProgramInputType

  """Reads a single `ProgramOutputType` using its globally unique `ID`."""
  programOutputType(
    """
    The globally unique `ID` to be used in selecting a single `ProgramOutputType`.
    """
    nodeId: ID!
  ): ProgramOutputType

  """Reads a single `ProgrammingLanguage` using its globally unique `ID`."""
  programmingLanguage(
    """
    The globally unique `ID` to be used in selecting a single `ProgrammingLanguage`.
    """
    nodeId: ID!
  ): ProgrammingLanguage

  """Reads a single `Solution` using its globally unique `ID`."""
  solution(
    """The globally unique `ID` to be used in selecting a single `Solution`."""
    nodeId: ID!
  ): Solution

  """Reads a single `SolutionRun` using its globally unique `ID`."""
  solutionRun(
    """
    The globally unique `ID` to be used in selecting a single `SolutionRun`.
    """
    nodeId: ID!
  ): SolutionRun

  """Reads a single `Tag` using its globally unique `ID`."""
  tag(
    """The globally unique `ID` to be used in selecting a single `Tag`."""
    nodeId: ID!
  ): Tag

  """Reads a single `Team` using its globally unique `ID`."""
  team(
    """The globally unique `ID` to be used in selecting a single `Team`."""
    nodeId: ID!
  ): Team

  """Reads a single `TeamsToProfile` using its globally unique `ID`."""
  teamsToProfile(
    """
    The globally unique `ID` to be used in selecting a single `TeamsToProfile`.
    """
    nodeId: ID!
  ): TeamsToProfile

  """Reads a single `Test` using its globally unique `ID`."""
  test(
    """The globally unique `ID` to be used in selecting a single `Test`."""
    nodeId: ID!
  ): Test

  """Reads a single `Travel` using its globally unique `ID`."""
  travel(
    """The globally unique `ID` to be used in selecting a single `Travel`."""
    nodeId: ID!
  ): Travel

  """Reads a single `University` using its globally unique `ID`."""
  university(
    """
    The globally unique `ID` to be used in selecting a single `University`.
    """
    nodeId: ID!
  ): University

  """Reads a single `UserAuthentication` using its globally unique `ID`."""
  userAuthentication(
    """
    The globally unique `ID` to be used in selecting a single `UserAuthentication`.
    """
    nodeId: ID!
  ): UserAuthentication

  """Reads a single `UserEmail` using its globally unique `ID`."""
  userEmail(
    """The globally unique `ID` to be used in selecting a single `UserEmail`."""
    nodeId: ID!
  ): UserEmail

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """
  Reads a single `UserAuthenticationSecret` using its globally unique `ID`.
  """
  userAuthenticationSecret(
    """
    The globally unique `ID` to be used in selecting a single `UserAuthenticationSecret`.
    """
    nodeId: ID!
  ): UserAuthenticationSecret

  """Reads a single `UserEmailSecret` using its globally unique `ID`."""
  userEmailSecret(
    """
    The globally unique `ID` to be used in selecting a single `UserEmailSecret`.
    """
    nodeId: ID!
  ): UserEmailSecret

  """Reads a single `UserSecret` using its globally unique `ID`."""
  userSecret(
    """
    The globally unique `ID` to be used in selecting a single `UserSecret`.
    """
    nodeId: ID!
  ): UserSecret
}

"""All input for the `reallyCreateUser` mutation."""
input ReallyCreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String
  email: String
  emailIsVerified: Boolean
  name: String
  avatarUrl: String
  password: String
  isAdmin: Boolean
}

"""The output of our `reallyCreateUser` mutation."""
type ReallyCreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

"""All input for the `registerUser` mutation."""
input RegisterUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  fService: String
  fIdentifier: String
  fProfile: JSON
  fAuthDetails: JSON
  fEmailIsVerified: Boolean
}

"""The output of our `registerUser` mutation."""
type RegisterUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: UUID!
  resetToken: String!
  newPassword: String!
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

type Solution implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  code: String!
  problemId: UUID!
  compilerId: UUID!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Problem` that is related to this `Solution`."""
  problem: Problem

  """Reads a single `Compiler` that is related to this `Solution`."""
  compiler: Compiler

  """Reads and enables pagination through a set of `SolutionRun`."""
  solutionRuns(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SolutionRun`."""
    orderBy: [SolutionRunsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SolutionRunCondition
  ): SolutionRunsConnection!
}

"""
A condition to be used against `Solution` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SolutionCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `problemId` field."""
  problemId: UUID

  """Checks for equality with the object’s `compilerId` field."""
  compilerId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Solution`"""
input SolutionInput {
  id: UUID
  code: String!
  problemId: UUID!
  compilerId: UUID!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Solution`. Fields that are set will be updated.
"""
input SolutionPatch {
  id: UUID
  code: String
  problemId: UUID
  compilerId: UUID
  createdAt: Datetime
  updatedAt: Datetime
}

type SolutionRun implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  solutionId: UUID!
  failedTestId: UUID
  outputOfFailedTest: String
  isAllTestsSuccessful: Boolean
  timeOfFailedRun: Date
  typeOfFail: UUID
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Solution` that is related to this `SolutionRun`."""
  solution: Solution

  """Reads a single `Test` that is related to this `SolutionRun`."""
  failedTest: Test

  """Reads a single `FailType` that is related to this `SolutionRun`."""
  failType: FailType
}

"""
A condition to be used against `SolutionRun` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SolutionRunCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `solutionId` field."""
  solutionId: UUID

  """Checks for equality with the object’s `failedTestId` field."""
  failedTestId: UUID

  """Checks for equality with the object’s `outputOfFailedTest` field."""
  outputOfFailedTest: String

  """Checks for equality with the object’s `isAllTestsSuccessful` field."""
  isAllTestsSuccessful: Boolean

  """Checks for equality with the object’s `timeOfFailedRun` field."""
  timeOfFailedRun: Date

  """Checks for equality with the object’s `typeOfFail` field."""
  typeOfFail: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `SolutionRun`"""
input SolutionRunInput {
  id: UUID
  solutionId: UUID!
  failedTestId: UUID
  outputOfFailedTest: String
  isAllTestsSuccessful: Boolean
  timeOfFailedRun: Date
  typeOfFail: UUID
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `SolutionRun`. Fields that are set will be updated.
"""
input SolutionRunPatch {
  id: UUID
  solutionId: UUID
  failedTestId: UUID
  outputOfFailedTest: String
  isAllTestsSuccessful: Boolean
  timeOfFailedRun: Date
  typeOfFail: UUID
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `SolutionRun` values."""
type SolutionRunsConnection {
  """A list of `SolutionRun` objects."""
  nodes: [SolutionRun]!

  """
  A list of edges which contains the `SolutionRun` and cursor to aid in pagination.
  """
  edges: [SolutionRunsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SolutionRun` you could get from the connection."""
  totalCount: Int
}

"""A `SolutionRun` edge in the connection."""
type SolutionRunsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SolutionRun` at the end of the edge."""
  node: SolutionRun
}

"""Methods to use when ordering `SolutionRun`."""
enum SolutionRunsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SOLUTION_ID_ASC
  SOLUTION_ID_DESC
  FAILED_TEST_ID_ASC
  FAILED_TEST_ID_DESC
  OUTPUT_OF_FAILED_TEST_ASC
  OUTPUT_OF_FAILED_TEST_DESC
  IS_ALL_TESTS_SUCCESSFUL_ASC
  IS_ALL_TESTS_SUCCESSFUL_DESC
  TIME_OF_FAILED_RUN_ASC
  TIME_OF_FAILED_RUN_DESC
  TYPE_OF_FAIL_ASC
  TYPE_OF_FAIL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Solution` values."""
type SolutionsConnection {
  """A list of `Solution` objects."""
  nodes: [Solution]!

  """
  A list of edges which contains the `Solution` and cursor to aid in pagination.
  """
  edges: [SolutionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Solution` you could get from the connection."""
  totalCount: Int
}

"""A `Solution` edge in the connection."""
type SolutionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Solution` at the end of the edge."""
  node: Solution
}

"""Methods to use when ordering `Solution`."""
enum SolutionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CODE_ASC
  CODE_DESC
  PROBLEM_ID_ASC
  PROBLEM_ID_DESC
  COMPILER_ID_ASC
  COMPILER_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Tag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `ProblemsToTag`."""
  problemsToTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProblemsToTag`."""
    orderBy: [ProblemsToTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProblemsToTagCondition
  ): ProblemsToTagsConnection!
}

"""
A condition to be used against `Tag` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TagCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Tag`"""
input TagInput {
  id: UUID
  name: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""Represents an update to a `Tag`. Fields that are set will be updated."""
input TagPatch {
  id: UUID
  name: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `Tag` values."""
type TagsConnection {
  """A list of `Tag` objects."""
  nodes: [Tag]!

  """
  A list of edges which contains the `Tag` and cursor to aid in pagination.
  """
  edges: [TagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tag` you could get from the connection."""
  totalCount: Int
}

"""A `Tag` edge in the connection."""
type TagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tag` at the end of the edge."""
  node: Tag
}

"""Methods to use when ordering `Tag`."""
enum TagsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Team implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `TeamsToProfile`."""
  teamsToProfiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TeamsToProfile`."""
    orderBy: [TeamsToProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamsToProfileCondition
  ): TeamsToProfilesConnection!

  """Reads and enables pagination through a set of `ContestsToTeam`."""
  contestsToTeams(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ContestsToTeam`."""
    orderBy: [ContestsToTeamsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContestsToTeamCondition
  ): ContestsToTeamsConnection!
}

"""
A condition to be used against `Team` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TeamCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Team`"""
input TeamInput {
  id: UUID
  name: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""Represents an update to a `Team`. Fields that are set will be updated."""
input TeamPatch {
  id: UUID
  name: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `Team` values."""
type TeamsConnection {
  """A list of `Team` objects."""
  nodes: [Team]!

  """
  A list of edges which contains the `Team` and cursor to aid in pagination.
  """
  edges: [TeamsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Team` you could get from the connection."""
  totalCount: Int
}

"""A `Team` edge in the connection."""
type TeamsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Team` at the end of the edge."""
  node: Team
}

"""Methods to use when ordering `Team`."""
enum TeamsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type TeamsToProfile implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  teamId: UUID!
  profileId: UUID!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Team` that is related to this `TeamsToProfile`."""
  team: Team

  """Reads a single `Profile` that is related to this `TeamsToProfile`."""
  profile: Profile
}

"""
A condition to be used against `TeamsToProfile` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TeamsToProfileCondition {
  """Checks for equality with the object’s `teamId` field."""
  teamId: UUID

  """Checks for equality with the object’s `profileId` field."""
  profileId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `TeamsToProfile`"""
input TeamsToProfileInput {
  teamId: UUID!
  profileId: UUID!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `TeamsToProfile`. Fields that are set will be updated.
"""
input TeamsToProfilePatch {
  teamId: UUID
  profileId: UUID
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `TeamsToProfile` values."""
type TeamsToProfilesConnection {
  """A list of `TeamsToProfile` objects."""
  nodes: [TeamsToProfile]!

  """
  A list of edges which contains the `TeamsToProfile` and cursor to aid in pagination.
  """
  edges: [TeamsToProfilesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TeamsToProfile` you could get from the connection."""
  totalCount: Int
}

"""A `TeamsToProfile` edge in the connection."""
type TeamsToProfilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TeamsToProfile` at the end of the edge."""
  node: TeamsToProfile
}

"""Methods to use when ordering `TeamsToProfile`."""
enum TeamsToProfilesOrderBy {
  NATURAL
  TEAM_ID_ASC
  TEAM_ID_DESC
  PROFILE_ID_ASC
  PROFILE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Test implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  index: Int!
  input: String!
  output: String!
  public: Boolean
  problemId: UUID
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Problem` that is related to this `Test`."""
  problem: Problem

  """Reads and enables pagination through a set of `SolutionRun`."""
  solutionRuns(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SolutionRun`."""
    orderBy: [SolutionRunsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SolutionRunCondition
  ): SolutionRunsConnection!
}

"""
A condition to be used against `Test` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TestCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `index` field."""
  index: Int

  """Checks for equality with the object’s `input` field."""
  input: String

  """Checks for equality with the object’s `output` field."""
  output: String

  """Checks for equality with the object’s `public` field."""
  public: Boolean

  """Checks for equality with the object’s `problemId` field."""
  problemId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Test`"""
input TestInput {
  id: UUID
  index: Int!
  input: String!
  output: String!
  public: Boolean
  problemId: UUID
  createdAt: Datetime
  updatedAt: Datetime
}

"""Represents an update to a `Test`. Fields that are set will be updated."""
input TestPatch {
  id: UUID
  index: Int
  input: String
  output: String
  public: Boolean
  problemId: UUID
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `Test` values."""
type TestsConnection {
  """A list of `Test` objects."""
  nodes: [Test]!

  """
  A list of edges which contains the `Test` and cursor to aid in pagination.
  """
  edges: [TestsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Test` you could get from the connection."""
  totalCount: Int
}

"""A `Test` edge in the connection."""
type TestsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Test` at the end of the edge."""
  node: Test
}

"""Methods to use when ordering `Test`."""
enum TestsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  INDEX_ASC
  INDEX_DESC
  INPUT_ASC
  INPUT_DESC
  OUTPUT_ASC
  OUTPUT_DESC
  PUBLIC_ASC
  PUBLIC_DESC
  PROBLEM_ID_ASC
  PROBLEM_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Travel implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  arrivalTime: Datetime
  arrivalPlace: String
  departureTime: Datetime
  departurePlace: Datetime
  isNeedHousing: Boolean!
  commentary: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `ProfilesToTravel`."""
  profilesToTravels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProfilesToTravel`."""
    orderBy: [ProfilesToTravelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfilesToTravelCondition
  ): ProfilesToTravelsConnection!
}

"""
A condition to be used against `Travel` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TravelCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `arrivalTime` field."""
  arrivalTime: Datetime

  """Checks for equality with the object’s `arrivalPlace` field."""
  arrivalPlace: String

  """Checks for equality with the object’s `departureTime` field."""
  departureTime: Datetime

  """Checks for equality with the object’s `departurePlace` field."""
  departurePlace: Datetime

  """Checks for equality with the object’s `isNeedHousing` field."""
  isNeedHousing: Boolean

  """Checks for equality with the object’s `commentary` field."""
  commentary: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Travel`"""
input TravelInput {
  id: UUID
  arrivalTime: Datetime
  arrivalPlace: String
  departureTime: Datetime
  departurePlace: Datetime
  isNeedHousing: Boolean
  commentary: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Travel`. Fields that are set will be updated.
"""
input TravelPatch {
  id: UUID
  arrivalTime: Datetime
  arrivalPlace: String
  departureTime: Datetime
  departurePlace: Datetime
  isNeedHousing: Boolean
  commentary: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `Travel` values."""
type TravelsConnection {
  """A list of `Travel` objects."""
  nodes: [Travel]!

  """
  A list of edges which contains the `Travel` and cursor to aid in pagination.
  """
  edges: [TravelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Travel` you could get from the connection."""
  totalCount: Int
}

"""A `Travel` edge in the connection."""
type TravelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Travel` at the end of the edge."""
  node: Travel
}

"""Methods to use when ordering `Travel`."""
enum TravelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ARRIVAL_TIME_ASC
  ARRIVAL_TIME_DESC
  ARRIVAL_PLACE_ASC
  ARRIVAL_PLACE_DESC
  DEPARTURE_TIME_ASC
  DEPARTURE_TIME_DESC
  DEPARTURE_PLACE_ASC
  DEPARTURE_PLACE_DESC
  IS_NEED_HOUSING_ASC
  IS_NEED_HOUSING_DESC
  COMMENTARY_ASC
  COMMENTARY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `University` values."""
type UniversitiesConnection {
  """A list of `University` objects."""
  nodes: [University]!

  """
  A list of edges which contains the `University` and cursor to aid in pagination.
  """
  edges: [UniversitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `University` you could get from the connection."""
  totalCount: Int
}

"""A `University` edge in the connection."""
type UniversitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `University` at the end of the edge."""
  node: University
}

"""Methods to use when ordering `University`."""
enum UniversitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CITY_ID_ASC
  CITY_ID_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type University implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  cityId: UUID
  shortName: String!
  longName: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `City` that is related to this `University`."""
  city: City

  """Reads and enables pagination through a set of `Profile`."""
  profiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfileCondition
  ): ProfilesConnection!
}

"""
A condition to be used against `University` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UniversityCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `cityId` field."""
  cityId: UUID

  """Checks for equality with the object’s `shortName` field."""
  shortName: String

  """Checks for equality with the object’s `longName` field."""
  longName: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `University`"""
input UniversityInput {
  id: UUID
  cityId: UUID
  shortName: String!
  longName: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `University`. Fields that are set will be updated.
"""
input UniversityPatch {
  id: UUID
  cityId: UUID
  shortName: String
  longName: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateCityById` mutation."""
input UpdateCityByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `City` being updated.
  """
  cityPatch: CityPatch!
  id: UUID!
}

"""All input for the `updateCity` mutation."""
input UpdateCityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `City` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `City` being updated.
  """
  cityPatch: CityPatch!
}

"""The output of our update `City` mutation."""
type UpdateCityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `City` that was updated by this mutation."""
  city: City

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Country` that is related to this `City`."""
  country: Country

  """An edge for our `City`. May be used by Relay 1."""
  cityEdge(
    """The method to use when ordering `City`."""
    orderBy: [CitiesOrderBy!] = PRIMARY_KEY_ASC
  ): CitiesEdge
}

"""All input for the `updateCodeEditorById` mutation."""
input UpdateCodeEditorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CodeEditor` being updated.
  """
  codeEditorPatch: CodeEditorPatch!
  id: UUID!
}

"""All input for the `updateCodeEditorByNameAndVersion` mutation."""
input UpdateCodeEditorByNameAndVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CodeEditor` being updated.
  """
  codeEditorPatch: CodeEditorPatch!

  """Name of code editor. Use official name, like Visual Studio"""
  name: String!

  """
  Version of code editor. Version is used for define which margin version is will be used, like Visual Studio 2017
  """
  version: String!
}

"""All input for the `updateCodeEditorByVersion` mutation."""
input UpdateCodeEditorByVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CodeEditor` being updated.
  """
  codeEditorPatch: CodeEditorPatch!

  """
  Version of code editor. Version is used for define which margin version is will be used, like Visual Studio 2017
  """
  version: String!
}

"""All input for the `updateCodeEditor` mutation."""
input UpdateCodeEditorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CodeEditor` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CodeEditor` being updated.
  """
  codeEditorPatch: CodeEditorPatch!
}

"""The output of our update `CodeEditor` mutation."""
type UpdateCodeEditorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CodeEditor` that was updated by this mutation."""
  codeEditor: CodeEditor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CodeEditor`. May be used by Relay 1."""
  codeEditorEdge(
    """The method to use when ordering `CodeEditor`."""
    orderBy: [CodeEditorsOrderBy!] = PRIMARY_KEY_ASC
  ): CodeEditorsEdge
}

"""All input for the `updateCompilerById` mutation."""
input UpdateCompilerByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Compiler` being updated.
  """
  compilerPatch: CompilerPatch!
  id: UUID!
}

"""All input for the `updateCompilerByNameAndVersion` mutation."""
input UpdateCompilerByNameAndVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Compiler` being updated.
  """
  compilerPatch: CompilerPatch!

  """Compiler name"""
  name: String!

  """Compiler version"""
  version: String!
}

"""All input for the `updateCompilerByVersion` mutation."""
input UpdateCompilerByVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Compiler` being updated.
  """
  compilerPatch: CompilerPatch!

  """Compiler version"""
  version: String!
}

"""All input for the `updateCompiler` mutation."""
input UpdateCompilerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Compiler` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Compiler` being updated.
  """
  compilerPatch: CompilerPatch!
}

"""The output of our update `Compiler` mutation."""
type UpdateCompilerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Compiler` that was updated by this mutation."""
  compiler: Compiler

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProgrammingLanguage` that is related to this `Compiler`.
  """
  language: ProgrammingLanguage

  """An edge for our `Compiler`. May be used by Relay 1."""
  compilerEdge(
    """The method to use when ordering `Compiler`."""
    orderBy: [CompilersOrderBy!] = PRIMARY_KEY_ASC
  ): CompilersEdge
}

"""All input for the `updateContestById` mutation."""
input UpdateContestByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Contest` being updated.
  """
  contestPatch: ContestPatch!
  id: UUID!
}

"""All input for the `updateContest` mutation."""
input UpdateContestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Contest` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Contest` being updated.
  """
  contestPatch: ContestPatch!
}

"""The output of our update `Contest` mutation."""
type UpdateContestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Contest` that was updated by this mutation."""
  contest: Contest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Contest`."""
  user: User

  """An edge for our `Contest`. May be used by Relay 1."""
  contestEdge(
    """The method to use when ordering `Contest`."""
    orderBy: [ContestsOrderBy!] = PRIMARY_KEY_ASC
  ): ContestsEdge
}

"""
All input for the `updateContestsToProfileByContestIdAndProfileId` mutation.
"""
input UpdateContestsToProfileByContestIdAndProfileIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ContestsToProfile` being updated.
  """
  contestsToProfilePatch: ContestsToProfilePatch!
  contestId: UUID!
  profileId: UUID!
}

"""All input for the `updateContestsToProfile` mutation."""
input UpdateContestsToProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContestsToProfile` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ContestsToProfile` being updated.
  """
  contestsToProfilePatch: ContestsToProfilePatch!
}

"""The output of our update `ContestsToProfile` mutation."""
type UpdateContestsToProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContestsToProfile` that was updated by this mutation."""
  contestsToProfile: ContestsToProfile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Contest` that is related to this `ContestsToProfile`."""
  contest: Contest

  """Reads a single `Profile` that is related to this `ContestsToProfile`."""
  profile: Profile

  """An edge for our `ContestsToProfile`. May be used by Relay 1."""
  contestsToProfileEdge(
    """The method to use when ordering `ContestsToProfile`."""
    orderBy: [ContestsToProfilesOrderBy!] = PRIMARY_KEY_ASC
  ): ContestsToProfilesEdge
}

"""All input for the `updateContestsToTeamByContestIdAndTeamId` mutation."""
input UpdateContestsToTeamByContestIdAndTeamIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ContestsToTeam` being updated.
  """
  contestsToTeamPatch: ContestsToTeamPatch!
  contestId: UUID!
  teamId: UUID!
}

"""All input for the `updateContestsToTeam` mutation."""
input UpdateContestsToTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContestsToTeam` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ContestsToTeam` being updated.
  """
  contestsToTeamPatch: ContestsToTeamPatch!
}

"""The output of our update `ContestsToTeam` mutation."""
type UpdateContestsToTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContestsToTeam` that was updated by this mutation."""
  contestsToTeam: ContestsToTeam

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Contest` that is related to this `ContestsToTeam`."""
  contest: Contest

  """Reads a single `Team` that is related to this `ContestsToTeam`."""
  team: Team

  """An edge for our `ContestsToTeam`. May be used by Relay 1."""
  contestsToTeamEdge(
    """The method to use when ordering `ContestsToTeam`."""
    orderBy: [ContestsToTeamsOrderBy!] = PRIMARY_KEY_ASC
  ): ContestsToTeamsEdge
}

"""All input for the `updateCountryById` mutation."""
input UpdateCountryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Country` being updated.
  """
  countryPatch: CountryPatch!
  id: UUID!
}

"""All input for the `updateCountry` mutation."""
input UpdateCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Country` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Country` being updated.
  """
  countryPatch: CountryPatch!
}

"""The output of our update `Country` mutation."""
type UpdateCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Country` that was updated by this mutation."""
  country: Country

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Country`. May be used by Relay 1."""
  countryEdge(
    """The method to use when ordering `Country`."""
    orderBy: [CountriesOrderBy!] = PRIMARY_KEY_ASC
  ): CountriesEdge
}

"""All input for the `updateFailTypeById` mutation."""
input UpdateFailTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FailType` being updated.
  """
  failTypePatch: FailTypePatch!
  id: UUID!
}

"""All input for the `updateFailType` mutation."""
input UpdateFailTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FailType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FailType` being updated.
  """
  failTypePatch: FailTypePatch!
}

"""The output of our update `FailType` mutation."""
type UpdateFailTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FailType` that was updated by this mutation."""
  failType: FailType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FailType`. May be used by Relay 1."""
  failTypeEdge(
    """The method to use when ordering `FailType`."""
    orderBy: [FailTypesOrderBy!] = PRIMARY_KEY_ASC
  ): FailTypesEdge
}

"""All input for the `updateLanguageById` mutation."""
input UpdateLanguageByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Language` being updated.
  """
  languagePatch: LanguagePatch!
  id: UUID!
}

"""All input for the `updateLanguage` mutation."""
input UpdateLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Language` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Language` being updated.
  """
  languagePatch: LanguagePatch!
}

"""The output of our update `Language` mutation."""
type UpdateLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Language` that was updated by this mutation."""
  language: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Language`. May be used by Relay 1."""
  languageEdge(
    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = PRIMARY_KEY_ASC
  ): LanguagesEdge
}

"""All input for the `updateProblemById` mutation."""
input UpdateProblemByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Problem` being updated.
  """
  problemPatch: ProblemPatch!
  id: UUID!
}

"""All input for the `updateProblem` mutation."""
input UpdateProblemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Problem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Problem` being updated.
  """
  problemPatch: ProblemPatch!
}

"""The output of our update `Problem` mutation."""
type UpdateProblemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Problem` that was updated by this mutation."""
  problem: Problem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ProgramInputType` that is related to this `Problem`."""
  programInputType: ProgramInputType

  """Reads a single `ProgramOutputType` that is related to this `Problem`."""
  programOutputType: ProgramOutputType

  """Reads a single `Profile` that is related to this `Problem`."""
  author_profile: Profile

  """Reads a single `Profile` that is related to this `Problem`."""
  tester_profile: Profile

  """An edge for our `Problem`. May be used by Relay 1."""
  problemEdge(
    """The method to use when ordering `Problem`."""
    orderBy: [ProblemsOrderBy!] = PRIMARY_KEY_ASC
  ): ProblemsEdge
}

"""All input for the `updateProblemsToTagByProblemIdAndTagId` mutation."""
input UpdateProblemsToTagByProblemIdAndTagIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProblemsToTag` being updated.
  """
  problemsToTagPatch: ProblemsToTagPatch!
  problemId: UUID!
  tagId: UUID!
}

"""All input for the `updateProblemsToTag` mutation."""
input UpdateProblemsToTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProblemsToTag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProblemsToTag` being updated.
  """
  problemsToTagPatch: ProblemsToTagPatch!
}

"""The output of our update `ProblemsToTag` mutation."""
type UpdateProblemsToTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProblemsToTag` that was updated by this mutation."""
  problemsToTag: ProblemsToTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Problem` that is related to this `ProblemsToTag`."""
  problem: Problem

  """Reads a single `Tag` that is related to this `ProblemsToTag`."""
  tag: Tag

  """An edge for our `ProblemsToTag`. May be used by Relay 1."""
  problemsToTagEdge(
    """The method to use when ordering `ProblemsToTag`."""
    orderBy: [ProblemsToTagsOrderBy!] = PRIMARY_KEY_ASC
  ): ProblemsToTagsEdge
}

"""All input for the `updateProfileById` mutation."""
input UpdateProfileByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Profile` being updated.
  """
  profilePatch: ProfilePatch!
  id: UUID!
}

"""All input for the `updateProfile` mutation."""
input UpdateProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Profile` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Profile` being updated.
  """
  profilePatch: ProfilePatch!
}

"""The output of our update `Profile` mutation."""
type UpdateProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Profile` that was updated by this mutation."""
  profile: Profile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Profile`."""
  user: User

  """Reads a single `City` that is related to this `Profile`."""
  city: City

  """Reads a single `University` that is related to this `Profile`."""
  university: University

  """An edge for our `Profile`. May be used by Relay 1."""
  profileEdge(
    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = PRIMARY_KEY_ASC
  ): ProfilesEdge
}

"""
All input for the `updateProfilesToCodeEditorByProfileIdAndCodeEditorId` mutation.
"""
input UpdateProfilesToCodeEditorByProfileIdAndCodeEditorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProfilesToCodeEditor` being updated.
  """
  profilesToCodeEditorPatch: ProfilesToCodeEditorPatch!
  profileId: UUID!
  codeEditorId: UUID!
}

"""All input for the `updateProfilesToCodeEditor` mutation."""
input UpdateProfilesToCodeEditorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProfilesToCodeEditor` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProfilesToCodeEditor` being updated.
  """
  profilesToCodeEditorPatch: ProfilesToCodeEditorPatch!
}

"""The output of our update `ProfilesToCodeEditor` mutation."""
type UpdateProfilesToCodeEditorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProfilesToCodeEditor` that was updated by this mutation."""
  profilesToCodeEditor: ProfilesToCodeEditor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Profile` that is related to this `ProfilesToCodeEditor`.
  """
  profile: Profile

  """
  Reads a single `CodeEditor` that is related to this `ProfilesToCodeEditor`.
  """
  codeEditor: CodeEditor

  """An edge for our `ProfilesToCodeEditor`. May be used by Relay 1."""
  profilesToCodeEditorEdge(
    """The method to use when ordering `ProfilesToCodeEditor`."""
    orderBy: [ProfilesToCodeEditorsOrderBy!] = PRIMARY_KEY_ASC
  ): ProfilesToCodeEditorsEdge
}

"""
All input for the `updateProfilesToProgrammingLanguageByProfileIdAndLanguageId` mutation.
"""
input UpdateProfilesToProgrammingLanguageByProfileIdAndLanguageIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProfilesToProgrammingLanguage` being updated.
  """
  profilesToProgrammingLanguagePatch: ProfilesToProgrammingLanguagePatch!
  profileId: UUID!
  languageId: UUID!
}

"""All input for the `updateProfilesToProgrammingLanguage` mutation."""
input UpdateProfilesToProgrammingLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProfilesToProgrammingLanguage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProfilesToProgrammingLanguage` being updated.
  """
  profilesToProgrammingLanguagePatch: ProfilesToProgrammingLanguagePatch!
}

"""The output of our update `ProfilesToProgrammingLanguage` mutation."""
type UpdateProfilesToProgrammingLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProfilesToProgrammingLanguage` that was updated by this mutation."""
  profilesToProgrammingLanguage: ProfilesToProgrammingLanguage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Profile` that is related to this `ProfilesToProgrammingLanguage`.
  """
  profile: Profile

  """
  Reads a single `ProgrammingLanguage` that is related to this `ProfilesToProgrammingLanguage`.
  """
  language: ProgrammingLanguage

  """
  An edge for our `ProfilesToProgrammingLanguage`. May be used by Relay 1.
  """
  profilesToProgrammingLanguageEdge(
    """The method to use when ordering `ProfilesToProgrammingLanguage`."""
    orderBy: [ProfilesToProgrammingLanguagesOrderBy!] = PRIMARY_KEY_ASC
  ): ProfilesToProgrammingLanguagesEdge
}

"""
All input for the `updateProfilesToTravelByProfileIdAndTravelId` mutation.
"""
input UpdateProfilesToTravelByProfileIdAndTravelIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProfilesToTravel` being updated.
  """
  profilesToTravelPatch: ProfilesToTravelPatch!
  profileId: UUID!
  travelId: UUID!
}

"""All input for the `updateProfilesToTravel` mutation."""
input UpdateProfilesToTravelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProfilesToTravel` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProfilesToTravel` being updated.
  """
  profilesToTravelPatch: ProfilesToTravelPatch!
}

"""The output of our update `ProfilesToTravel` mutation."""
type UpdateProfilesToTravelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProfilesToTravel` that was updated by this mutation."""
  profilesToTravel: ProfilesToTravel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Profile` that is related to this `ProfilesToTravel`."""
  profile: Profile

  """Reads a single `Travel` that is related to this `ProfilesToTravel`."""
  travel: Travel

  """An edge for our `ProfilesToTravel`. May be used by Relay 1."""
  profilesToTravelEdge(
    """The method to use when ordering `ProfilesToTravel`."""
    orderBy: [ProfilesToTravelsOrderBy!] = PRIMARY_KEY_ASC
  ): ProfilesToTravelsEdge
}

"""All input for the `updateProgramInputTypeById` mutation."""
input UpdateProgramInputTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProgramInputType` being updated.
  """
  programInputTypePatch: ProgramInputTypePatch!
  id: UUID!
}

"""All input for the `updateProgramInputType` mutation."""
input UpdateProgramInputTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProgramInputType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProgramInputType` being updated.
  """
  programInputTypePatch: ProgramInputTypePatch!
}

"""The output of our update `ProgramInputType` mutation."""
type UpdateProgramInputTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProgramInputType` that was updated by this mutation."""
  programInputType: ProgramInputType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProgramInputType`. May be used by Relay 1."""
  programInputTypeEdge(
    """The method to use when ordering `ProgramInputType`."""
    orderBy: [ProgramInputTypesOrderBy!] = PRIMARY_KEY_ASC
  ): ProgramInputTypesEdge
}

"""All input for the `updateProgrammingLanguageById` mutation."""
input UpdateProgrammingLanguageByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProgrammingLanguage` being updated.
  """
  programmingLanguagePatch: ProgrammingLanguagePatch!
  id: UUID!
}

"""
All input for the `updateProgrammingLanguageByNameAndVersion` mutation.
"""
input UpdateProgrammingLanguageByNameAndVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProgrammingLanguage` being updated.
  """
  programmingLanguagePatch: ProgrammingLanguagePatch!

  """
  Name of language. Use official name, like C++, Go, JavaScript, but not cpp, Golang, ES
  """
  name: String!

  """
  Version of language. Version is used for compiler or interpreter. Also can have definition of used extensions and presets
  """
  version: String!
}

"""All input for the `updateProgrammingLanguageByVersion` mutation."""
input UpdateProgrammingLanguageByVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProgrammingLanguage` being updated.
  """
  programmingLanguagePatch: ProgrammingLanguagePatch!

  """
  Version of language. Version is used for compiler or interpreter. Also can have definition of used extensions and presets
  """
  version: String!
}

"""All input for the `updateProgrammingLanguage` mutation."""
input UpdateProgrammingLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProgrammingLanguage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProgrammingLanguage` being updated.
  """
  programmingLanguagePatch: ProgrammingLanguagePatch!
}

"""The output of our update `ProgrammingLanguage` mutation."""
type UpdateProgrammingLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProgrammingLanguage` that was updated by this mutation."""
  programmingLanguage: ProgrammingLanguage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProgrammingLanguage`. May be used by Relay 1."""
  programmingLanguageEdge(
    """The method to use when ordering `ProgrammingLanguage`."""
    orderBy: [ProgrammingLanguagesOrderBy!] = PRIMARY_KEY_ASC
  ): ProgrammingLanguagesEdge
}

"""All input for the `updateProgramOutputTypeById` mutation."""
input UpdateProgramOutputTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProgramOutputType` being updated.
  """
  programOutputTypePatch: ProgramOutputTypePatch!
  id: UUID!
}

"""All input for the `updateProgramOutputType` mutation."""
input UpdateProgramOutputTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProgramOutputType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProgramOutputType` being updated.
  """
  programOutputTypePatch: ProgramOutputTypePatch!
}

"""The output of our update `ProgramOutputType` mutation."""
type UpdateProgramOutputTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProgramOutputType` that was updated by this mutation."""
  programOutputType: ProgramOutputType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProgramOutputType`. May be used by Relay 1."""
  programOutputTypeEdge(
    """The method to use when ordering `ProgramOutputType`."""
    orderBy: [ProgramOutputTypesOrderBy!] = PRIMARY_KEY_ASC
  ): ProgramOutputTypesEdge
}

"""All input for the `updateSolutionById` mutation."""
input UpdateSolutionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Solution` being updated.
  """
  solutionPatch: SolutionPatch!
  id: UUID!
}

"""All input for the `updateSolution` mutation."""
input UpdateSolutionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Solution` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Solution` being updated.
  """
  solutionPatch: SolutionPatch!
}

"""The output of our update `Solution` mutation."""
type UpdateSolutionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Solution` that was updated by this mutation."""
  solution: Solution

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Problem` that is related to this `Solution`."""
  problem: Problem

  """Reads a single `Compiler` that is related to this `Solution`."""
  compiler: Compiler

  """An edge for our `Solution`. May be used by Relay 1."""
  solutionEdge(
    """The method to use when ordering `Solution`."""
    orderBy: [SolutionsOrderBy!] = PRIMARY_KEY_ASC
  ): SolutionsEdge
}

"""All input for the `updateSolutionRunById` mutation."""
input UpdateSolutionRunByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SolutionRun` being updated.
  """
  solutionRunPatch: SolutionRunPatch!
  id: UUID!
}

"""All input for the `updateSolutionRun` mutation."""
input UpdateSolutionRunInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SolutionRun` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SolutionRun` being updated.
  """
  solutionRunPatch: SolutionRunPatch!
}

"""The output of our update `SolutionRun` mutation."""
type UpdateSolutionRunPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SolutionRun` that was updated by this mutation."""
  solutionRun: SolutionRun

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Solution` that is related to this `SolutionRun`."""
  solution: Solution

  """Reads a single `Test` that is related to this `SolutionRun`."""
  failedTest: Test

  """Reads a single `FailType` that is related to this `SolutionRun`."""
  failType: FailType

  """An edge for our `SolutionRun`. May be used by Relay 1."""
  solutionRunEdge(
    """The method to use when ordering `SolutionRun`."""
    orderBy: [SolutionRunsOrderBy!] = PRIMARY_KEY_ASC
  ): SolutionRunsEdge
}

"""All input for the `updateTagById` mutation."""
input UpdateTagByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  tagPatch: TagPatch!
  id: UUID!
}

"""All input for the `updateTag` mutation."""
input UpdateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  tagPatch: TagPatch!
}

"""The output of our update `Tag` mutation."""
type UpdateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tag` that was updated by this mutation."""
  tag: Tag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = PRIMARY_KEY_ASC
  ): TagsEdge
}

"""All input for the `updateTeamById` mutation."""
input UpdateTeamByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Team` being updated.
  """
  teamPatch: TeamPatch!
  id: UUID!
}

"""All input for the `updateTeam` mutation."""
input UpdateTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Team` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Team` being updated.
  """
  teamPatch: TeamPatch!
}

"""The output of our update `Team` mutation."""
type UpdateTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Team` that was updated by this mutation."""
  team: Team

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Team`. May be used by Relay 1."""
  teamEdge(
    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!] = PRIMARY_KEY_ASC
  ): TeamsEdge
}

"""All input for the `updateTeamsToProfileByTeamIdAndProfileId` mutation."""
input UpdateTeamsToProfileByTeamIdAndProfileIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TeamsToProfile` being updated.
  """
  teamsToProfilePatch: TeamsToProfilePatch!
  teamId: UUID!
  profileId: UUID!
}

"""All input for the `updateTeamsToProfile` mutation."""
input UpdateTeamsToProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TeamsToProfile` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TeamsToProfile` being updated.
  """
  teamsToProfilePatch: TeamsToProfilePatch!
}

"""The output of our update `TeamsToProfile` mutation."""
type UpdateTeamsToProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TeamsToProfile` that was updated by this mutation."""
  teamsToProfile: TeamsToProfile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Team` that is related to this `TeamsToProfile`."""
  team: Team

  """Reads a single `Profile` that is related to this `TeamsToProfile`."""
  profile: Profile

  """An edge for our `TeamsToProfile`. May be used by Relay 1."""
  teamsToProfileEdge(
    """The method to use when ordering `TeamsToProfile`."""
    orderBy: [TeamsToProfilesOrderBy!] = PRIMARY_KEY_ASC
  ): TeamsToProfilesEdge
}

"""All input for the `updateTestById` mutation."""
input UpdateTestByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Test` being updated.
  """
  testPatch: TestPatch!
  id: UUID!
}

"""All input for the `updateTest` mutation."""
input UpdateTestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Test` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Test` being updated.
  """
  testPatch: TestPatch!
}

"""The output of our update `Test` mutation."""
type UpdateTestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Test` that was updated by this mutation."""
  test: Test

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Problem` that is related to this `Test`."""
  problem: Problem

  """An edge for our `Test`. May be used by Relay 1."""
  testEdge(
    """The method to use when ordering `Test`."""
    orderBy: [TestsOrderBy!] = PRIMARY_KEY_ASC
  ): TestsEdge
}

"""All input for the `updateTravelById` mutation."""
input UpdateTravelByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Travel` being updated.
  """
  travelPatch: TravelPatch!
  id: UUID!
}

"""All input for the `updateTravel` mutation."""
input UpdateTravelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Travel` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Travel` being updated.
  """
  travelPatch: TravelPatch!
}

"""The output of our update `Travel` mutation."""
type UpdateTravelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Travel` that was updated by this mutation."""
  travel: Travel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Travel`. May be used by Relay 1."""
  travelEdge(
    """The method to use when ordering `Travel`."""
    orderBy: [TravelsOrderBy!] = PRIMARY_KEY_ASC
  ): TravelsEdge
}

"""All input for the `updateUniversityById` mutation."""
input UpdateUniversityByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `University` being updated.
  """
  universityPatch: UniversityPatch!
  id: UUID!
}

"""All input for the `updateUniversity` mutation."""
input UpdateUniversityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `University` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `University` being updated.
  """
  universityPatch: UniversityPatch!
}

"""The output of our update `University` mutation."""
type UpdateUniversityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `University` that was updated by this mutation."""
  university: University

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `City` that is related to this `University`."""
  city: City

  """An edge for our `University`. May be used by Relay 1."""
  universityEdge(
    """The method to use when ordering `University`."""
    orderBy: [UniversitiesOrderBy!] = PRIMARY_KEY_ASC
  ): UniversitiesEdge
}

"""All input for the `updateUserAuthenticationById` mutation."""
input UpdateUserAuthenticationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserAuthentication` being updated.
  """
  userAuthenticationPatch: UserAuthenticationPatch!
  id: UUID!
}

"""
All input for the `updateUserAuthenticationByServiceAndIdentifier` mutation.
"""
input UpdateUserAuthenticationByServiceAndIdentifierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserAuthentication` being updated.
  """
  userAuthenticationPatch: UserAuthenticationPatch!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!

  """A unique identifier for the user within the login service."""
  identifier: String!
}

"""All input for the `updateUserAuthentication` mutation."""
input UpdateUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAuthentication` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserAuthentication` being updated.
  """
  userAuthenticationPatch: UserAuthenticationPatch!
}

"""The output of our update `UserAuthentication` mutation."""
type UpdateUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAuthentication` that was updated by this mutation."""
  userAuthentication: UserAuthentication

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserAuthentication`. May be used by Relay 1."""
  userAuthenticationEdge(
    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = PRIMARY_KEY_ASC
  ): UserAuthenticationsEdge
}

"""
All input for the `updateUserAuthenticationSecretByUserAuthenticationId` mutation.
"""
input UpdateUserAuthenticationSecretByUserAuthenticationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserAuthenticationSecret` being updated.
  """
  userAuthenticationSecretPatch: UserAuthenticationSecretPatch!
  userAuthenticationId: UUID!
}

"""All input for the `updateUserAuthenticationSecret` mutation."""
input UpdateUserAuthenticationSecretInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAuthenticationSecret` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserAuthenticationSecret` being updated.
  """
  userAuthenticationSecretPatch: UserAuthenticationSecretPatch!
}

"""The output of our update `UserAuthenticationSecret` mutation."""
type UpdateUserAuthenticationSecretPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAuthenticationSecret` that was updated by this mutation."""
  userAuthenticationSecret: UserAuthenticationSecret

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `UserAuthentication` that is related to this `UserAuthenticationSecret`.
  """
  userAuthentication: UserAuthentication

  """An edge for our `UserAuthenticationSecret`. May be used by Relay 1."""
  userAuthenticationSecretEdge(
    """The method to use when ordering `UserAuthenticationSecret`."""
    orderBy: [UserAuthenticationSecretsOrderBy!] = PRIMARY_KEY_ASC
  ): UserAuthenticationSecretsEdge
}

"""All input for the `updateUserById` mutation."""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!

  """Unique identifier for the user."""
  id: UUID!
}

"""All input for the `updateUserByUsername` mutation."""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""All input for the `updateUserEmailById` mutation."""
input UpdateUserEmailByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserEmail` being updated.
  """
  userEmailPatch: UserEmailPatch!
  id: UUID!
}

"""All input for the `updateUserEmailByUserIdAndEmail` mutation."""
input UpdateUserEmailByUserIdAndEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserEmail` being updated.
  """
  userEmailPatch: UserEmailPatch!
  userId: UUID!

  """The users email address, in `a@b.c` format."""
  email: String!
}

"""All input for the `updateUserEmail` mutation."""
input UpdateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserEmail` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserEmail` being updated.
  """
  userEmailPatch: UserEmailPatch!
}

"""The output of our update `UserEmail` mutation."""
type UpdateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserEmail` that was updated by this mutation."""
  userEmail: UserEmail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = PRIMARY_KEY_ASC
  ): UserEmailsEdge
}

"""All input for the `updateUserEmailSecretByUserEmailId` mutation."""
input UpdateUserEmailSecretByUserEmailIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserEmailSecret` being updated.
  """
  userEmailSecretPatch: UserEmailSecretPatch!
  userEmailId: UUID!
}

"""All input for the `updateUserEmailSecret` mutation."""
input UpdateUserEmailSecretInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserEmailSecret` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserEmailSecret` being updated.
  """
  userEmailSecretPatch: UserEmailSecretPatch!
}

"""The output of our update `UserEmailSecret` mutation."""
type UpdateUserEmailSecretPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserEmailSecret` that was updated by this mutation."""
  userEmailSecret: UserEmailSecret

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `UserEmail` that is related to this `UserEmailSecret`."""
  userEmail: UserEmail

  """An edge for our `UserEmailSecret`. May be used by Relay 1."""
  userEmailSecretEdge(
    """The method to use when ordering `UserEmailSecret`."""
    orderBy: [UserEmailSecretsOrderBy!] = PRIMARY_KEY_ASC
  ): UserEmailSecretsEdge
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

"""All input for the `updateUserSecretByUserId` mutation."""
input UpdateUserSecretByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserSecret` being updated.
  """
  userSecretPatch: UserSecretPatch!
  userId: UUID!
}

"""All input for the `updateUserSecret` mutation."""
input UpdateUserSecretInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserSecret` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserSecret` being updated.
  """
  userSecretPatch: UserSecretPatch!
}

"""The output of our update `UserSecret` mutation."""
type UpdateUserSecretPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSecret` that was updated by this mutation."""
  userSecret: UserSecret

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserSecret`."""
  user: User

  """An edge for our `UserSecret`. May be used by Relay 1."""
  userSecretEdge(
    """The method to use when ordering `UserSecret`."""
    orderBy: [UserSecretsOrderBy!] = PRIMARY_KEY_ASC
  ): UserSecretsEdge
}

"""A user who can log in to the application."""
type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Unique identifier for the user."""
  id: UUID!

  """Public-facing username (or 'handle') of the user."""
  username: String!

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """Optional avatar URL."""
  avatarUrl: String

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `UserSecret` that is related to this `User`."""
  user: UserSecret

  """Reads and enables pagination through a set of `UserSecret`."""
  userSecrets(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserSecret`."""
    orderBy: [UserSecretsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserSecretCondition
  ): UserSecretsConnection! @deprecated(reason: "Please use user instead")

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmails(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition
  ): UserEmailsConnection!

  """Reads and enables pagination through a set of `Profile`."""
  profiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfileCondition
  ): ProfilesConnection!

  """Reads and enables pagination through a set of `Contest`."""
  contests(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Contest`."""
    orderBy: [ContestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContestCondition
  ): ContestsConnection!
}

"""
Contains information about the login providers this user has used, so that they may disconnect them should they wish.
"""
type UserAuthentication implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!

  """A unique identifier for the user within the login service."""
  identifier: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `UserAuthenticationSecret` that is related to this `UserAuthentication`.
  """
  userAuthentication: UserAuthenticationSecret

  """
  Reads and enables pagination through a set of `UserAuthenticationSecret`.
  """
  userAuthenticationSecrets(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserAuthenticationSecret`."""
    orderBy: [UserAuthenticationSecretsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationSecretCondition
  ): UserAuthenticationSecretsConnection! @deprecated(reason: "Please use userAuthentication instead")
}

"""An input for mutations affecting `UserAuthentication`"""
input UserAuthenticationInput {
  id: UUID

  """The login service used, e.g. `twitter` or `github`."""
  service: String!

  """A unique identifier for the user within the login service."""
  identifier: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `UserAuthentication`. Fields that are set will be updated.
"""
input UserAuthenticationPatch {
  id: UUID

  """The login service used, e.g. `twitter` or `github`."""
  service: String

  """A unique identifier for the user within the login service."""
  identifier: String
  createdAt: Datetime
  updatedAt: Datetime
}

type UserAuthenticationSecret implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userAuthenticationId: UUID!
  details: JSON!

  """
  Reads a single `UserAuthentication` that is related to this `UserAuthenticationSecret`.
  """
  userAuthentication: UserAuthentication
}

"""
A condition to be used against `UserAuthenticationSecret` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input UserAuthenticationSecretCondition {
  """Checks for equality with the object’s `userAuthenticationId` field."""
  userAuthenticationId: UUID

  """Checks for equality with the object’s `details` field."""
  details: JSON
}

"""An input for mutations affecting `UserAuthenticationSecret`"""
input UserAuthenticationSecretInput {
  userAuthenticationId: UUID!
  details: JSON
}

"""
Represents an update to a `UserAuthenticationSecret`. Fields that are set will be updated.
"""
input UserAuthenticationSecretPatch {
  userAuthenticationId: UUID
  details: JSON
}

"""A connection to a list of `UserAuthenticationSecret` values."""
type UserAuthenticationSecretsConnection {
  """A list of `UserAuthenticationSecret` objects."""
  nodes: [UserAuthenticationSecret]!

  """
  A list of edges which contains the `UserAuthenticationSecret` and cursor to aid in pagination.
  """
  edges: [UserAuthenticationSecretsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UserAuthenticationSecret` you could get from the connection.
  """
  totalCount: Int
}

"""A `UserAuthenticationSecret` edge in the connection."""
type UserAuthenticationSecretsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserAuthenticationSecret` at the end of the edge."""
  node: UserAuthenticationSecret
}

"""Methods to use when ordering `UserAuthenticationSecret`."""
enum UserAuthenticationSecretsOrderBy {
  NATURAL
  USER_AUTHENTICATION_ID_ASC
  USER_AUTHENTICATION_ID_DESC
  DETAILS_ASC
  DETAILS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A `UserAuthentication` edge in the connection."""
type UserAuthenticationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserAuthentication` at the end of the edge."""
  node: UserAuthentication
}

"""Methods to use when ordering `UserAuthentication`."""
enum UserAuthenticationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SERVICE_ASC
  SERVICE_DESC
  IDENTIFIER_ASC
  IDENTIFIER_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Information about a user's email address."""
type UserEmail implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  userId: UUID!

  """The users email address, in `a@b.c` format."""
  email: String!

  """
  True if the user has is_verified their email address (by clicking the link in
  the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """Reads a single `UserEmailSecret` that is related to this `UserEmail`."""
  userEmail: UserEmailSecret

  """Reads and enables pagination through a set of `UserEmailSecret`."""
  userEmailSecrets(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserEmailSecret`."""
    orderBy: [UserEmailSecretsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailSecretCondition
  ): UserEmailSecretsConnection! @deprecated(reason: "Please use userEmail instead")
}

"""
A condition to be used against `UserEmail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserEmailCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `UserEmail`"""
input UserEmailInput {
  id: UUID
  userId: UUID

  """The users email address, in `a@b.c` format."""
  email: String!

  """
  True if the user has is_verified their email address (by clicking the link in
  the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `UserEmail`. Fields that are set will be updated.
"""
input UserEmailPatch {
  id: UUID
  userId: UUID

  """The users email address, in `a@b.c` format."""
  email: String

  """
  True if the user has is_verified their email address (by clicking the link in
  the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `UserEmail` values."""
type UserEmailsConnection {
  """A list of `UserEmail` objects."""
  nodes: [UserEmail]!

  """
  A list of edges which contains the `UserEmail` and cursor to aid in pagination.
  """
  edges: [UserEmailsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserEmail` you could get from the connection."""
  totalCount: Int
}

"""
The contents of this table should never be visible to the user. Contains data
mostly related to email verification and avoiding spamming users.
"""
type UserEmailSecret implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userEmailId: UUID!
  verificationToken: String

  """
  We store the time the last password reset was sent to this email to prevent the email getting flooded.
  """
  passwordResetEmailSentAt: Datetime

  """Reads a single `UserEmail` that is related to this `UserEmailSecret`."""
  userEmail: UserEmail
}

"""
A condition to be used against `UserEmailSecret` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserEmailSecretCondition {
  """Checks for equality with the object’s `userEmailId` field."""
  userEmailId: UUID

  """Checks for equality with the object’s `verificationToken` field."""
  verificationToken: String

  """
  Checks for equality with the object’s `passwordResetEmailSentAt` field.
  """
  passwordResetEmailSentAt: Datetime
}

"""An input for mutations affecting `UserEmailSecret`"""
input UserEmailSecretInput {
  userEmailId: UUID!
  verificationToken: String

  """
  We store the time the last password reset was sent to this email to prevent the email getting flooded.
  """
  passwordResetEmailSentAt: Datetime
}

"""
Represents an update to a `UserEmailSecret`. Fields that are set will be updated.
"""
input UserEmailSecretPatch {
  userEmailId: UUID
  verificationToken: String

  """
  We store the time the last password reset was sent to this email to prevent the email getting flooded.
  """
  passwordResetEmailSentAt: Datetime
}

"""A connection to a list of `UserEmailSecret` values."""
type UserEmailSecretsConnection {
  """A list of `UserEmailSecret` objects."""
  nodes: [UserEmailSecret]!

  """
  A list of edges which contains the `UserEmailSecret` and cursor to aid in pagination.
  """
  edges: [UserEmailSecretsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UserEmailSecret` you could get from the connection.
  """
  totalCount: Int
}

"""A `UserEmailSecret` edge in the connection."""
type UserEmailSecretsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserEmailSecret` at the end of the edge."""
  node: UserEmailSecret
}

"""Methods to use when ordering `UserEmailSecret`."""
enum UserEmailSecretsOrderBy {
  NATURAL
  USER_EMAIL_ID_ASC
  USER_EMAIL_ID_DESC
  VERIFICATION_TOKEN_ASC
  VERIFICATION_TOKEN_DESC
  PASSWORD_RESET_EMAIL_SENT_AT_ASC
  PASSWORD_RESET_EMAIL_SENT_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A `UserEmail` edge in the connection."""
type UserEmailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserEmail` at the end of the edge."""
  node: UserEmail
}

"""Methods to use when ordering `UserEmail`."""
enum UserEmailsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `User`"""
input UserInput {
  """Unique identifier for the user."""
  id: UUID

  """Public-facing username (or 'handle') of the user."""
  username: String!

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """Optional avatar URL."""
  avatarUrl: String

  """If true, the user has elevated privileges."""
  isAdmin: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """Unique identifier for the user."""
  id: UUID

  """Public-facing username (or 'handle') of the user."""
  username: String

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """Optional avatar URL."""
  avatarUrl: String

  """If true, the user has elevated privileges."""
  isAdmin: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""
The contents of this table should never be visible to the user. Contains data mostly related to authentication.
"""
type UserSecret implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: UUID!
  passwordHash: String
  passwordAttempts: Int!
  firstFailedPasswordAttempt: Datetime
  resetPasswordToken: String
  resetPasswordTokenGenerated: Datetime
  resetPasswordAttempts: Int!
  firstFailedResetPasswordAttempt: Datetime

  """Reads a single `User` that is related to this `UserSecret`."""
  user: User
}

"""
A condition to be used against `UserSecret` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserSecretCondition {
  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `passwordHash` field."""
  passwordHash: String

  """Checks for equality with the object’s `passwordAttempts` field."""
  passwordAttempts: Int

  """
  Checks for equality with the object’s `firstFailedPasswordAttempt` field.
  """
  firstFailedPasswordAttempt: Datetime

  """Checks for equality with the object’s `resetPasswordToken` field."""
  resetPasswordToken: String

  """
  Checks for equality with the object’s `resetPasswordTokenGenerated` field.
  """
  resetPasswordTokenGenerated: Datetime

  """Checks for equality with the object’s `resetPasswordAttempts` field."""
  resetPasswordAttempts: Int

  """
  Checks for equality with the object’s `firstFailedResetPasswordAttempt` field.
  """
  firstFailedResetPasswordAttempt: Datetime
}

"""An input for mutations affecting `UserSecret`"""
input UserSecretInput {
  userId: UUID!
  passwordHash: String
  passwordAttempts: Int
  firstFailedPasswordAttempt: Datetime
  resetPasswordToken: String
  resetPasswordTokenGenerated: Datetime
  resetPasswordAttempts: Int
  firstFailedResetPasswordAttempt: Datetime
}

"""
Represents an update to a `UserSecret`. Fields that are set will be updated.
"""
input UserSecretPatch {
  userId: UUID
  passwordHash: String
  passwordAttempts: Int
  firstFailedPasswordAttempt: Datetime
  resetPasswordToken: String
  resetPasswordTokenGenerated: Datetime
  resetPasswordAttempts: Int
  firstFailedResetPasswordAttempt: Datetime
}

"""A connection to a list of `UserSecret` values."""
type UserSecretsConnection {
  """A list of `UserSecret` objects."""
  nodes: [UserSecret]!

  """
  A list of edges which contains the `UserSecret` and cursor to aid in pagination.
  """
  edges: [UserSecretsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserSecret` you could get from the connection."""
  totalCount: Int
}

"""A `UserSecret` edge in the connection."""
type UserSecretsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserSecret` at the end of the edge."""
  node: UserSecret
}

"""Methods to use when ordering `UserSecret`."""
enum UserSecretsOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  PASSWORD_HASH_ASC
  PASSWORD_HASH_DESC
  PASSWORD_ATTEMPTS_ASC
  PASSWORD_ATTEMPTS_DESC
  FIRST_FAILED_PASSWORD_ATTEMPT_ASC
  FIRST_FAILED_PASSWORD_ATTEMPT_DESC
  RESET_PASSWORD_TOKEN_ASC
  RESET_PASSWORD_TOKEN_DESC
  RESET_PASSWORD_TOKEN_GENERATED_ASC
  RESET_PASSWORD_TOKEN_GENERATED_DESC
  RESET_PASSWORD_ATTEMPTS_ASC
  RESET_PASSWORD_ATTEMPTS_DESC
  FIRST_FAILED_RESET_PASSWORD_ATTEMPT_ASC
  FIRST_FAILED_RESET_PASSWORD_ATTEMPT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  NAME_ASC
  NAME_DESC
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  IS_ADMIN_ASC
  IS_ADMIN_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
