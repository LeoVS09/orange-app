"""A connection to a list of `City` values."""
type CitiesConnection {
   """A list of `City` objects."""
   nodes: [City]!

   """
   A list of edges which contains the `City` and cursor to aid in pagination.
   """
   edges: [CitiesEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `City` you could get from the connection."""
   totalCount: Int
}

"""A `City` edge in the connection."""
type CitiesEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `City` at the end of the edge."""
   node: City
}

"""Methods to use when ordering `City`."""
enum CitiesOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   NAME_ASC
   NAME_DESC
   COUNTRY_ID_ASC
   COUNTRY_ID_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

type City implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!
   name: String!
   countryId: UUID!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads a single `Country` that is related to this `City`."""
   country: Country

   """Reads and enables pagination through a set of `University`."""
   universities(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `University`."""
      orderBy: [UniversitiesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: UniversityCondition
   ): UniversitiesConnection!

   """Reads and enables pagination through a set of `Profile`."""
   profiles(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Profile`."""
      orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProfileCondition
   ): ProfilesConnection!
}

"""
A condition to be used against `City` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CityCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `name` field."""
   name: String

   """Checks for equality with the object’s `countryId` field."""
   countryId: UUID

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `City`"""
input CityInput {
   name: String!
   countryId: UUID!
}

"""Represents an update to a `City`. Fields that are set will be updated."""
input CityPatch {
   name: String
   countryId: UUID
}

"""Code editor, each row define one version of some code editor"""
type CodeEditor implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!

   """Name of code editor. Use official name, like Visual Studio"""
   name: String!

   """Alias for code editor. Mostly used as search keyword, like VSC"""
   alias: String

   """
   Version of code editor. Version is used for define which margin version is will be used, like Visual Studio 2017
   """
   version: String!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads and enables pagination through a set of `ProfilesCodeEditor`."""
   profilesCodeEditors(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ProfilesCodeEditor`."""
      orderBy: [ProfilesCodeEditorsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProfilesCodeEditorCondition
   ): ProfilesCodeEditorsConnection!
}

"""
A condition to be used against `CodeEditor` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CodeEditorCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `name` field."""
   name: String

   """Checks for equality with the object’s `alias` field."""
   alias: String

   """Checks for equality with the object’s `version` field."""
   version: String

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `CodeEditor`"""
input CodeEditorInput {
   """Name of code editor. Use official name, like Visual Studio"""
   name: String!

   """Alias for code editor. Mostly used as search keyword, like VSC"""
   alias: String

   """
   Version of code editor. Version is used for define which margin version is will be used, like Visual Studio 2017
   """
   version: String!
}

"""
Represents an update to a `CodeEditor`. Fields that are set will be updated.
"""
input CodeEditorPatch {
   """Name of code editor. Use official name, like Visual Studio"""
   name: String

   """Alias for code editor. Mostly used as search keyword, like VSC"""
   alias: String

   """
   Version of code editor. Version is used for define which margin version is will be used, like Visual Studio 2017
   """
   version: String
}

"""A connection to a list of `CodeEditor` values."""
type CodeEditorsConnection {
   """A list of `CodeEditor` objects."""
   nodes: [CodeEditor]!

   """
   A list of edges which contains the `CodeEditor` and cursor to aid in pagination.
   """
   edges: [CodeEditorsEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `CodeEditor` you could get from the connection."""
   totalCount: Int
}

"""A `CodeEditor` edge in the connection."""
type CodeEditorsEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `CodeEditor` at the end of the edge."""
   node: CodeEditor
}

"""Methods to use when ordering `CodeEditor`."""
enum CodeEditorsOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   NAME_ASC
   NAME_DESC
   ALIAS_ASC
   ALIAS_DESC
   VERSION_ASC
   VERSION_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

"""Compilers for programming languages"""
type Compiler implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!

   """Compiler name"""
   name: String!

   """Alias of compiler. Mostly used as search word, like gcc"""
   alias: String

   """
   Compiler full code name aka "g++.exe (i686-posix-dwarf-rev0, Built by MinGW-W64 project) 8.1.0"
   """
   code: String

   """Compiler version"""
   version: String!

   """Language which compile"""
   languageId: UUID!
   comment: String!

   """Is this interpreter"""
   isInterpreter: Boolean
   createdAt: Datetime!
   updatedAt: Datetime!

   """
   Reads a single `ProgrammingLanguage` that is related to this `Compiler`.
   """
   language: ProgrammingLanguage

   """Reads and enables pagination through a set of `Solution`."""
   solutions(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Solution`."""
      orderBy: [SolutionsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: SolutionCondition
   ): SolutionsConnection!
}

"""
A condition to be used against `Compiler` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CompilerCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `name` field."""
   name: String

   """Checks for equality with the object’s `alias` field."""
   alias: String

   """Checks for equality with the object’s `code` field."""
   code: String

   """Checks for equality with the object’s `version` field."""
   version: String

   """Checks for equality with the object’s `languageId` field."""
   languageId: UUID

   """Checks for equality with the object’s `comment` field."""
   comment: String

   """Checks for equality with the object’s `isInterpreter` field."""
   isInterpreter: Boolean

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `Compiler`"""
input CompilerInput {
   """Compiler name"""
   name: String!

   """
   Compiler full code name aka "g++.exe (i686-posix-dwarf-rev0, Built by MinGW-W64 project) 8.1.0"
   """
   code: String

   """Compiler version"""
   version: String!

   """Language which compile"""
   languageId: UUID!
   comment: String!
}

"""
Represents an update to a `Compiler`. Fields that are set will be updated.
"""
input CompilerPatch {
   """Compiler name"""
   name: String

   """
   Compiler full code name aka "g++.exe (i686-posix-dwarf-rev0, Built by MinGW-W64 project) 8.1.0"
   """
   code: String

   """Compiler version"""
   version: String

   """Language which compile"""
   languageId: UUID
   comment: String
}

"""A connection to a list of `Compiler` values."""
type CompilersConnection {
   """A list of `Compiler` objects."""
   nodes: [Compiler]!

   """
   A list of edges which contains the `Compiler` and cursor to aid in pagination.
   """
   edges: [CompilersEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `Compiler` you could get from the connection."""
   totalCount: Int
}

"""A `Compiler` edge in the connection."""
type CompilersEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `Compiler` at the end of the edge."""
   node: Compiler
}

"""Methods to use when ordering `Compiler`."""
enum CompilersOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   NAME_ASC
   NAME_DESC
   ALIAS_ASC
   ALIAS_DESC
   CODE_ASC
   CODE_DESC
   VERSION_ASC
   VERSION_DESC
   LANGUAGE_ID_ASC
   LANGUAGE_ID_DESC
   COMMENT_ASC
   COMMENT_DESC
   IS_INTERPRETER_ASC
   IS_INTERPRETER_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

type Contest implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!
   name: String!
   text: String
   creatorId: UUID!
   startDate: Datetime
   endDate: Datetime
   startPublicationDate: Datetime
   endPublicationDate: Datetime
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads a single `User` that is related to this `Contest`."""
   creator: User

   """Reads and enables pagination through a set of `ContestsTeam`."""
   contestsTeams(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ContestsTeam`."""
      orderBy: [ContestsTeamsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ContestsTeamCondition
   ): ContestsTeamsConnection!

   """Reads and enables pagination through a set of `ContestsProfile`."""
   contestsProfiles(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ContestsProfile`."""
      orderBy: [ContestsProfilesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ContestsProfileCondition
   ): ContestsProfilesConnection!
}

"""
A condition to be used against `Contest` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ContestCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `name` field."""
   name: String

   """Checks for equality with the object’s `text` field."""
   text: String

   """Checks for equality with the object’s `creatorId` field."""
   creatorId: UUID

   """Checks for equality with the object’s `startDate` field."""
   startDate: Datetime

   """Checks for equality with the object’s `endDate` field."""
   endDate: Datetime

   """Checks for equality with the object’s `startPublicationDate` field."""
   startPublicationDate: Datetime

   """Checks for equality with the object’s `endPublicationDate` field."""
   endPublicationDate: Datetime

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `Contest`"""
input ContestInput {
   name: String!
   text: String
   creatorId: UUID!
   startDate: Datetime
   endDate: Datetime
   startPublicationDate: Datetime
   endPublicationDate: Datetime
}

"""
Represents an update to a `Contest`. Fields that are set will be updated.
"""
input ContestPatch {
   name: String
   text: String
   creatorId: UUID
   startDate: Datetime
   endDate: Datetime
   startPublicationDate: Datetime
   endPublicationDate: Datetime
}

"""A connection to a list of `Contest` values."""
type ContestsConnection {
   """A list of `Contest` objects."""
   nodes: [Contest]!

   """
   A list of edges which contains the `Contest` and cursor to aid in pagination.
   """
   edges: [ContestsEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `Contest` you could get from the connection."""
   totalCount: Int
}

"""A `Contest` edge in the connection."""
type ContestsEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `Contest` at the end of the edge."""
   node: Contest
}

"""Methods to use when ordering `Contest`."""
enum ContestsOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   NAME_ASC
   NAME_DESC
   TEXT_ASC
   TEXT_DESC
   CREATOR_ID_ASC
   CREATOR_ID_DESC
   START_DATE_ASC
   START_DATE_DESC
   END_DATE_ASC
   END_DATE_DESC
   START_PUBLICATION_DATE_ASC
   START_PUBLICATION_DATE_DESC
   END_PUBLICATION_DATE_ASC
   END_PUBLICATION_DATE_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

type ContestsProfile implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   contestId: UUID!
   profileId: UUID!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads a single `Contest` that is related to this `ContestsProfile`."""
   contest: Contest

   """Reads a single `Profile` that is related to this `ContestsProfile`."""
   profile: Profile
}

"""
A condition to be used against `ContestsProfile` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ContestsProfileCondition {
   """Checks for equality with the object’s `contestId` field."""
   contestId: UUID

   """Checks for equality with the object’s `profileId` field."""
   profileId: UUID

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `ContestsProfile`"""
input ContestsProfileInput {
   contestId: UUID!
   profileId: UUID!
}

"""A connection to a list of `ContestsProfile` values."""
type ContestsProfilesConnection {
   """A list of `ContestsProfile` objects."""
   nodes: [ContestsProfile]!

   """
   A list of edges which contains the `ContestsProfile` and cursor to aid in pagination.
   """
   edges: [ContestsProfilesEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """
   The count of *all* `ContestsProfile` you could get from the connection.
   """
   totalCount: Int
}

"""A `ContestsProfile` edge in the connection."""
type ContestsProfilesEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `ContestsProfile` at the end of the edge."""
   node: ContestsProfile
}

"""Methods to use when ordering `ContestsProfile`."""
enum ContestsProfilesOrderBy {
   NATURAL
   CONTEST_ID_ASC
   CONTEST_ID_DESC
   PROFILE_ID_ASC
   PROFILE_ID_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

type ContestsTeam implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   contestId: UUID!
   teamId: UUID!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads a single `Contest` that is related to this `ContestsTeam`."""
   contest: Contest

   """Reads a single `Team` that is related to this `ContestsTeam`."""
   team: Team
}

"""
A condition to be used against `ContestsTeam` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ContestsTeamCondition {
   """Checks for equality with the object’s `contestId` field."""
   contestId: UUID

   """Checks for equality with the object’s `teamId` field."""
   teamId: UUID

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `ContestsTeam`"""
input ContestsTeamInput {
   contestId: UUID!
   teamId: UUID!
}

"""A connection to a list of `ContestsTeam` values."""
type ContestsTeamsConnection {
   """A list of `ContestsTeam` objects."""
   nodes: [ContestsTeam]!

   """
   A list of edges which contains the `ContestsTeam` and cursor to aid in pagination.
   """
   edges: [ContestsTeamsEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `ContestsTeam` you could get from the connection."""
   totalCount: Int
}

"""A `ContestsTeam` edge in the connection."""
type ContestsTeamsEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `ContestsTeam` at the end of the edge."""
   node: ContestsTeam
}

"""Methods to use when ordering `ContestsTeam`."""
enum ContestsTeamsOrderBy {
   NATURAL
   CONTEST_ID_ASC
   CONTEST_ID_DESC
   TEAM_ID_ASC
   TEAM_ID_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

"""A connection to a list of `Country` values."""
type CountriesConnection {
   """A list of `Country` objects."""
   nodes: [Country]!

   """
   A list of edges which contains the `Country` and cursor to aid in pagination.
   """
   edges: [CountriesEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `Country` you could get from the connection."""
   totalCount: Int
}

"""A `Country` edge in the connection."""
type CountriesEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `Country` at the end of the edge."""
   node: Country
}

"""Methods to use when ordering `Country`."""
enum CountriesOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   NAME_ASC
   NAME_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

type Country implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!
   name: String!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads and enables pagination through a set of `City`."""
   cities(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `City`."""
      orderBy: [CitiesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: CityCondition
   ): CitiesConnection!
}

"""
A condition to be used against `Country` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CountryCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `name` field."""
   name: String

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `Country`"""
input CountryInput {
   name: String!
}

"""
Represents an update to a `Country`. Fields that are set will be updated.
"""
input CountryPatch {
   name: String
}

"""All input for the create `City` mutation."""
input CreateCityInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `City` to be created by this mutation."""
   city: CityInput!
}

"""The output of our create `City` mutation."""
type CreateCityPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `City` that was created by this mutation."""
   city: City

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Country` that is related to this `City`."""
   country: Country

   """An edge for our `City`. May be used by Relay 1."""
   cityEdge(
      """The method to use when ordering `City`."""
      orderBy: [CitiesOrderBy!] = PRIMARY_KEY_ASC
   ): CitiesEdge
}

"""All input for the create `CodeEditor` mutation."""
input CreateCodeEditorInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `CodeEditor` to be created by this mutation."""
   codeEditor: CodeEditorInput!
}

"""The output of our create `CodeEditor` mutation."""
type CreateCodeEditorPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `CodeEditor` that was created by this mutation."""
   codeEditor: CodeEditor

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `CodeEditor`. May be used by Relay 1."""
   codeEditorEdge(
      """The method to use when ordering `CodeEditor`."""
      orderBy: [CodeEditorsOrderBy!] = PRIMARY_KEY_ASC
   ): CodeEditorsEdge
}

"""All input for the create `Compiler` mutation."""
input CreateCompilerInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `Compiler` to be created by this mutation."""
   compiler: CompilerInput!
}

"""The output of our create `Compiler` mutation."""
type CreateCompilerPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Compiler` that was created by this mutation."""
   compiler: Compiler

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """
   Reads a single `ProgrammingLanguage` that is related to this `Compiler`.
   """
   language: ProgrammingLanguage

   """An edge for our `Compiler`. May be used by Relay 1."""
   compilerEdge(
      """The method to use when ordering `Compiler`."""
      orderBy: [CompilersOrderBy!] = PRIMARY_KEY_ASC
   ): CompilersEdge
}

"""All input for the create `Contest` mutation."""
input CreateContestInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `Contest` to be created by this mutation."""
   contest: ContestInput!
}

"""The output of our create `Contest` mutation."""
type CreateContestPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Contest` that was created by this mutation."""
   contest: Contest

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `User` that is related to this `Contest`."""
   creator: User

   """An edge for our `Contest`. May be used by Relay 1."""
   contestEdge(
      """The method to use when ordering `Contest`."""
      orderBy: [ContestsOrderBy!] = PRIMARY_KEY_ASC
   ): ContestsEdge
}

"""All input for the create `ContestsProfile` mutation."""
input CreateContestsProfileInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `ContestsProfile` to be created by this mutation."""
   contestsProfile: ContestsProfileInput!
}

"""The output of our create `ContestsProfile` mutation."""
type CreateContestsProfilePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ContestsProfile` that was created by this mutation."""
   contestsProfile: ContestsProfile

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Contest` that is related to this `ContestsProfile`."""
   contest: Contest

   """Reads a single `Profile` that is related to this `ContestsProfile`."""
   profile: Profile

   """An edge for our `ContestsProfile`. May be used by Relay 1."""
   contestsProfileEdge(
      """The method to use when ordering `ContestsProfile`."""
      orderBy: [ContestsProfilesOrderBy!] = PRIMARY_KEY_ASC
   ): ContestsProfilesEdge
}

"""All input for the create `ContestsTeam` mutation."""
input CreateContestsTeamInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `ContestsTeam` to be created by this mutation."""
   contestsTeam: ContestsTeamInput!
}

"""The output of our create `ContestsTeam` mutation."""
type CreateContestsTeamPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ContestsTeam` that was created by this mutation."""
   contestsTeam: ContestsTeam

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Contest` that is related to this `ContestsTeam`."""
   contest: Contest

   """Reads a single `Team` that is related to this `ContestsTeam`."""
   team: Team

   """An edge for our `ContestsTeam`. May be used by Relay 1."""
   contestsTeamEdge(
      """The method to use when ordering `ContestsTeam`."""
      orderBy: [ContestsTeamsOrderBy!] = PRIMARY_KEY_ASC
   ): ContestsTeamsEdge
}

"""All input for the create `Country` mutation."""
input CreateCountryInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `Country` to be created by this mutation."""
   country: CountryInput!
}

"""The output of our create `Country` mutation."""
type CreateCountryPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Country` that was created by this mutation."""
   country: Country

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `Country`. May be used by Relay 1."""
   countryEdge(
      """The method to use when ordering `Country`."""
      orderBy: [CountriesOrderBy!] = PRIMARY_KEY_ASC
   ): CountriesEdge
}

"""All input for the create `FailType` mutation."""
input CreateFailTypeInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `FailType` to be created by this mutation."""
   failType: FailTypeInput!
}

"""The output of our create `FailType` mutation."""
type CreateFailTypePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `FailType` that was created by this mutation."""
   failType: FailType

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `FailType`. May be used by Relay 1."""
   failTypeEdge(
      """The method to use when ordering `FailType`."""
      orderBy: [FailTypesOrderBy!] = PRIMARY_KEY_ASC
   ): FailTypesEdge
}

"""All input for the create `Language` mutation."""
input CreateLanguageInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `Language` to be created by this mutation."""
   language: LanguageInput!
}

"""The output of our create `Language` mutation."""
type CreateLanguagePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Language` that was created by this mutation."""
   language: Language

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `Language`. May be used by Relay 1."""
   languageEdge(
      """The method to use when ordering `Language`."""
      orderBy: [LanguagesOrderBy!] = PRIMARY_KEY_ASC
   ): LanguagesEdge
}

"""All input for the create `Problem` mutation."""
input CreateProblemInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `Problem` to be created by this mutation."""
   problem: ProblemInput!
}

"""The output of our create `Problem` mutation."""
type CreateProblemPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Problem` that was created by this mutation."""
   problem: Problem

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `ProgramInputType` that is related to this `Problem`."""
   inputType: ProgramInputType

   """Reads a single `ProgramOutputType` that is related to this `Problem`."""
   outputType: ProgramOutputType

   """Reads a single `Profile` that is related to this `Problem`."""
   author: Profile

   """Reads a single `Profile` that is related to this `Problem`."""
   tester: Profile

   """An edge for our `Problem`. May be used by Relay 1."""
   problemEdge(
      """The method to use when ordering `Problem`."""
      orderBy: [ProblemsOrderBy!] = PRIMARY_KEY_ASC
   ): ProblemsEdge
}

"""All input for the create `ProblemsTag` mutation."""
input CreateProblemsTagInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `ProblemsTag` to be created by this mutation."""
   problemsTag: ProblemsTagInput!
}

"""The output of our create `ProblemsTag` mutation."""
type CreateProblemsTagPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ProblemsTag` that was created by this mutation."""
   problemsTag: ProblemsTag

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Problem` that is related to this `ProblemsTag`."""
   problem: Problem

   """Reads a single `Tag` that is related to this `ProblemsTag`."""
   tag: Tag

   """An edge for our `ProblemsTag`. May be used by Relay 1."""
   problemsTagEdge(
      """The method to use when ordering `ProblemsTag`."""
      orderBy: [ProblemsTagsOrderBy!] = PRIMARY_KEY_ASC
   ): ProblemsTagsEdge
}

"""All input for the create `Profile` mutation."""
input CreateProfileInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `Profile` to be created by this mutation."""
   profile: ProfileInput!
}

"""The output of our create `Profile` mutation."""
type CreateProfilePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Profile` that was created by this mutation."""
   profile: Profile

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `User` that is related to this `Profile`."""
   user: User

   """Reads a single `City` that is related to this `Profile`."""
   city: City

   """Reads a single `University` that is related to this `Profile`."""
   university: University

   """An edge for our `Profile`. May be used by Relay 1."""
   profileEdge(
      """The method to use when ordering `Profile`."""
      orderBy: [ProfilesOrderBy!] = PRIMARY_KEY_ASC
   ): ProfilesEdge
}

"""All input for the create `ProfilesCodeEditor` mutation."""
input CreateProfilesCodeEditorInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `ProfilesCodeEditor` to be created by this mutation."""
   profilesCodeEditor: ProfilesCodeEditorInput!
}

"""The output of our create `ProfilesCodeEditor` mutation."""
type CreateProfilesCodeEditorPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ProfilesCodeEditor` that was created by this mutation."""
   profilesCodeEditor: ProfilesCodeEditor

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Profile` that is related to this `ProfilesCodeEditor`."""
   profile: Profile

   """
   Reads a single `CodeEditor` that is related to this `ProfilesCodeEditor`.
   """
   codeEditor: CodeEditor

   """An edge for our `ProfilesCodeEditor`. May be used by Relay 1."""
   profilesCodeEditorEdge(
      """The method to use when ordering `ProfilesCodeEditor`."""
      orderBy: [ProfilesCodeEditorsOrderBy!] = PRIMARY_KEY_ASC
   ): ProfilesCodeEditorsEdge
}

"""All input for the create `ProfilesProgrammingLanguage` mutation."""
input CreateProfilesProgrammingLanguageInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `ProfilesProgrammingLanguage` to be created by this mutation."""
   profilesProgrammingLanguage: ProfilesProgrammingLanguageInput!
}

"""The output of our create `ProfilesProgrammingLanguage` mutation."""
type CreateProfilesProgrammingLanguagePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ProfilesProgrammingLanguage` that was created by this mutation."""
   profilesProgrammingLanguage: ProfilesProgrammingLanguage

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """
   Reads a single `Profile` that is related to this `ProfilesProgrammingLanguage`.
   """
   profile: Profile

   """
   Reads a single `ProgrammingLanguage` that is related to this `ProfilesProgrammingLanguage`.
   """
   language: ProgrammingLanguage

   """An edge for our `ProfilesProgrammingLanguage`. May be used by Relay 1."""
   profilesProgrammingLanguageEdge(
      """The method to use when ordering `ProfilesProgrammingLanguage`."""
      orderBy: [ProfilesProgrammingLanguagesOrderBy!] = PRIMARY_KEY_ASC
   ): ProfilesProgrammingLanguagesEdge
}

"""All input for the create `ProfilesTravel` mutation."""
input CreateProfilesTravelInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `ProfilesTravel` to be created by this mutation."""
   profilesTravel: ProfilesTravelInput!
}

"""The output of our create `ProfilesTravel` mutation."""
type CreateProfilesTravelPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ProfilesTravel` that was created by this mutation."""
   profilesTravel: ProfilesTravel

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Profile` that is related to this `ProfilesTravel`."""
   profile: Profile

   """Reads a single `Travel` that is related to this `ProfilesTravel`."""
   travel: Travel

   """An edge for our `ProfilesTravel`. May be used by Relay 1."""
   profilesTravelEdge(
      """The method to use when ordering `ProfilesTravel`."""
      orderBy: [ProfilesTravelsOrderBy!] = PRIMARY_KEY_ASC
   ): ProfilesTravelsEdge
}

"""All input for the create `ProgramInputType` mutation."""
input CreateProgramInputTypeInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `ProgramInputType` to be created by this mutation."""
   programInputType: ProgramInputTypeInput!
}

"""The output of our create `ProgramInputType` mutation."""
type CreateProgramInputTypePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ProgramInputType` that was created by this mutation."""
   programInputType: ProgramInputType

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `ProgramInputType`. May be used by Relay 1."""
   programInputTypeEdge(
      """The method to use when ordering `ProgramInputType`."""
      orderBy: [ProgramInputTypesOrderBy!] = PRIMARY_KEY_ASC
   ): ProgramInputTypesEdge
}

"""All input for the create `ProgrammingLanguage` mutation."""
input CreateProgrammingLanguageInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `ProgrammingLanguage` to be created by this mutation."""
   programmingLanguage: ProgrammingLanguageInput!
}

"""The output of our create `ProgrammingLanguage` mutation."""
type CreateProgrammingLanguagePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ProgrammingLanguage` that was created by this mutation."""
   programmingLanguage: ProgrammingLanguage

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `ProgrammingLanguage`. May be used by Relay 1."""
   programmingLanguageEdge(
      """The method to use when ordering `ProgrammingLanguage`."""
      orderBy: [ProgrammingLanguagesOrderBy!] = PRIMARY_KEY_ASC
   ): ProgrammingLanguagesEdge
}

"""All input for the create `ProgramOutputType` mutation."""
input CreateProgramOutputTypeInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `ProgramOutputType` to be created by this mutation."""
   programOutputType: ProgramOutputTypeInput!
}

"""The output of our create `ProgramOutputType` mutation."""
type CreateProgramOutputTypePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ProgramOutputType` that was created by this mutation."""
   programOutputType: ProgramOutputType

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `ProgramOutputType`. May be used by Relay 1."""
   programOutputTypeEdge(
      """The method to use when ordering `ProgramOutputType`."""
      orderBy: [ProgramOutputTypesOrderBy!] = PRIMARY_KEY_ASC
   ): ProgramOutputTypesEdge
}

"""All input for the create `Solution` mutation."""
input CreateSolutionInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `Solution` to be created by this mutation."""
   solution: SolutionInput!
}

"""The output of our create `Solution` mutation."""
type CreateSolutionPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Solution` that was created by this mutation."""
   solution: Solution

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Problem` that is related to this `Solution`."""
   problem: Problem

   """Reads a single `Compiler` that is related to this `Solution`."""
   compiler: Compiler

   """An edge for our `Solution`. May be used by Relay 1."""
   solutionEdge(
      """The method to use when ordering `Solution`."""
      orderBy: [SolutionsOrderBy!] = PRIMARY_KEY_ASC
   ): SolutionsEdge
}

"""All input for the create `SolutionRun` mutation."""
input CreateSolutionRunInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `SolutionRun` to be created by this mutation."""
   solutionRun: SolutionRunInput!
}

"""The output of our create `SolutionRun` mutation."""
type CreateSolutionRunPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `SolutionRun` that was created by this mutation."""
   solutionRun: SolutionRun

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Solution` that is related to this `SolutionRun`."""
   solution: Solution

   """Reads a single `Test` that is related to this `SolutionRun`."""
   failedTest: Test

   """Reads a single `FailType` that is related to this `SolutionRun`."""
   failTypeByTypeOfFail: FailType

   """An edge for our `SolutionRun`. May be used by Relay 1."""
   solutionRunEdge(
      """The method to use when ordering `SolutionRun`."""
      orderBy: [SolutionRunsOrderBy!] = PRIMARY_KEY_ASC
   ): SolutionRunsEdge
}

"""All input for the create `Tag` mutation."""
input CreateTagInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `Tag` to be created by this mutation."""
   tag: TagInput!
}

"""The output of our create `Tag` mutation."""
type CreateTagPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Tag` that was created by this mutation."""
   tag: Tag

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `Tag`. May be used by Relay 1."""
   tagEdge(
      """The method to use when ordering `Tag`."""
      orderBy: [TagsOrderBy!] = PRIMARY_KEY_ASC
   ): TagsEdge
}

"""All input for the create `Team` mutation."""
input CreateTeamInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `Team` to be created by this mutation."""
   team: TeamInput!
}

"""The output of our create `Team` mutation."""
type CreateTeamPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Team` that was created by this mutation."""
   team: Team

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `Team`. May be used by Relay 1."""
   teamEdge(
      """The method to use when ordering `Team`."""
      orderBy: [TeamsOrderBy!] = PRIMARY_KEY_ASC
   ): TeamsEdge
}

"""All input for the create `TeamsProfile` mutation."""
input CreateTeamsProfileInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `TeamsProfile` to be created by this mutation."""
   teamsProfile: TeamsProfileInput!
}

"""The output of our create `TeamsProfile` mutation."""
type CreateTeamsProfilePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `TeamsProfile` that was created by this mutation."""
   teamsProfile: TeamsProfile

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Team` that is related to this `TeamsProfile`."""
   team: Team

   """Reads a single `Profile` that is related to this `TeamsProfile`."""
   profile: Profile

   """An edge for our `TeamsProfile`. May be used by Relay 1."""
   teamsProfileEdge(
      """The method to use when ordering `TeamsProfile`."""
      orderBy: [TeamsProfilesOrderBy!] = PRIMARY_KEY_ASC
   ): TeamsProfilesEdge
}

"""All input for the create `Test` mutation."""
input CreateTestInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `Test` to be created by this mutation."""
   test: TestInput!
}

"""The output of our create `Test` mutation."""
type CreateTestPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Test` that was created by this mutation."""
   test: Test

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Problem` that is related to this `Test`."""
   problem: Problem

   """An edge for our `Test`. May be used by Relay 1."""
   testEdge(
      """The method to use when ordering `Test`."""
      orderBy: [TestsOrderBy!] = PRIMARY_KEY_ASC
   ): TestsEdge
}

"""All input for the create `Travel` mutation."""
input CreateTravelInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `Travel` to be created by this mutation."""
   travel: TravelInput!
}

"""The output of our create `Travel` mutation."""
type CreateTravelPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Travel` that was created by this mutation."""
   travel: Travel

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `Travel`. May be used by Relay 1."""
   travelEdge(
      """The method to use when ordering `Travel`."""
      orderBy: [TravelsOrderBy!] = PRIMARY_KEY_ASC
   ): TravelsEdge
}

"""All input for the create `University` mutation."""
input CreateUniversityInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `University` to be created by this mutation."""
   university: UniversityInput!
}

"""The output of our create `University` mutation."""
type CreateUniversityPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `University` that was created by this mutation."""
   university: University

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `City` that is related to this `University`."""
   city: City

   """An edge for our `University`. May be used by Relay 1."""
   universityEdge(
      """The method to use when ordering `University`."""
      orderBy: [UniversitiesOrderBy!] = PRIMARY_KEY_ASC
   ): UniversitiesEdge
}

"""All input for the create `UserEmail` mutation."""
input CreateUserEmailInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """The `UserEmail` to be created by this mutation."""
   userEmail: UserEmailInput!
}

"""The output of our create `UserEmail` mutation."""
type CreateUserEmailPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `UserEmail` that was created by this mutation."""
   userEmail: UserEmail

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `User` that is related to this `UserEmail`."""
   user: User

   """An edge for our `UserEmail`. May be used by Relay 1."""
   userEmailEdge(
      """The method to use when ordering `UserEmail`."""
      orderBy: [UserEmailsOrderBy!] = PRIMARY_KEY_ASC
   ): UserEmailsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteCityByNodeId` mutation."""
input DeleteCityByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `City` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteCity` mutation."""
input DeleteCityInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `City` mutation."""
type DeleteCityPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `City` that was deleted by this mutation."""
   city: City
   deletedCityNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Country` that is related to this `City`."""
   country: Country

   """An edge for our `City`. May be used by Relay 1."""
   cityEdge(
      """The method to use when ordering `City`."""
      orderBy: [CitiesOrderBy!] = PRIMARY_KEY_ASC
   ): CitiesEdge
}

"""All input for the `deleteCodeEditorByNameAndVersion` mutation."""
input DeleteCodeEditorByNameAndVersionInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """Name of code editor. Use official name, like Visual Studio"""
   name: String!

   """
   Version of code editor. Version is used for define which margin version is will be used, like Visual Studio 2017
   """
   version: String!
}

"""All input for the `deleteCodeEditorByNodeId` mutation."""
input DeleteCodeEditorByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `CodeEditor` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteCodeEditorByVersion` mutation."""
input DeleteCodeEditorByVersionInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   Version of code editor. Version is used for define which margin version is will be used, like Visual Studio 2017
   """
   version: String!
}

"""All input for the `deleteCodeEditor` mutation."""
input DeleteCodeEditorInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `CodeEditor` mutation."""
type DeleteCodeEditorPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `CodeEditor` that was deleted by this mutation."""
   codeEditor: CodeEditor
   deletedCodeEditorNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `CodeEditor`. May be used by Relay 1."""
   codeEditorEdge(
      """The method to use when ordering `CodeEditor`."""
      orderBy: [CodeEditorsOrderBy!] = PRIMARY_KEY_ASC
   ): CodeEditorsEdge
}

"""All input for the `deleteCompilerByNameAndVersion` mutation."""
input DeleteCompilerByNameAndVersionInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """Compiler name"""
   name: String!

   """Compiler version"""
   version: String!
}

"""All input for the `deleteCompilerByNodeId` mutation."""
input DeleteCompilerByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Compiler` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteCompilerByVersion` mutation."""
input DeleteCompilerByVersionInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """Compiler version"""
   version: String!
}

"""All input for the `deleteCompiler` mutation."""
input DeleteCompilerInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `Compiler` mutation."""
type DeleteCompilerPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Compiler` that was deleted by this mutation."""
   compiler: Compiler
   deletedCompilerNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """
   Reads a single `ProgrammingLanguage` that is related to this `Compiler`.
   """
   language: ProgrammingLanguage

   """An edge for our `Compiler`. May be used by Relay 1."""
   compilerEdge(
      """The method to use when ordering `Compiler`."""
      orderBy: [CompilersOrderBy!] = PRIMARY_KEY_ASC
   ): CompilersEdge
}

"""All input for the `deleteContestByNodeId` mutation."""
input DeleteContestByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Contest` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteContest` mutation."""
input DeleteContestInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `Contest` mutation."""
type DeleteContestPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Contest` that was deleted by this mutation."""
   contest: Contest
   deletedContestNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `User` that is related to this `Contest`."""
   creator: User

   """An edge for our `Contest`. May be used by Relay 1."""
   contestEdge(
      """The method to use when ordering `Contest`."""
      orderBy: [ContestsOrderBy!] = PRIMARY_KEY_ASC
   ): ContestsEdge
}

"""All input for the `deleteContestsProfileByNodeId` mutation."""
input DeleteContestsProfileByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `ContestsProfile` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteContestsProfile` mutation."""
input DeleteContestsProfileInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   contestId: UUID!
   profileId: UUID!
}

"""The output of our delete `ContestsProfile` mutation."""
type DeleteContestsProfilePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ContestsProfile` that was deleted by this mutation."""
   contestsProfile: ContestsProfile
   deletedContestsProfileNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Contest` that is related to this `ContestsProfile`."""
   contest: Contest

   """Reads a single `Profile` that is related to this `ContestsProfile`."""
   profile: Profile

   """An edge for our `ContestsProfile`. May be used by Relay 1."""
   contestsProfileEdge(
      """The method to use when ordering `ContestsProfile`."""
      orderBy: [ContestsProfilesOrderBy!] = PRIMARY_KEY_ASC
   ): ContestsProfilesEdge
}

"""All input for the `deleteContestsTeamByNodeId` mutation."""
input DeleteContestsTeamByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `ContestsTeam` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteContestsTeam` mutation."""
input DeleteContestsTeamInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   contestId: UUID!
   teamId: UUID!
}

"""The output of our delete `ContestsTeam` mutation."""
type DeleteContestsTeamPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ContestsTeam` that was deleted by this mutation."""
   contestsTeam: ContestsTeam
   deletedContestsTeamNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Contest` that is related to this `ContestsTeam`."""
   contest: Contest

   """Reads a single `Team` that is related to this `ContestsTeam`."""
   team: Team

   """An edge for our `ContestsTeam`. May be used by Relay 1."""
   contestsTeamEdge(
      """The method to use when ordering `ContestsTeam`."""
      orderBy: [ContestsTeamsOrderBy!] = PRIMARY_KEY_ASC
   ): ContestsTeamsEdge
}

"""All input for the `deleteCountryByNodeId` mutation."""
input DeleteCountryByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Country` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteCountry` mutation."""
input DeleteCountryInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `Country` mutation."""
type DeleteCountryPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Country` that was deleted by this mutation."""
   country: Country
   deletedCountryNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `Country`. May be used by Relay 1."""
   countryEdge(
      """The method to use when ordering `Country`."""
      orderBy: [CountriesOrderBy!] = PRIMARY_KEY_ASC
   ): CountriesEdge
}

"""All input for the `deleteFailTypeByCode` mutation."""
input DeleteFailTypeByCodeInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   code: Int!
}

"""All input for the `deleteFailTypeByNodeId` mutation."""
input DeleteFailTypeByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `FailType` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteFailType` mutation."""
input DeleteFailTypeInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `FailType` mutation."""
type DeleteFailTypePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `FailType` that was deleted by this mutation."""
   failType: FailType
   deletedFailTypeNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `FailType`. May be used by Relay 1."""
   failTypeEdge(
      """The method to use when ordering `FailType`."""
      orderBy: [FailTypesOrderBy!] = PRIMARY_KEY_ASC
   ): FailTypesEdge
}

"""All input for the `deleteLanguageByNodeId` mutation."""
input DeleteLanguageByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Language` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteLanguage` mutation."""
input DeleteLanguageInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `Language` mutation."""
type DeleteLanguagePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Language` that was deleted by this mutation."""
   language: Language
   deletedLanguageNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `Language`. May be used by Relay 1."""
   languageEdge(
      """The method to use when ordering `Language`."""
      orderBy: [LanguagesOrderBy!] = PRIMARY_KEY_ASC
   ): LanguagesEdge
}

"""All input for the `deleteProblemByNodeId` mutation."""
input DeleteProblemByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Problem` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteProblem` mutation."""
input DeleteProblemInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `Problem` mutation."""
type DeleteProblemPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Problem` that was deleted by this mutation."""
   problem: Problem
   deletedProblemNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `ProgramInputType` that is related to this `Problem`."""
   inputType: ProgramInputType

   """Reads a single `ProgramOutputType` that is related to this `Problem`."""
   outputType: ProgramOutputType

   """Reads a single `Profile` that is related to this `Problem`."""
   author: Profile

   """Reads a single `Profile` that is related to this `Problem`."""
   tester: Profile

   """An edge for our `Problem`. May be used by Relay 1."""
   problemEdge(
      """The method to use when ordering `Problem`."""
      orderBy: [ProblemsOrderBy!] = PRIMARY_KEY_ASC
   ): ProblemsEdge
}

"""All input for the `deleteProblemsTagByNodeId` mutation."""
input DeleteProblemsTagByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `ProblemsTag` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteProblemsTag` mutation."""
input DeleteProblemsTagInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   problemId: UUID!
   tagId: UUID!
}

"""The output of our delete `ProblemsTag` mutation."""
type DeleteProblemsTagPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ProblemsTag` that was deleted by this mutation."""
   problemsTag: ProblemsTag
   deletedProblemsTagNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Problem` that is related to this `ProblemsTag`."""
   problem: Problem

   """Reads a single `Tag` that is related to this `ProblemsTag`."""
   tag: Tag

   """An edge for our `ProblemsTag`. May be used by Relay 1."""
   problemsTagEdge(
      """The method to use when ordering `ProblemsTag`."""
      orderBy: [ProblemsTagsOrderBy!] = PRIMARY_KEY_ASC
   ): ProblemsTagsEdge
}

"""All input for the `deleteProfileByNodeId` mutation."""
input DeleteProfileByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Profile` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteProfile` mutation."""
input DeleteProfileInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `Profile` mutation."""
type DeleteProfilePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Profile` that was deleted by this mutation."""
   profile: Profile
   deletedProfileNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `User` that is related to this `Profile`."""
   user: User

   """Reads a single `City` that is related to this `Profile`."""
   city: City

   """Reads a single `University` that is related to this `Profile`."""
   university: University

   """An edge for our `Profile`. May be used by Relay 1."""
   profileEdge(
      """The method to use when ordering `Profile`."""
      orderBy: [ProfilesOrderBy!] = PRIMARY_KEY_ASC
   ): ProfilesEdge
}

"""All input for the `deleteProfilesCodeEditorByNodeId` mutation."""
input DeleteProfilesCodeEditorByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `ProfilesCodeEditor` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteProfilesCodeEditor` mutation."""
input DeleteProfilesCodeEditorInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   profileId: UUID!
   codeEditorId: UUID!
}

"""The output of our delete `ProfilesCodeEditor` mutation."""
type DeleteProfilesCodeEditorPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ProfilesCodeEditor` that was deleted by this mutation."""
   profilesCodeEditor: ProfilesCodeEditor
   deletedProfilesCodeEditorNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Profile` that is related to this `ProfilesCodeEditor`."""
   profile: Profile

   """
   Reads a single `CodeEditor` that is related to this `ProfilesCodeEditor`.
   """
   codeEditor: CodeEditor

   """An edge for our `ProfilesCodeEditor`. May be used by Relay 1."""
   profilesCodeEditorEdge(
      """The method to use when ordering `ProfilesCodeEditor`."""
      orderBy: [ProfilesCodeEditorsOrderBy!] = PRIMARY_KEY_ASC
   ): ProfilesCodeEditorsEdge
}

"""
All input for the `deleteProfilesProgrammingLanguageByNodeId` mutation.
   """
   input DeleteProfilesProgrammingLanguageByNodeIdInput {
      """
      An arbitrary string value with no semantic meaning. Will be included in the
      payload verbatim. May be used to track mutations by the client.
      """
      clientMutationId: String

      """
      The globally unique `ID` which will identify a single `ProfilesProgrammingLanguage` to be deleted.
      """
      nodeId: ID!
   }

"""All input for the `deleteProfilesProgrammingLanguage` mutation."""
input DeleteProfilesProgrammingLanguageInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   profileId: UUID!
   languageId: UUID!
}

"""The output of our delete `ProfilesProgrammingLanguage` mutation."""
type DeleteProfilesProgrammingLanguagePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ProfilesProgrammingLanguage` that was deleted by this mutation."""
   profilesProgrammingLanguage: ProfilesProgrammingLanguage
   deletedProfilesProgrammingLanguageNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """
   Reads a single `Profile` that is related to this `ProfilesProgrammingLanguage`.
   """
   profile: Profile

   """
   Reads a single `ProgrammingLanguage` that is related to this `ProfilesProgrammingLanguage`.
   """
   language: ProgrammingLanguage

   """An edge for our `ProfilesProgrammingLanguage`. May be used by Relay 1."""
   profilesProgrammingLanguageEdge(
      """The method to use when ordering `ProfilesProgrammingLanguage`."""
      orderBy: [ProfilesProgrammingLanguagesOrderBy!] = PRIMARY_KEY_ASC
   ): ProfilesProgrammingLanguagesEdge
}

"""All input for the `deleteProfilesTravelByNodeId` mutation."""
input DeleteProfilesTravelByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `ProfilesTravel` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteProfilesTravel` mutation."""
input DeleteProfilesTravelInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   profileId: UUID!
   travelId: UUID!
}

"""The output of our delete `ProfilesTravel` mutation."""
type DeleteProfilesTravelPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ProfilesTravel` that was deleted by this mutation."""
   profilesTravel: ProfilesTravel
   deletedProfilesTravelNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Profile` that is related to this `ProfilesTravel`."""
   profile: Profile

   """Reads a single `Travel` that is related to this `ProfilesTravel`."""
   travel: Travel

   """An edge for our `ProfilesTravel`. May be used by Relay 1."""
   profilesTravelEdge(
      """The method to use when ordering `ProfilesTravel`."""
      orderBy: [ProfilesTravelsOrderBy!] = PRIMARY_KEY_ASC
   ): ProfilesTravelsEdge
}

"""All input for the `deleteProgramInputTypeByCode` mutation."""
input DeleteProgramInputTypeByCodeInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   code: String!
}

"""All input for the `deleteProgramInputTypeByName` mutation."""
input DeleteProgramInputTypeByNameInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   name: String!
}

"""All input for the `deleteProgramInputTypeByNodeId` mutation."""
input DeleteProgramInputTypeByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `ProgramInputType` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteProgramInputType` mutation."""
input DeleteProgramInputTypeInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `ProgramInputType` mutation."""
type DeleteProgramInputTypePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ProgramInputType` that was deleted by this mutation."""
   programInputType: ProgramInputType
   deletedProgramInputTypeNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `ProgramInputType`. May be used by Relay 1."""
   programInputTypeEdge(
      """The method to use when ordering `ProgramInputType`."""
      orderBy: [ProgramInputTypesOrderBy!] = PRIMARY_KEY_ASC
   ): ProgramInputTypesEdge
}

"""
All input for the `deleteProgrammingLanguageByNameAndVersion` mutation.
   """
   input DeleteProgrammingLanguageByNameAndVersionInput {
      """
      An arbitrary string value with no semantic meaning. Will be included in the
      payload verbatim. May be used to track mutations by the client.
      """
      clientMutationId: String

      """
      Name of language. Use official name, like C++, Go, JavaScript, but not cpp, Golang, ES
      """
      name: String!

      """
      Version of language. Version is used for compiler or interpreter. Also can have definition of used extensions and presets
      """
      version: String!
   }

"""All input for the `deleteProgrammingLanguageByNodeId` mutation."""
input DeleteProgrammingLanguageByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `ProgrammingLanguage` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteProgrammingLanguageByVersion` mutation."""
input DeleteProgrammingLanguageByVersionInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   Version of language. Version is used for compiler or interpreter. Also can have definition of used extensions and presets
   """
   version: String!
}

"""All input for the `deleteProgrammingLanguage` mutation."""
input DeleteProgrammingLanguageInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `ProgrammingLanguage` mutation."""
type DeleteProgrammingLanguagePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ProgrammingLanguage` that was deleted by this mutation."""
   programmingLanguage: ProgrammingLanguage
   deletedProgrammingLanguageNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `ProgrammingLanguage`. May be used by Relay 1."""
   programmingLanguageEdge(
      """The method to use when ordering `ProgrammingLanguage`."""
      orderBy: [ProgrammingLanguagesOrderBy!] = PRIMARY_KEY_ASC
   ): ProgrammingLanguagesEdge
}

"""All input for the `deleteProgramOutputTypeByCode` mutation."""
input DeleteProgramOutputTypeByCodeInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   code: String!
}

"""All input for the `deleteProgramOutputTypeByName` mutation."""
input DeleteProgramOutputTypeByNameInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   name: String!
}

"""All input for the `deleteProgramOutputTypeByNodeId` mutation."""
input DeleteProgramOutputTypeByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `ProgramOutputType` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteProgramOutputType` mutation."""
input DeleteProgramOutputTypeInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `ProgramOutputType` mutation."""
type DeleteProgramOutputTypePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ProgramOutputType` that was deleted by this mutation."""
   programOutputType: ProgramOutputType
   deletedProgramOutputTypeNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `ProgramOutputType`. May be used by Relay 1."""
   programOutputTypeEdge(
      """The method to use when ordering `ProgramOutputType`."""
      orderBy: [ProgramOutputTypesOrderBy!] = PRIMARY_KEY_ASC
   ): ProgramOutputTypesEdge
}

"""All input for the `deleteSolutionByNodeId` mutation."""
input DeleteSolutionByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Solution` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteSolution` mutation."""
input DeleteSolutionInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `Solution` mutation."""
type DeleteSolutionPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Solution` that was deleted by this mutation."""
   solution: Solution
   deletedSolutionNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Problem` that is related to this `Solution`."""
   problem: Problem

   """Reads a single `Compiler` that is related to this `Solution`."""
   compiler: Compiler

   """An edge for our `Solution`. May be used by Relay 1."""
   solutionEdge(
      """The method to use when ordering `Solution`."""
      orderBy: [SolutionsOrderBy!] = PRIMARY_KEY_ASC
   ): SolutionsEdge
}

"""All input for the `deleteSolutionRunByNodeId` mutation."""
input DeleteSolutionRunByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `SolutionRun` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteSolutionRun` mutation."""
input DeleteSolutionRunInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `SolutionRun` mutation."""
type DeleteSolutionRunPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `SolutionRun` that was deleted by this mutation."""
   solutionRun: SolutionRun
   deletedSolutionRunNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Solution` that is related to this `SolutionRun`."""
   solution: Solution

   """Reads a single `Test` that is related to this `SolutionRun`."""
   failedTest: Test

   """Reads a single `FailType` that is related to this `SolutionRun`."""
   failTypeByTypeOfFail: FailType

   """An edge for our `SolutionRun`. May be used by Relay 1."""
   solutionRunEdge(
      """The method to use when ordering `SolutionRun`."""
      orderBy: [SolutionRunsOrderBy!] = PRIMARY_KEY_ASC
   ): SolutionRunsEdge
}

"""All input for the `deleteTagByNodeId` mutation."""
input DeleteTagByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Tag` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteTag` mutation."""
input DeleteTagInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `Tag` mutation."""
type DeleteTagPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Tag` that was deleted by this mutation."""
   tag: Tag
   deletedTagNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `Tag`. May be used by Relay 1."""
   tagEdge(
      """The method to use when ordering `Tag`."""
      orderBy: [TagsOrderBy!] = PRIMARY_KEY_ASC
   ): TagsEdge
}

"""All input for the `deleteTeamByNodeId` mutation."""
input DeleteTeamByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Team` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteTeam` mutation."""
input DeleteTeamInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `Team` mutation."""
type DeleteTeamPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Team` that was deleted by this mutation."""
   team: Team
   deletedTeamNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `Team`. May be used by Relay 1."""
   teamEdge(
      """The method to use when ordering `Team`."""
      orderBy: [TeamsOrderBy!] = PRIMARY_KEY_ASC
   ): TeamsEdge
}

"""All input for the `deleteTeamsProfileByNodeId` mutation."""
input DeleteTeamsProfileByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `TeamsProfile` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteTeamsProfile` mutation."""
input DeleteTeamsProfileInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   teamId: UUID!
   profileId: UUID!
}

"""The output of our delete `TeamsProfile` mutation."""
type DeleteTeamsProfilePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `TeamsProfile` that was deleted by this mutation."""
   teamsProfile: TeamsProfile
   deletedTeamsProfileNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Team` that is related to this `TeamsProfile`."""
   team: Team

   """Reads a single `Profile` that is related to this `TeamsProfile`."""
   profile: Profile

   """An edge for our `TeamsProfile`. May be used by Relay 1."""
   teamsProfileEdge(
      """The method to use when ordering `TeamsProfile`."""
      orderBy: [TeamsProfilesOrderBy!] = PRIMARY_KEY_ASC
   ): TeamsProfilesEdge
}

"""All input for the `deleteTestByNodeId` mutation."""
input DeleteTestByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Test` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteTest` mutation."""
input DeleteTestInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `Test` mutation."""
type DeleteTestPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Test` that was deleted by this mutation."""
   test: Test
   deletedTestNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Problem` that is related to this `Test`."""
   problem: Problem

   """An edge for our `Test`. May be used by Relay 1."""
   testEdge(
      """The method to use when ordering `Test`."""
      orderBy: [TestsOrderBy!] = PRIMARY_KEY_ASC
   ): TestsEdge
}

"""All input for the `deleteTravelByNodeId` mutation."""
input DeleteTravelByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Travel` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteTravel` mutation."""
input DeleteTravelInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `Travel` mutation."""
type DeleteTravelPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Travel` that was deleted by this mutation."""
   travel: Travel
   deletedTravelNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `Travel`. May be used by Relay 1."""
   travelEdge(
      """The method to use when ordering `Travel`."""
      orderBy: [TravelsOrderBy!] = PRIMARY_KEY_ASC
   ): TravelsEdge
}

"""All input for the `deleteUniversityByNodeId` mutation."""
input DeleteUniversityByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `University` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteUniversity` mutation."""
input DeleteUniversityInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `University` mutation."""
type DeleteUniversityPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `University` that was deleted by this mutation."""
   university: University
   deletedUniversityNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `City` that is related to this `University`."""
   city: City

   """An edge for our `University`. May be used by Relay 1."""
   universityEdge(
      """The method to use when ordering `University`."""
      orderBy: [UniversitiesOrderBy!] = PRIMARY_KEY_ASC
   ): UniversitiesEdge
}

"""All input for the `deleteUserAuthenticationByNodeId` mutation."""
input DeleteUserAuthenticationByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `UserAuthentication` to be deleted.
   """
   nodeId: ID!
}

"""
All input for the `deleteUserAuthenticationByServiceAndIdentifier` mutation.
   """
   input DeleteUserAuthenticationByServiceAndIdentifierInput {
      """
      An arbitrary string value with no semantic meaning. Will be included in the
      payload verbatim. May be used to track mutations by the client.
      """
      clientMutationId: String

      """The login service used, e.g. `twitter` or `github`."""
      service: String!

      """A unique identifier for the user within the login service."""
      identifier: String!
   }

"""All input for the `deleteUserAuthentication` mutation."""
input DeleteUserAuthenticationInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `UserAuthentication` mutation."""
type DeleteUserAuthenticationPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `UserAuthentication` that was deleted by this mutation."""
   userAuthentication: UserAuthentication
   deletedUserAuthenticationNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `UserAuthentication`. May be used by Relay 1."""
   userAuthenticationEdge(
      """The method to use when ordering `UserAuthentication`."""
      orderBy: [UserAuthenticationsOrderBy!] = PRIMARY_KEY_ASC
   ): UserAuthenticationsEdge
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `User` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteUserByUsername` mutation."""
input DeleteUserByUsernameInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """Public-facing username (or 'handle') of the user."""
   username: String!
}

"""All input for the `deleteUserEmailByNodeId` mutation."""
input DeleteUserEmailByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `UserEmail` to be deleted.
   """
   nodeId: ID!
}

"""All input for the `deleteUserEmailByUserIdAndEmail` mutation."""
input DeleteUserEmailByUserIdAndEmailInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   userId: UUID!

   """The users email address, in `a@b.c` format."""
   email: String!
}

"""All input for the `deleteUserEmail` mutation."""
input DeleteUserEmailInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   id: UUID!
}

"""The output of our delete `UserEmail` mutation."""
type DeleteUserEmailPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `UserEmail` that was deleted by this mutation."""
   userEmail: UserEmail
   deletedUserEmailNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `User` that is related to this `UserEmail`."""
   user: User

   """An edge for our `UserEmail`. May be used by Relay 1."""
   userEmailEdge(
      """The method to use when ordering `UserEmail`."""
      orderBy: [UserEmailsOrderBy!] = PRIMARY_KEY_ASC
   ): UserEmailsEdge
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """Unique identifier for the user."""
   id: UUID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `User` that was deleted by this mutation."""
   user: User
   deletedUserNodeId: ID

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `User`. May be used by Relay 1."""
   userEdge(
      """The method to use when ordering `User`."""
      orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
   ): UsersEdge
}

"""
Describe types of run program, aka "not equal test output", "exit with error",...
"""
type FailType implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!
   name: String!
   code: Int!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads and enables pagination through a set of `SolutionRun`."""
   solutionRunsByTypeOfFail(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `SolutionRun`."""
      orderBy: [SolutionRunsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: SolutionRunCondition
   ): SolutionRunsConnection!
}

"""
A condition to be used against `FailType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FailTypeCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `name` field."""
   name: String

   """Checks for equality with the object’s `code` field."""
   code: Int

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `FailType`"""
input FailTypeInput {
   name: String!
}

"""
Represents an update to a `FailType`. Fields that are set will be updated.
"""
input FailTypePatch {
   name: String
}

"""A connection to a list of `FailType` values."""
type FailTypesConnection {
   """A list of `FailType` objects."""
   nodes: [FailType]!

   """
   A list of edges which contains the `FailType` and cursor to aid in pagination.
   """
   edges: [FailTypesEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `FailType` you could get from the connection."""
   totalCount: Int
}

"""A `FailType` edge in the connection."""
type FailTypesEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `FailType` at the end of the edge."""
   node: FailType
}

"""Methods to use when ordering `FailType`."""
enum FailTypesOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   NAME_ASC
   NAME_DESC
   CODE_ASC
   CODE_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

"""All input for the `forgotPassword` mutation."""
input ForgotPasswordInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   email: String!
}

"""The output of our `forgotPassword` mutation."""
type ForgotPasswordPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String
   success: Boolean

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query
}

"""Languages ​​from which the application is accessible"""
type Language implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!

   """Language name is displayed to user"""
   name: String!

   """
   Language code is used in url or other places, aka "some.com/en/..."
   """
   code: String!
   createdAt: Datetime!
   updatedAt: Datetime!
}

"""
A condition to be used against `Language` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LanguageCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `name` field."""
   name: String

   """Checks for equality with the object’s `code` field."""
   code: String

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `Language`"""
input LanguageInput {
   """Language name is displayed to user"""
   name: String!

   """
   Language code is used in url or other places, aka "some.com/en/..."
   """
   code: String!
}

"""
Represents an update to a `Language`. Fields that are set will be updated.
"""
input LanguagePatch {
   """Language name is displayed to user"""
   name: String

   """
   Language code is used in url or other places, aka "some.com/en/..."
   """
   code: String
}

"""A connection to a list of `Language` values."""
type LanguagesConnection {
   """A list of `Language` objects."""
   nodes: [Language]!

   """
   A list of edges which contains the `Language` and cursor to aid in pagination.
   """
   edges: [LanguagesEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `Language` you could get from the connection."""
   totalCount: Int
}

"""A `Language` edge in the connection."""
type LanguagesEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `Language` at the end of the edge."""
   node: Language
}

"""Methods to use when ordering `Language`."""
enum LanguagesOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   NAME_ASC
   NAME_DESC
   CODE_ASC
   CODE_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

input LoginInput {
   username: String!
   password: String!
}

type LoginPayload {
   user: User!
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
"""Creates a single `City`."""
createCity(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateCityInput!
): CreateCityPayload

"""Creates a single `CodeEditor`."""
createCodeEditor(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateCodeEditorInput!
): CreateCodeEditorPayload

"""Creates a single `Compiler`."""
createCompiler(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateCompilerInput!
): CreateCompilerPayload

"""Creates a single `Contest`."""
createContest(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateContestInput!
): CreateContestPayload

"""Creates a single `ContestsProfile`."""
createContestsProfile(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateContestsProfileInput!
): CreateContestsProfilePayload

"""Creates a single `ContestsTeam`."""
createContestsTeam(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateContestsTeamInput!
): CreateContestsTeamPayload

"""Creates a single `Country`."""
createCountry(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateCountryInput!
): CreateCountryPayload

"""Creates a single `FailType`."""
createFailType(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateFailTypeInput!
): CreateFailTypePayload

"""Creates a single `Language`."""
createLanguage(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateLanguageInput!
): CreateLanguagePayload

"""Creates a single `Problem`."""
createProblem(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateProblemInput!
): CreateProblemPayload

"""Creates a single `ProblemsTag`."""
createProblemsTag(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateProblemsTagInput!
): CreateProblemsTagPayload

"""Creates a single `Profile`."""
createProfile(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateProfileInput!
): CreateProfilePayload

"""Creates a single `ProfilesCodeEditor`."""
createProfilesCodeEditor(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateProfilesCodeEditorInput!
): CreateProfilesCodeEditorPayload

"""Creates a single `ProfilesProgrammingLanguage`."""
createProfilesProgrammingLanguage(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateProfilesProgrammingLanguageInput!
): CreateProfilesProgrammingLanguagePayload

"""Creates a single `ProfilesTravel`."""
createProfilesTravel(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateProfilesTravelInput!
): CreateProfilesTravelPayload

"""Creates a single `ProgramInputType`."""
createProgramInputType(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateProgramInputTypeInput!
): CreateProgramInputTypePayload

"""Creates a single `ProgramOutputType`."""
createProgramOutputType(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateProgramOutputTypeInput!
): CreateProgramOutputTypePayload

"""Creates a single `ProgrammingLanguage`."""
createProgrammingLanguage(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateProgrammingLanguageInput!
): CreateProgrammingLanguagePayload

"""Creates a single `Solution`."""
createSolution(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateSolutionInput!
): CreateSolutionPayload

"""Creates a single `SolutionRun`."""
createSolutionRun(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateSolutionRunInput!
): CreateSolutionRunPayload

"""Creates a single `Tag`."""
createTag(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateTagInput!
): CreateTagPayload

"""Creates a single `Team`."""
createTeam(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateTeamInput!
): CreateTeamPayload

"""Creates a single `TeamsProfile`."""
createTeamsProfile(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateTeamsProfileInput!
): CreateTeamsProfilePayload

"""Creates a single `Test`."""
createTest(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateTestInput!
): CreateTestPayload

"""Creates a single `Travel`."""
createTravel(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateTravelInput!
): CreateTravelPayload

"""Creates a single `University`."""
createUniversity(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateUniversityInput!
): CreateUniversityPayload

"""Creates a single `UserEmail`."""
createUserEmail(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: CreateUserEmailInput!
): CreateUserEmailPayload

"""Updates a single `City` using its globally unique id and a patch."""
updateCityByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateCityByNodeIdInput!
): UpdateCityPayload

"""Updates a single `City` using a unique key and a patch."""
updateCity(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateCityInput!
): UpdateCityPayload

"""
Updates a single `CodeEditor` using its globally unique id and a patch.
"""
updateCodeEditorByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateCodeEditorByNodeIdInput!
): UpdateCodeEditorPayload

"""Updates a single `CodeEditor` using a unique key and a patch."""
updateCodeEditor(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateCodeEditorInput!
): UpdateCodeEditorPayload

"""Updates a single `CodeEditor` using a unique key and a patch."""
updateCodeEditorByNameAndVersion(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateCodeEditorByNameAndVersionInput!
): UpdateCodeEditorPayload

"""Updates a single `CodeEditor` using a unique key and a patch."""
updateCodeEditorByVersion(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateCodeEditorByVersionInput!
): UpdateCodeEditorPayload

"""Updates a single `Compiler` using its globally unique id and a patch."""
updateCompilerByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateCompilerByNodeIdInput!
): UpdateCompilerPayload

"""Updates a single `Compiler` using a unique key and a patch."""
updateCompiler(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateCompilerInput!
): UpdateCompilerPayload

"""Updates a single `Compiler` using a unique key and a patch."""
updateCompilerByNameAndVersion(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateCompilerByNameAndVersionInput!
): UpdateCompilerPayload

"""Updates a single `Compiler` using a unique key and a patch."""
updateCompilerByVersion(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateCompilerByVersionInput!
): UpdateCompilerPayload

"""Updates a single `Contest` using its globally unique id and a patch."""
updateContestByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateContestByNodeIdInput!
): UpdateContestPayload

"""Updates a single `Contest` using a unique key and a patch."""
updateContest(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateContestInput!
): UpdateContestPayload

"""Updates a single `Country` using its globally unique id and a patch."""
updateCountryByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateCountryByNodeIdInput!
): UpdateCountryPayload

"""Updates a single `Country` using a unique key and a patch."""
updateCountry(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateCountryInput!
): UpdateCountryPayload

"""Updates a single `FailType` using its globally unique id and a patch."""
updateFailTypeByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateFailTypeByNodeIdInput!
): UpdateFailTypePayload

"""Updates a single `FailType` using a unique key and a patch."""
updateFailType(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateFailTypeInput!
): UpdateFailTypePayload

"""Updates a single `FailType` using a unique key and a patch."""
updateFailTypeByCode(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateFailTypeByCodeInput!
): UpdateFailTypePayload

"""Updates a single `Language` using its globally unique id and a patch."""
updateLanguageByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateLanguageByNodeIdInput!
): UpdateLanguagePayload

"""Updates a single `Language` using a unique key and a patch."""
updateLanguage(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateLanguageInput!
): UpdateLanguagePayload

"""Updates a single `Problem` using its globally unique id and a patch."""
updateProblemByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateProblemByNodeIdInput!
): UpdateProblemPayload

"""Updates a single `Problem` using a unique key and a patch."""
updateProblem(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateProblemInput!
): UpdateProblemPayload

"""Updates a single `Profile` using its globally unique id and a patch."""
updateProfileByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateProfileByNodeIdInput!
): UpdateProfilePayload

"""Updates a single `Profile` using a unique key and a patch."""
updateProfile(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateProfileInput!
): UpdateProfilePayload

"""
Updates a single `ProgramInputType` using its globally unique id and a patch.
"""
updateProgramInputTypeByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateProgramInputTypeByNodeIdInput!
): UpdateProgramInputTypePayload

"""Updates a single `ProgramInputType` using a unique key and a patch."""
updateProgramInputType(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateProgramInputTypeInput!
): UpdateProgramInputTypePayload

"""Updates a single `ProgramInputType` using a unique key and a patch."""
updateProgramInputTypeByName(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateProgramInputTypeByNameInput!
): UpdateProgramInputTypePayload

"""Updates a single `ProgramInputType` using a unique key and a patch."""
updateProgramInputTypeByCode(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateProgramInputTypeByCodeInput!
): UpdateProgramInputTypePayload

"""
Updates a single `ProgramOutputType` using its globally unique id and a patch.
"""
updateProgramOutputTypeByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateProgramOutputTypeByNodeIdInput!
): UpdateProgramOutputTypePayload

"""Updates a single `ProgramOutputType` using a unique key and a patch."""
updateProgramOutputType(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateProgramOutputTypeInput!
): UpdateProgramOutputTypePayload

"""Updates a single `ProgramOutputType` using a unique key and a patch."""
updateProgramOutputTypeByName(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateProgramOutputTypeByNameInput!
): UpdateProgramOutputTypePayload

"""Updates a single `ProgramOutputType` using a unique key and a patch."""
updateProgramOutputTypeByCode(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateProgramOutputTypeByCodeInput!
): UpdateProgramOutputTypePayload

"""
Updates a single `ProgrammingLanguage` using its globally unique id and a patch.
"""
updateProgrammingLanguageByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateProgrammingLanguageByNodeIdInput!
): UpdateProgrammingLanguagePayload

"""Updates a single `ProgrammingLanguage` using a unique key and a patch."""
updateProgrammingLanguage(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateProgrammingLanguageInput!
): UpdateProgrammingLanguagePayload

"""Updates a single `ProgrammingLanguage` using a unique key and a patch."""
updateProgrammingLanguageByNameAndVersion(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateProgrammingLanguageByNameAndVersionInput!
): UpdateProgrammingLanguagePayload

"""Updates a single `ProgrammingLanguage` using a unique key and a patch."""
updateProgrammingLanguageByVersion(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateProgrammingLanguageByVersionInput!
): UpdateProgrammingLanguagePayload

"""Updates a single `Solution` using its globally unique id and a patch."""
updateSolutionByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateSolutionByNodeIdInput!
): UpdateSolutionPayload

"""Updates a single `Solution` using a unique key and a patch."""
updateSolution(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateSolutionInput!
): UpdateSolutionPayload

"""
Updates a single `SolutionRun` using its globally unique id and a patch.
"""
updateSolutionRunByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateSolutionRunByNodeIdInput!
): UpdateSolutionRunPayload

"""Updates a single `SolutionRun` using a unique key and a patch."""
updateSolutionRun(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateSolutionRunInput!
): UpdateSolutionRunPayload

"""Updates a single `Tag` using its globally unique id and a patch."""
updateTagByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateTagByNodeIdInput!
): UpdateTagPayload

"""Updates a single `Tag` using a unique key and a patch."""
updateTag(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateTagInput!
): UpdateTagPayload

"""Updates a single `Team` using its globally unique id and a patch."""
updateTeamByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateTeamByNodeIdInput!
): UpdateTeamPayload

"""Updates a single `Team` using a unique key and a patch."""
updateTeam(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateTeamInput!
): UpdateTeamPayload

"""Updates a single `Test` using its globally unique id and a patch."""
updateTestByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateTestByNodeIdInput!
): UpdateTestPayload

"""Updates a single `Test` using a unique key and a patch."""
updateTest(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateTestInput!
): UpdateTestPayload

"""Updates a single `Travel` using its globally unique id and a patch."""
updateTravelByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateTravelByNodeIdInput!
): UpdateTravelPayload

"""Updates a single `Travel` using a unique key and a patch."""
updateTravel(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateTravelInput!
): UpdateTravelPayload

"""
Updates a single `University` using its globally unique id and a patch.
"""
updateUniversityByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateUniversityByNodeIdInput!
): UpdateUniversityPayload

"""Updates a single `University` using a unique key and a patch."""
updateUniversity(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateUniversityInput!
): UpdateUniversityPayload

"""Updates a single `User` using its globally unique id and a patch."""
updateUserByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateUserByNodeIdInput!
): UpdateUserPayload

"""Updates a single `User` using a unique key and a patch."""
updateUser(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateUserInput!
): UpdateUserPayload

"""Updates a single `User` using a unique key and a patch."""
updateUserByUsername(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: UpdateUserByUsernameInput!
): UpdateUserPayload

"""Deletes a single `City` using its globally unique id."""
deleteCityByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteCityByNodeIdInput!
): DeleteCityPayload

"""Deletes a single `City` using a unique key."""
deleteCity(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteCityInput!
): DeleteCityPayload

"""Deletes a single `CodeEditor` using its globally unique id."""
deleteCodeEditorByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteCodeEditorByNodeIdInput!
): DeleteCodeEditorPayload

"""Deletes a single `CodeEditor` using a unique key."""
deleteCodeEditor(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteCodeEditorInput!
): DeleteCodeEditorPayload

"""Deletes a single `CodeEditor` using a unique key."""
deleteCodeEditorByNameAndVersion(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteCodeEditorByNameAndVersionInput!
): DeleteCodeEditorPayload

"""Deletes a single `CodeEditor` using a unique key."""
deleteCodeEditorByVersion(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteCodeEditorByVersionInput!
): DeleteCodeEditorPayload

"""Deletes a single `Compiler` using its globally unique id."""
deleteCompilerByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteCompilerByNodeIdInput!
): DeleteCompilerPayload

"""Deletes a single `Compiler` using a unique key."""
deleteCompiler(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteCompilerInput!
): DeleteCompilerPayload

"""Deletes a single `Compiler` using a unique key."""
deleteCompilerByNameAndVersion(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteCompilerByNameAndVersionInput!
): DeleteCompilerPayload

"""Deletes a single `Compiler` using a unique key."""
deleteCompilerByVersion(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteCompilerByVersionInput!
): DeleteCompilerPayload

"""Deletes a single `Contest` using its globally unique id."""
deleteContestByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteContestByNodeIdInput!
): DeleteContestPayload

"""Deletes a single `Contest` using a unique key."""
deleteContest(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteContestInput!
): DeleteContestPayload

"""Deletes a single `ContestsProfile` using its globally unique id."""
deleteContestsProfileByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteContestsProfileByNodeIdInput!
): DeleteContestsProfilePayload

"""Deletes a single `ContestsProfile` using a unique key."""
deleteContestsProfile(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteContestsProfileInput!
): DeleteContestsProfilePayload

"""Deletes a single `ContestsTeam` using its globally unique id."""
deleteContestsTeamByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteContestsTeamByNodeIdInput!
): DeleteContestsTeamPayload

"""Deletes a single `ContestsTeam` using a unique key."""
deleteContestsTeam(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteContestsTeamInput!
): DeleteContestsTeamPayload

"""Deletes a single `Country` using its globally unique id."""
deleteCountryByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteCountryByNodeIdInput!
): DeleteCountryPayload

"""Deletes a single `Country` using a unique key."""
deleteCountry(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteCountryInput!
): DeleteCountryPayload

"""Deletes a single `FailType` using its globally unique id."""
deleteFailTypeByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteFailTypeByNodeIdInput!
): DeleteFailTypePayload

"""Deletes a single `FailType` using a unique key."""
deleteFailType(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteFailTypeInput!
): DeleteFailTypePayload

"""Deletes a single `FailType` using a unique key."""
deleteFailTypeByCode(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteFailTypeByCodeInput!
): DeleteFailTypePayload

"""Deletes a single `Language` using its globally unique id."""
deleteLanguageByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteLanguageByNodeIdInput!
): DeleteLanguagePayload

"""Deletes a single `Language` using a unique key."""
deleteLanguage(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteLanguageInput!
): DeleteLanguagePayload

"""Deletes a single `Problem` using its globally unique id."""
deleteProblemByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProblemByNodeIdInput!
): DeleteProblemPayload

"""Deletes a single `Problem` using a unique key."""
deleteProblem(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProblemInput!
): DeleteProblemPayload

"""Deletes a single `ProblemsTag` using its globally unique id."""
deleteProblemsTagByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProblemsTagByNodeIdInput!
): DeleteProblemsTagPayload

"""Deletes a single `ProblemsTag` using a unique key."""
deleteProblemsTag(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProblemsTagInput!
): DeleteProblemsTagPayload

"""Deletes a single `Profile` using its globally unique id."""
deleteProfileByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProfileByNodeIdInput!
): DeleteProfilePayload

"""Deletes a single `Profile` using a unique key."""
deleteProfile(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProfileInput!
): DeleteProfilePayload

"""Deletes a single `ProfilesCodeEditor` using its globally unique id."""
deleteProfilesCodeEditorByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProfilesCodeEditorByNodeIdInput!
): DeleteProfilesCodeEditorPayload

"""Deletes a single `ProfilesCodeEditor` using a unique key."""
deleteProfilesCodeEditor(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProfilesCodeEditorInput!
): DeleteProfilesCodeEditorPayload

"""
Deletes a single `ProfilesProgrammingLanguage` using its globally unique id.
"""
deleteProfilesProgrammingLanguageByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProfilesProgrammingLanguageByNodeIdInput!
): DeleteProfilesProgrammingLanguagePayload

"""Deletes a single `ProfilesProgrammingLanguage` using a unique key."""
deleteProfilesProgrammingLanguage(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProfilesProgrammingLanguageInput!
): DeleteProfilesProgrammingLanguagePayload

"""Deletes a single `ProfilesTravel` using its globally unique id."""
deleteProfilesTravelByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProfilesTravelByNodeIdInput!
): DeleteProfilesTravelPayload

"""Deletes a single `ProfilesTravel` using a unique key."""
deleteProfilesTravel(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProfilesTravelInput!
): DeleteProfilesTravelPayload

"""Deletes a single `ProgramInputType` using its globally unique id."""
deleteProgramInputTypeByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProgramInputTypeByNodeIdInput!
): DeleteProgramInputTypePayload

"""Deletes a single `ProgramInputType` using a unique key."""
deleteProgramInputType(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProgramInputTypeInput!
): DeleteProgramInputTypePayload

"""Deletes a single `ProgramInputType` using a unique key."""
deleteProgramInputTypeByName(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProgramInputTypeByNameInput!
): DeleteProgramInputTypePayload

"""Deletes a single `ProgramInputType` using a unique key."""
deleteProgramInputTypeByCode(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProgramInputTypeByCodeInput!
): DeleteProgramInputTypePayload

"""Deletes a single `ProgramOutputType` using its globally unique id."""
deleteProgramOutputTypeByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProgramOutputTypeByNodeIdInput!
): DeleteProgramOutputTypePayload

"""Deletes a single `ProgramOutputType` using a unique key."""
deleteProgramOutputType(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProgramOutputTypeInput!
): DeleteProgramOutputTypePayload

"""Deletes a single `ProgramOutputType` using a unique key."""
deleteProgramOutputTypeByName(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProgramOutputTypeByNameInput!
): DeleteProgramOutputTypePayload

"""Deletes a single `ProgramOutputType` using a unique key."""
deleteProgramOutputTypeByCode(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProgramOutputTypeByCodeInput!
): DeleteProgramOutputTypePayload

"""Deletes a single `ProgrammingLanguage` using its globally unique id."""
deleteProgrammingLanguageByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProgrammingLanguageByNodeIdInput!
): DeleteProgrammingLanguagePayload

"""Deletes a single `ProgrammingLanguage` using a unique key."""
deleteProgrammingLanguage(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProgrammingLanguageInput!
): DeleteProgrammingLanguagePayload

"""Deletes a single `ProgrammingLanguage` using a unique key."""
deleteProgrammingLanguageByNameAndVersion(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProgrammingLanguageByNameAndVersionInput!
): DeleteProgrammingLanguagePayload

"""Deletes a single `ProgrammingLanguage` using a unique key."""
deleteProgrammingLanguageByVersion(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteProgrammingLanguageByVersionInput!
): DeleteProgrammingLanguagePayload

"""Deletes a single `Solution` using its globally unique id."""
deleteSolutionByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteSolutionByNodeIdInput!
): DeleteSolutionPayload

"""Deletes a single `Solution` using a unique key."""
deleteSolution(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteSolutionInput!
): DeleteSolutionPayload

"""Deletes a single `SolutionRun` using its globally unique id."""
deleteSolutionRunByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteSolutionRunByNodeIdInput!
): DeleteSolutionRunPayload

"""Deletes a single `SolutionRun` using a unique key."""
deleteSolutionRun(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteSolutionRunInput!
): DeleteSolutionRunPayload

"""Deletes a single `Tag` using its globally unique id."""
deleteTagByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteTagByNodeIdInput!
): DeleteTagPayload

"""Deletes a single `Tag` using a unique key."""
deleteTag(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteTagInput!
): DeleteTagPayload

"""Deletes a single `Team` using its globally unique id."""
deleteTeamByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteTeamByNodeIdInput!
): DeleteTeamPayload

"""Deletes a single `Team` using a unique key."""
deleteTeam(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteTeamInput!
): DeleteTeamPayload

"""Deletes a single `TeamsProfile` using its globally unique id."""
deleteTeamsProfileByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteTeamsProfileByNodeIdInput!
): DeleteTeamsProfilePayload

"""Deletes a single `TeamsProfile` using a unique key."""
deleteTeamsProfile(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteTeamsProfileInput!
): DeleteTeamsProfilePayload

"""Deletes a single `Test` using its globally unique id."""
deleteTestByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteTestByNodeIdInput!
): DeleteTestPayload

"""Deletes a single `Test` using a unique key."""
deleteTest(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteTestInput!
): DeleteTestPayload

"""Deletes a single `Travel` using its globally unique id."""
deleteTravelByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteTravelByNodeIdInput!
): DeleteTravelPayload

"""Deletes a single `Travel` using a unique key."""
deleteTravel(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteTravelInput!
): DeleteTravelPayload

"""Deletes a single `University` using its globally unique id."""
deleteUniversityByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteUniversityByNodeIdInput!
): DeleteUniversityPayload

"""Deletes a single `University` using a unique key."""
deleteUniversity(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteUniversityInput!
): DeleteUniversityPayload

"""Deletes a single `UserAuthentication` using its globally unique id."""
deleteUserAuthenticationByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteUserAuthenticationByNodeIdInput!
): DeleteUserAuthenticationPayload

"""Deletes a single `UserAuthentication` using a unique key."""
deleteUserAuthentication(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteUserAuthenticationInput!
): DeleteUserAuthenticationPayload

"""Deletes a single `UserAuthentication` using a unique key."""
deleteUserAuthenticationByServiceAndIdentifier(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteUserAuthenticationByServiceAndIdentifierInput!
): DeleteUserAuthenticationPayload

"""Deletes a single `UserEmail` using its globally unique id."""
deleteUserEmailByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteUserEmailByNodeIdInput!
): DeleteUserEmailPayload

"""Deletes a single `UserEmail` using a unique key."""
deleteUserEmail(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteUserEmailInput!
): DeleteUserEmailPayload

"""Deletes a single `UserEmail` using a unique key."""
deleteUserEmailByUserIdAndEmail(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteUserEmailByUserIdAndEmailInput!
): DeleteUserEmailPayload

"""Deletes a single `User` using its globally unique id."""
deleteUserByNodeId(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteUserByNodeIdInput!
): DeleteUserPayload

"""Deletes a single `User` using a unique key."""
deleteUser(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteUserInput!
): DeleteUserPayload

"""Deletes a single `User` using a unique key."""
deleteUserByUsername(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: DeleteUserByUsernameInput!
): DeleteUserPayload

"""
If you've forgotten your password, give us one of your email addresses and we'
send you a reset token. Note this only works if you have added an email address!
"""
forgotPassword(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: ForgotPasswordInput!
): ForgotPasswordPayload

"""
After triggering forgotPassword, you'll be sent a reset token. Combine this
with your user ID and a new password to reset your password.
"""
resetPassword(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: ResetPasswordInput!
): ResetPasswordPayload
register(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: RegisterInput!
): RegisterPayload
login(
   """
   The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
   """
   input: LoginInput!
): LoginPayload
}

"""An object with a globally unique `ID`."""
interface Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
   """When paginating forwards, are there more items?"""
   hasNextPage: Boolean!

   """When paginating backwards, are there more items?"""
   hasPreviousPage: Boolean!

   """When paginating backwards, the cursor to continue."""
   startCursor: Cursor

   """When paginating forwards, the cursor to continue."""
   endCursor: Cursor
}

"""nOlympiad programming task"""
type Problem implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!

   """Name of problem"""
   name: String!

   """Problem description"""
   description: String!

   """Description for input data"""
   inputDescription: String!

   """Description for output data"""
   outputDescription: String!

   """Addition note, mostly used be author and tester"""
   note: String

   """Type input of problem, aka stdin"""
   inputTypeId: UUID!

   """Type output of problem, aka stdout"""
   outputTypeId: UUID!

   """Time limit for problem. Units is milliseconds"""
   limitTime: Int!

   """Memory limit for problem. Units is bytes"""
   limitMemory: Int!

   """Level of difficulty. Where 0 is very easy and 100 is very hard"""
   difficulty: Int

   """Date of problem creation"""
   createdAt: Datetime!

   """Date of last problem modification"""
   updatedAt: Datetime!

   """Define when this problem can be visible"""
   publicationDate: Datetime

   """Creator of problem"""
   authorId: UUID!

   """Tester of problem"""
   testerId: UUID

   """Reads a single `ProgramInputType` that is related to this `Problem`."""
   inputType: ProgramInputType

   """Reads a single `ProgramOutputType` that is related to this `Problem`."""
   outputType: ProgramOutputType

   """Reads a single `Profile` that is related to this `Problem`."""
   author: Profile

   """Reads a single `Profile` that is related to this `Problem`."""
   tester: Profile

   """Reads and enables pagination through a set of `ProblemsTag`."""
   problemsTags(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ProblemsTag`."""
      orderBy: [ProblemsTagsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProblemsTagCondition
   ): ProblemsTagsConnection!

   """Reads and enables pagination through a set of `Test`."""
   tests(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Test`."""
      orderBy: [TestsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: TestCondition
   ): TestsConnection!

   """Reads and enables pagination through a set of `Solution`."""
   solutions(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Solution`."""
      orderBy: [SolutionsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: SolutionCondition
   ): SolutionsConnection!
}

"""
A condition to be used against `Problem` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProblemCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `name` field."""
   name: String

   """Checks for equality with the object’s `description` field."""
   description: String

   """Checks for equality with the object’s `inputDescription` field."""
   inputDescription: String

   """Checks for equality with the object’s `outputDescription` field."""
   outputDescription: String

   """Checks for equality with the object’s `note` field."""
   note: String

   """Checks for equality with the object’s `inputTypeId` field."""
   inputTypeId: UUID

   """Checks for equality with the object’s `outputTypeId` field."""
   outputTypeId: UUID

   """Checks for equality with the object’s `limitTime` field."""
   limitTime: Int

   """Checks for equality with the object’s `limitMemory` field."""
   limitMemory: Int

   """Checks for equality with the object’s `difficulty` field."""
   difficulty: Int

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime

   """Checks for equality with the object’s `publicationDate` field."""
   publicationDate: Datetime

   """Checks for equality with the object’s `authorId` field."""
   authorId: UUID

   """Checks for equality with the object’s `testerId` field."""
   testerId: UUID
}

"""An input for mutations affecting `Problem`"""
input ProblemInput {
   """Name of problem"""
   name: String!

   """Problem description"""
   description: String!

   """Addition note, mostly used be author and tester"""
   note: String

   """Type input of problem, aka stdin"""
   inputTypeId: UUID!

   """Type output of problem, aka stdout"""
   outputTypeId: UUID!

   """Time limit for problem. Units is milliseconds"""
   limitTime: Int!

   """Memory limit for problem. Units is bytes"""
   limitMemory: Int!

   """Define when this problem can be visible"""
   publicationDate: Datetime

   """Creator of problem"""
   authorId: UUID!

   """Tester of problem"""
   testerId: UUID
}

"""
Represents an update to a `Problem`. Fields that are set will be updated.
"""
input ProblemPatch {
   """Name of problem"""
   name: String

   """Problem description"""
   description: String

   """Addition note, mostly used be author and tester"""
   note: String

   """Type input of problem, aka stdin"""
   inputTypeId: UUID

   """Type output of problem, aka stdout"""
   outputTypeId: UUID

   """Time limit for problem. Units is milliseconds"""
   limitTime: Int

   """Memory limit for problem. Units is bytes"""
   limitMemory: Int

   """Define when this problem can be visible"""
   publicationDate: Datetime

   """Creator of problem"""
   authorId: UUID

   """Tester of problem"""
   testerId: UUID
}

"""A connection to a list of `Problem` values."""
type ProblemsConnection {
   """A list of `Problem` objects."""
   nodes: [Problem]!

   """
   A list of edges which contains the `Problem` and cursor to aid in pagination.
   """
   edges: [ProblemsEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `Problem` you could get from the connection."""
   totalCount: Int
}

"""A `Problem` edge in the connection."""
type ProblemsEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `Problem` at the end of the edge."""
   node: Problem
}

"""Methods to use when ordering `Problem`."""
enum ProblemsOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   NAME_ASC
   NAME_DESC
   DESCRIPTION_ASC
   DESCRIPTION_DESC
   INPUT_DESCRIPTION_ASC
   INPUT_DESCRIPTION_DESC
   OUTPUT_DESCRIPTION_ASC
   OUTPUT_DESCRIPTION_DESC
   NOTE_ASC
   NOTE_DESC
   INPUT_TYPE_ID_ASC
   INPUT_TYPE_ID_DESC
   OUTPUT_TYPE_ID_ASC
   OUTPUT_TYPE_ID_DESC
   LIMIT_TIME_ASC
   LIMIT_TIME_DESC
   LIMIT_MEMORY_ASC
   LIMIT_MEMORY_DESC
   DIFFICULTY_ASC
   DIFFICULTY_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PUBLICATION_DATE_ASC
   PUBLICATION_DATE_DESC
   AUTHOR_ID_ASC
   AUTHOR_ID_DESC
   TESTER_ID_ASC
   TESTER_ID_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

type ProblemsTag implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   problemId: UUID!
   tagId: UUID!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads a single `Problem` that is related to this `ProblemsTag`."""
   problem: Problem

   """Reads a single `Tag` that is related to this `ProblemsTag`."""
   tag: Tag
}

"""
A condition to be used against `ProblemsTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ProblemsTagCondition {
   """Checks for equality with the object’s `problemId` field."""
   problemId: UUID

   """Checks for equality with the object’s `tagId` field."""
   tagId: UUID

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `ProblemsTag`"""
input ProblemsTagInput {
   problemId: UUID!
   tagId: UUID!
}

"""A connection to a list of `ProblemsTag` values."""
type ProblemsTagsConnection {
   """A list of `ProblemsTag` objects."""
   nodes: [ProblemsTag]!

   """
   A list of edges which contains the `ProblemsTag` and cursor to aid in pagination.
   """
   edges: [ProblemsTagsEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `ProblemsTag` you could get from the connection."""
   totalCount: Int
}

"""A `ProblemsTag` edge in the connection."""
type ProblemsTagsEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `ProblemsTag` at the end of the edge."""
   node: ProblemsTag
}

"""Methods to use when ordering `ProblemsTag`."""
enum ProblemsTagsOrderBy {
   NATURAL
   PROBLEM_ID_ASC
   PROBLEM_ID_DESC
   TAG_ID_ASC
   TAG_ID_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

type Profile implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!
   userId: UUID!
   firstName: String
   middleName: String
   lastName: String
   phone: String
   groupNumber: String
   course: Int
   cityId: UUID
   universityId: UUID
   isTeacher: Boolean
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads a single `User` that is related to this `Profile`."""
   user: User

   """Reads a single `City` that is related to this `Profile`."""
   city: City

   """Reads a single `University` that is related to this `Profile`."""
   university: University

   """Reads and enables pagination through a set of `ProfilesTravel`."""
   profilesTravels(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ProfilesTravel`."""
      orderBy: [ProfilesTravelsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProfilesTravelCondition
   ): ProfilesTravelsConnection!

   """
   Reads and enables pagination through a set of `ProfilesProgrammingLanguage`.
   """
   profilesProgrammingLanguages(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ProfilesProgrammingLanguage`."""
      orderBy: [ProfilesProgrammingLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProfilesProgrammingLanguageCondition
   ): ProfilesProgrammingLanguagesConnection!

   """Reads and enables pagination through a set of `ProfilesCodeEditor`."""
   profilesCodeEditors(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ProfilesCodeEditor`."""
      orderBy: [ProfilesCodeEditorsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProfilesCodeEditorCondition
   ): ProfilesCodeEditorsConnection!

   """Reads and enables pagination through a set of `Problem`."""
   authoredProblems(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Problem`."""
      orderBy: [ProblemsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProblemCondition
   ): ProblemsConnection!

   """Reads and enables pagination through a set of `Problem`."""
   problemsByTesterId(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Problem`."""
      orderBy: [ProblemsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProblemCondition
   ): ProblemsConnection!

   """Reads and enables pagination through a set of `TeamsProfile`."""
   teamsProfiles(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `TeamsProfile`."""
      orderBy: [TeamsProfilesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: TeamsProfileCondition
   ): TeamsProfilesConnection!

   """Reads and enables pagination through a set of `ContestsProfile`."""
   contestsProfiles(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ContestsProfile`."""
      orderBy: [ContestsProfilesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ContestsProfileCondition
   ): ContestsProfilesConnection!
   fullName: String
}

"""
A condition to be used against `Profile` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProfileCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `userId` field."""
   userId: UUID

   """Checks for equality with the object’s `firstName` field."""
   firstName: String

   """Checks for equality with the object’s `middleName` field."""
   middleName: String

   """Checks for equality with the object’s `lastName` field."""
   lastName: String

   """Checks for equality with the object’s `phone` field."""
   phone: String

   """Checks for equality with the object’s `groupNumber` field."""
   groupNumber: String

   """Checks for equality with the object’s `course` field."""
   course: Int

   """Checks for equality with the object’s `cityId` field."""
   cityId: UUID

   """Checks for equality with the object’s `universityId` field."""
   universityId: UUID

   """Checks for equality with the object’s `isTeacher` field."""
   isTeacher: Boolean

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `Profile`"""
input ProfileInput {
   firstName: String
   middleName: String
   lastName: String
   phone: String
   groupNumber: String
   course: Int
   cityId: UUID
   universityId: UUID
}

"""
Represents an update to a `Profile`. Fields that are set will be updated.
"""
input ProfilePatch {
   firstName: String
   middleName: String
   lastName: String
   phone: String
   groupNumber: String
   course: Int
   cityId: UUID
   universityId: UUID
}

type ProfilesCodeEditor implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   profileId: UUID!
   codeEditorId: UUID!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads a single `Profile` that is related to this `ProfilesCodeEditor`."""
   profile: Profile

   """
   Reads a single `CodeEditor` that is related to this `ProfilesCodeEditor`.
   """
   codeEditor: CodeEditor
}

"""
A condition to be used against `ProfilesCodeEditor` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProfilesCodeEditorCondition {
   """Checks for equality with the object’s `profileId` field."""
   profileId: UUID

   """Checks for equality with the object’s `codeEditorId` field."""
   codeEditorId: UUID

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `ProfilesCodeEditor`"""
input ProfilesCodeEditorInput {
   profileId: UUID!
   codeEditorId: UUID!
}

"""A connection to a list of `ProfilesCodeEditor` values."""
type ProfilesCodeEditorsConnection {
   """A list of `ProfilesCodeEditor` objects."""
   nodes: [ProfilesCodeEditor]!

   """
   A list of edges which contains the `ProfilesCodeEditor` and cursor to aid in pagination.
   """
   edges: [ProfilesCodeEditorsEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """
   The count of *all* `ProfilesCodeEditor` you could get from the connection.
   """
   totalCount: Int
}

"""A `ProfilesCodeEditor` edge in the connection."""
type ProfilesCodeEditorsEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `ProfilesCodeEditor` at the end of the edge."""
   node: ProfilesCodeEditor
}

"""Methods to use when ordering `ProfilesCodeEditor`."""
enum ProfilesCodeEditorsOrderBy {
   NATURAL
   PROFILE_ID_ASC
   PROFILE_ID_DESC
   CODE_EDITOR_ID_ASC
   CODE_EDITOR_ID_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

"""A connection to a list of `Profile` values."""
type ProfilesConnection {
   """A list of `Profile` objects."""
   nodes: [Profile]!

   """
   A list of edges which contains the `Profile` and cursor to aid in pagination.
   """
   edges: [ProfilesEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `Profile` you could get from the connection."""
   totalCount: Int
}

"""A `Profile` edge in the connection."""
type ProfilesEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `Profile` at the end of the edge."""
   node: Profile
}

"""Methods to use when ordering `Profile`."""
enum ProfilesOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   USER_ID_ASC
   USER_ID_DESC
   FIRST_NAME_ASC
   FIRST_NAME_DESC
   MIDDLE_NAME_ASC
   MIDDLE_NAME_DESC
   LAST_NAME_ASC
   LAST_NAME_DESC
   PHONE_ASC
   PHONE_DESC
   GROUP_NUMBER_ASC
   GROUP_NUMBER_DESC
   COURSE_ASC
   COURSE_DESC
   CITY_ID_ASC
   CITY_ID_DESC
   UNIVERSITY_ID_ASC
   UNIVERSITY_ID_DESC
   IS_TEACHER_ASC
   IS_TEACHER_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

type ProfilesProgrammingLanguage implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   profileId: UUID!
   languageId: UUID!
   createdAt: Datetime!
   updatedAt: Datetime!

   """
   Reads a single `Profile` that is related to this `ProfilesProgrammingLanguage`.
   """
   profile: Profile

   """
   Reads a single `ProgrammingLanguage` that is related to this `ProfilesProgrammingLanguage`.
   """
   language: ProgrammingLanguage
}

"""
A condition to be used against `ProfilesProgrammingLanguage` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ProfilesProgrammingLanguageCondition {
   """Checks for equality with the object’s `profileId` field."""
   profileId: UUID

   """Checks for equality with the object’s `languageId` field."""
   languageId: UUID

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `ProfilesProgrammingLanguage`"""
input ProfilesProgrammingLanguageInput {
   profileId: UUID!
   languageId: UUID!
}

"""A connection to a list of `ProfilesProgrammingLanguage` values."""
type ProfilesProgrammingLanguagesConnection {
   """A list of `ProfilesProgrammingLanguage` objects."""
   nodes: [ProfilesProgrammingLanguage]!

   """
   A list of edges which contains the `ProfilesProgrammingLanguage` and cursor to aid in pagination.
   """
   edges: [ProfilesProgrammingLanguagesEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """
   The count of *all* `ProfilesProgrammingLanguage` you could get from the connection.
   """
   totalCount: Int
}

"""A `ProfilesProgrammingLanguage` edge in the connection."""
type ProfilesProgrammingLanguagesEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `ProfilesProgrammingLanguage` at the end of the edge."""
   node: ProfilesProgrammingLanguage
}

"""Methods to use when ordering `ProfilesProgrammingLanguage`."""
enum ProfilesProgrammingLanguagesOrderBy {
   NATURAL
   PROFILE_ID_ASC
   PROFILE_ID_DESC
   LANGUAGE_ID_ASC
   LANGUAGE_ID_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

type ProfilesTravel implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   profileId: UUID!
   travelId: UUID!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads a single `Profile` that is related to this `ProfilesTravel`."""
   profile: Profile

   """Reads a single `Travel` that is related to this `ProfilesTravel`."""
   travel: Travel
}

"""
A condition to be used against `ProfilesTravel` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProfilesTravelCondition {
   """Checks for equality with the object’s `profileId` field."""
   profileId: UUID

   """Checks for equality with the object’s `travelId` field."""
   travelId: UUID

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `ProfilesTravel`"""
input ProfilesTravelInput {
   profileId: UUID!
   travelId: UUID!
}

"""A connection to a list of `ProfilesTravel` values."""
type ProfilesTravelsConnection {
   """A list of `ProfilesTravel` objects."""
   nodes: [ProfilesTravel]!

   """
   A list of edges which contains the `ProfilesTravel` and cursor to aid in pagination.
   """
   edges: [ProfilesTravelsEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `ProfilesTravel` you could get from the connection."""
   totalCount: Int
}

"""A `ProfilesTravel` edge in the connection."""
type ProfilesTravelsEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `ProfilesTravel` at the end of the edge."""
   node: ProfilesTravel
}

"""Methods to use when ordering `ProfilesTravel`."""
enum ProfilesTravelsOrderBy {
   NATURAL
   PROFILE_ID_ASC
   PROFILE_ID_DESC
   TRAVEL_ID_ASC
   TRAVEL_ID_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

type ProgramInputType implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!
   name: String!
   code: String!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads and enables pagination through a set of `Problem`."""
   problemsByInputTypeId(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Problem`."""
      orderBy: [ProblemsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProblemCondition
   ): ProblemsConnection!
}

"""
A condition to be used against `ProgramInputType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProgramInputTypeCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `name` field."""
   name: String

   """Checks for equality with the object’s `code` field."""
   code: String

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `ProgramInputType`"""
input ProgramInputTypeInput {
   name: String!
   code: String!
}

"""
Represents an update to a `ProgramInputType`. Fields that are set will be updated.
"""
input ProgramInputTypePatch {
   name: String
   code: String
}

"""A connection to a list of `ProgramInputType` values."""
type ProgramInputTypesConnection {
   """A list of `ProgramInputType` objects."""
   nodes: [ProgramInputType]!

   """
   A list of edges which contains the `ProgramInputType` and cursor to aid in pagination.
   """
   edges: [ProgramInputTypesEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """
   The count of *all* `ProgramInputType` you could get from the connection.
   """
   totalCount: Int
}

"""A `ProgramInputType` edge in the connection."""
type ProgramInputTypesEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `ProgramInputType` at the end of the edge."""
   node: ProgramInputType
}

"""Methods to use when ordering `ProgramInputType`."""
enum ProgramInputTypesOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   NAME_ASC
   NAME_DESC
   CODE_ASC
   CODE_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

"""Programming language, each row define one version of some language"""
type ProgrammingLanguage implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!

   """
   Name of language. Use official name, like C++, Go, JavaScript, but not cpp, Golang, ES
   """
   name: String!

   """
   Alias for language. Mostly used as search keyword, like Golang, or define explicitly version of language, like ECMAScript
   """
   alias: String

   """
   Version of language. Version is used for compiler or interpreter. Also can have definition of used extensions and presets
   """
   version: String!
   createdAt: Datetime!
   updatedAt: Datetime!

   """
   Reads and enables pagination through a set of `ProfilesProgrammingLanguage`.
   """
   profilesProgrammingLanguagesByLanguageId(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ProfilesProgrammingLanguage`."""
      orderBy: [ProfilesProgrammingLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProfilesProgrammingLanguageCondition
   ): ProfilesProgrammingLanguagesConnection!

   """Reads and enables pagination through a set of `Compiler`."""
   compilersByLanguageId(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Compiler`."""
      orderBy: [CompilersOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: CompilerCondition
   ): CompilersConnection!
}

"""
A condition to be used against `ProgrammingLanguage` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ProgrammingLanguageCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `name` field."""
   name: String

   """Checks for equality with the object’s `alias` field."""
   alias: String

   """Checks for equality with the object’s `version` field."""
   version: String

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `ProgrammingLanguage`"""
input ProgrammingLanguageInput {
   """
   Name of language. Use official name, like C++, Go, JavaScript, but not cpp, Golang, ES
   """
   name: String!

   """
   Alias for language. Mostly used as search keyword, like Golang, or define explicitly version of language, like ECMAScript
   """
   alias: String

   """
   Version of language. Version is used for compiler or interpreter. Also can have definition of used extensions and presets
   """
   version: String!
}

"""
Represents an update to a `ProgrammingLanguage`. Fields that are set will be updated.
"""
input ProgrammingLanguagePatch {
   """
   Name of language. Use official name, like C++, Go, JavaScript, but not cpp, Golang, ES
   """
   name: String

   """
   Alias for language. Mostly used as search keyword, like Golang, or define explicitly version of language, like ECMAScript
   """
   alias: String

   """
   Version of language. Version is used for compiler or interpreter. Also can have definition of used extensions and presets
   """
   version: String
}

"""A connection to a list of `ProgrammingLanguage` values."""
type ProgrammingLanguagesConnection {
   """A list of `ProgrammingLanguage` objects."""
   nodes: [ProgrammingLanguage]!

   """
   A list of edges which contains the `ProgrammingLanguage` and cursor to aid in pagination.
   """
   edges: [ProgrammingLanguagesEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """
   The count of *all* `ProgrammingLanguage` you could get from the connection.
   """
   totalCount: Int
}

"""A `ProgrammingLanguage` edge in the connection."""
type ProgrammingLanguagesEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `ProgrammingLanguage` at the end of the edge."""
   node: ProgrammingLanguage
}

"""Methods to use when ordering `ProgrammingLanguage`."""
enum ProgrammingLanguagesOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   NAME_ASC
   NAME_DESC
   ALIAS_ASC
   ALIAS_DESC
   VERSION_ASC
   VERSION_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

type ProgramOutputType implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!
   name: String!
   code: String!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads and enables pagination through a set of `Problem`."""
   problemsByOutputTypeId(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Problem`."""
      orderBy: [ProblemsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProblemCondition
   ): ProblemsConnection!
}

"""
A condition to be used against `ProgramOutputType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProgramOutputTypeCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `name` field."""
   name: String

   """Checks for equality with the object’s `code` field."""
   code: String

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `ProgramOutputType`"""
input ProgramOutputTypeInput {
   name: String!
   code: String!
}

"""
Represents an update to a `ProgramOutputType`. Fields that are set will be updated.
"""
input ProgramOutputTypePatch {
   name: String
   code: String
}

"""A connection to a list of `ProgramOutputType` values."""
type ProgramOutputTypesConnection {
   """A list of `ProgramOutputType` objects."""
   nodes: [ProgramOutputType]!

   """
   A list of edges which contains the `ProgramOutputType` and cursor to aid in pagination.
   """
   edges: [ProgramOutputTypesEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """
   The count of *all* `ProgramOutputType` you could get from the connection.
   """
   totalCount: Int
}

"""A `ProgramOutputType` edge in the connection."""
type ProgramOutputTypesEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `ProgramOutputType` at the end of the edge."""
   node: ProgramOutputType
}

"""Methods to use when ordering `ProgramOutputType`."""
enum ProgramOutputTypesOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   NAME_ASC
   NAME_DESC
   CODE_ASC
   CODE_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
   """
   Exposes the root query type nested one level down. This is helpful for Relay 1
   which can only query top level fields if they are in a particular form.
   """
   query: Query!

   """
   The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
   """
   nodeId: ID!

   """Fetches an object given its globally unique `ID`."""
   node(
      """The globally unique `ID`."""
      nodeId: ID!
   ): Node

   """Reads and enables pagination through a set of `City`."""
   cities(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `City`."""
      orderBy: [CitiesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: CityCondition
   ): CitiesConnection

   """Reads and enables pagination through a set of `CodeEditor`."""
   codeEditors(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `CodeEditor`."""
      orderBy: [CodeEditorsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: CodeEditorCondition
   ): CodeEditorsConnection

   """Reads and enables pagination through a set of `Compiler`."""
   compilers(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Compiler`."""
      orderBy: [CompilersOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: CompilerCondition
   ): CompilersConnection

   """Reads and enables pagination through a set of `Contest`."""
   contests(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Contest`."""
      orderBy: [ContestsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ContestCondition
   ): ContestsConnection

   """Reads and enables pagination through a set of `ContestsProfile`."""
   contestsProfiles(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ContestsProfile`."""
      orderBy: [ContestsProfilesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ContestsProfileCondition
   ): ContestsProfilesConnection

   """Reads and enables pagination through a set of `ContestsTeam`."""
   contestsTeams(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ContestsTeam`."""
      orderBy: [ContestsTeamsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ContestsTeamCondition
   ): ContestsTeamsConnection

   """Reads and enables pagination through a set of `Country`."""
   countries(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Country`."""
      orderBy: [CountriesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: CountryCondition
   ): CountriesConnection

   """Reads and enables pagination through a set of `FailType`."""
   failTypes(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `FailType`."""
      orderBy: [FailTypesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: FailTypeCondition
   ): FailTypesConnection

   """Reads and enables pagination through a set of `Language`."""
   languages(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Language`."""
      orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: LanguageCondition
   ): LanguagesConnection

   """Reads and enables pagination through a set of `Problem`."""
   problems(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Problem`."""
      orderBy: [ProblemsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProblemCondition
   ): ProblemsConnection

   """Reads and enables pagination through a set of `ProblemsTag`."""
   problemsTags(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ProblemsTag`."""
      orderBy: [ProblemsTagsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProblemsTagCondition
   ): ProblemsTagsConnection

   """Reads and enables pagination through a set of `Profile`."""
   profiles(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Profile`."""
      orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProfileCondition
   ): ProfilesConnection

   """Reads and enables pagination through a set of `ProfilesCodeEditor`."""
   profilesCodeEditors(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ProfilesCodeEditor`."""
      orderBy: [ProfilesCodeEditorsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProfilesCodeEditorCondition
   ): ProfilesCodeEditorsConnection

   """
   Reads and enables pagination through a set of `ProfilesProgrammingLanguage`.
   """
   profilesProgrammingLanguages(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ProfilesProgrammingLanguage`."""
      orderBy: [ProfilesProgrammingLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProfilesProgrammingLanguageCondition
   ): ProfilesProgrammingLanguagesConnection

   """Reads and enables pagination through a set of `ProfilesTravel`."""
   profilesTravels(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ProfilesTravel`."""
      orderBy: [ProfilesTravelsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProfilesTravelCondition
   ): ProfilesTravelsConnection

   """Reads and enables pagination through a set of `ProgramInputType`."""
   programInputTypes(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ProgramInputType`."""
      orderBy: [ProgramInputTypesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProgramInputTypeCondition
   ): ProgramInputTypesConnection

   """Reads and enables pagination through a set of `ProgramOutputType`."""
   programOutputTypes(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ProgramOutputType`."""
      orderBy: [ProgramOutputTypesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProgramOutputTypeCondition
   ): ProgramOutputTypesConnection

   """Reads and enables pagination through a set of `ProgrammingLanguage`."""
   programmingLanguages(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ProgrammingLanguage`."""
      orderBy: [ProgrammingLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProgrammingLanguageCondition
   ): ProgrammingLanguagesConnection

   """Reads and enables pagination through a set of `Solution`."""
   solutions(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Solution`."""
      orderBy: [SolutionsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: SolutionCondition
   ): SolutionsConnection

   """Reads and enables pagination through a set of `SolutionRun`."""
   solutionRuns(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `SolutionRun`."""
      orderBy: [SolutionRunsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: SolutionRunCondition
   ): SolutionRunsConnection

   """Reads and enables pagination through a set of `Tag`."""
   tags(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Tag`."""
      orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: TagCondition
   ): TagsConnection

   """Reads and enables pagination through a set of `Team`."""
   teams(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Team`."""
      orderBy: [TeamsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: TeamCondition
   ): TeamsConnection

   """Reads and enables pagination through a set of `TeamsProfile`."""
   teamsProfiles(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `TeamsProfile`."""
      orderBy: [TeamsProfilesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: TeamsProfileCondition
   ): TeamsProfilesConnection

   """Reads and enables pagination through a set of `Test`."""
   tests(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Test`."""
      orderBy: [TestsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: TestCondition
   ): TestsConnection

   """Reads and enables pagination through a set of `Travel`."""
   travels(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Travel`."""
      orderBy: [TravelsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: TravelCondition
   ): TravelsConnection

   """Reads and enables pagination through a set of `University`."""
   universities(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `University`."""
      orderBy: [UniversitiesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: UniversityCondition
   ): UniversitiesConnection
   city(id: UUID!): City
   codeEditor(id: UUID!): CodeEditor
   codeEditorByNameAndVersion(name: String!, version: String!): CodeEditor
   codeEditorByVersion(version: String!): CodeEditor
   compiler(id: UUID!): Compiler
   compilerByNameAndVersion(name: String!, version: String!): Compiler
   compilerByVersion(version: String!): Compiler
   contest(id: UUID!): Contest
   contestsProfile(contestId: UUID!, profileId: UUID!): ContestsProfile
   contestsTeam(contestId: UUID!, teamId: UUID!): ContestsTeam
   country(id: UUID!): Country
   failType(id: UUID!): FailType
   failTypeByCode(code: Int!): FailType
   language(id: UUID!): Language
   problem(id: UUID!): Problem
   problemsTag(problemId: UUID!, tagId: UUID!): ProblemsTag
   profile(id: UUID!): Profile
   profilesCodeEditor(profileId: UUID!, codeEditorId: UUID!): ProfilesCodeEditor
   profilesProgrammingLanguage(profileId: UUID!, languageId: UUID!): ProfilesProgrammingLanguage
   profilesTravel(profileId: UUID!, travelId: UUID!): ProfilesTravel
   programInputType(id: UUID!): ProgramInputType
   programInputTypeByName(name: String!): ProgramInputType
   programInputTypeByCode(code: String!): ProgramInputType
   programOutputType(id: UUID!): ProgramOutputType
   programOutputTypeByName(name: String!): ProgramOutputType
   programOutputTypeByCode(code: String!): ProgramOutputType
   programmingLanguage(id: UUID!): ProgrammingLanguage
   programmingLanguageByNameAndVersion(name: String!, version: String!): ProgrammingLanguage
   programmingLanguageByVersion(version: String!): ProgrammingLanguage
   solution(id: UUID!): Solution
   solutionRun(id: UUID!): SolutionRun
   tag(id: UUID!): Tag
   team(id: UUID!): Team
   teamsProfile(teamId: UUID!, profileId: UUID!): TeamsProfile
   test(id: UUID!): Test
   travel(id: UUID!): Travel
   university(id: UUID!): University
   userAuthentication(id: UUID!): UserAuthentication
   userAuthenticationByServiceAndIdentifier(service: String!, identifier: String!): UserAuthentication
   userEmail(id: UUID!): UserEmail
   userEmailByUserIdAndEmail(userId: UUID!, email: String!): UserEmail
   user(id: UUID!): User
   userByUsername(username: String!): User
   currentUser: User
   currentUserCanSendSolution(problemId: UUID): Boolean

   """Reads and enables pagination through a set of `Country`."""
   searchCountries(
      search: String

      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor
   ): CountriesConnection!

   """Reads a single `City` using its globally unique `ID`."""
   cityByNodeId(
      """The globally unique `ID` to be used in selecting a single `City`."""
      nodeId: ID!
   ): City

   """Reads a single `CodeEditor` using its globally unique `ID`."""
   codeEditorByNodeId(
      """
      The globally unique `ID` to be used in selecting a single `CodeEditor`.
      """
      nodeId: ID!
   ): CodeEditor

   """Reads a single `Compiler` using its globally unique `ID`."""
   compilerByNodeId(
      """The globally unique `ID` to be used in selecting a single `Compiler`."""
      nodeId: ID!
   ): Compiler

   """Reads a single `Contest` using its globally unique `ID`."""
   contestByNodeId(
      """The globally unique `ID` to be used in selecting a single `Contest`."""
      nodeId: ID!
   ): Contest

   """Reads a single `ContestsProfile` using its globally unique `ID`."""
   contestsProfileByNodeId(
      """
      The globally unique `ID` to be used in selecting a single `ContestsProfile`.
      """
      nodeId: ID!
   ): ContestsProfile

   """Reads a single `ContestsTeam` using its globally unique `ID`."""
   contestsTeamByNodeId(
      """
      The globally unique `ID` to be used in selecting a single `ContestsTeam`.
      """
      nodeId: ID!
   ): ContestsTeam

   """Reads a single `Country` using its globally unique `ID`."""
   countryByNodeId(
      """The globally unique `ID` to be used in selecting a single `Country`."""
      nodeId: ID!
   ): Country

   """Reads a single `FailType` using its globally unique `ID`."""
   failTypeByNodeId(
      """The globally unique `ID` to be used in selecting a single `FailType`."""
      nodeId: ID!
   ): FailType

   """Reads a single `Language` using its globally unique `ID`."""
   languageByNodeId(
      """The globally unique `ID` to be used in selecting a single `Language`."""
      nodeId: ID!
   ): Language

   """Reads a single `Problem` using its globally unique `ID`."""
   problemByNodeId(
      """The globally unique `ID` to be used in selecting a single `Problem`."""
      nodeId: ID!
   ): Problem

   """Reads a single `ProblemsTag` using its globally unique `ID`."""
   problemsTagByNodeId(
      """
      The globally unique `ID` to be used in selecting a single `ProblemsTag`.
      """
      nodeId: ID!
   ): ProblemsTag

   """Reads a single `Profile` using its globally unique `ID`."""
   profileByNodeId(
      """The globally unique `ID` to be used in selecting a single `Profile`."""
      nodeId: ID!
   ): Profile

   """Reads a single `ProfilesCodeEditor` using its globally unique `ID`."""
   profilesCodeEditorByNodeId(
      """
      The globally unique `ID` to be used in selecting a single `ProfilesCodeEditor`.
      """
      nodeId: ID!
   ): ProfilesCodeEditor

   """
   Reads a single `ProfilesProgrammingLanguage` using its globally unique `ID`.
   """
   profilesProgrammingLanguageByNodeId(
      """
      The globally unique `ID` to be used in selecting a single `ProfilesProgrammingLanguage`.
      """
      nodeId: ID!
   ): ProfilesProgrammingLanguage

   """Reads a single `ProfilesTravel` using its globally unique `ID`."""
   profilesTravelByNodeId(
      """
      The globally unique `ID` to be used in selecting a single `ProfilesTravel`.
      """
      nodeId: ID!
   ): ProfilesTravel

   """Reads a single `ProgramInputType` using its globally unique `ID`."""
   programInputTypeByNodeId(
      """
      The globally unique `ID` to be used in selecting a single `ProgramInputType`.
      """
      nodeId: ID!
   ): ProgramInputType

   """Reads a single `ProgramOutputType` using its globally unique `ID`."""
   programOutputTypeByNodeId(
      """
      The globally unique `ID` to be used in selecting a single `ProgramOutputType`.
      """
      nodeId: ID!
   ): ProgramOutputType

   """Reads a single `ProgrammingLanguage` using its globally unique `ID`."""
   programmingLanguageByNodeId(
      """
      The globally unique `ID` to be used in selecting a single `ProgrammingLanguage`.
      """
      nodeId: ID!
   ): ProgrammingLanguage

   """Reads a single `Solution` using its globally unique `ID`."""
   solutionByNodeId(
      """The globally unique `ID` to be used in selecting a single `Solution`."""
      nodeId: ID!
   ): Solution

   """Reads a single `SolutionRun` using its globally unique `ID`."""
   solutionRunByNodeId(
      """
      The globally unique `ID` to be used in selecting a single `SolutionRun`.
      """
      nodeId: ID!
   ): SolutionRun

   """Reads a single `Tag` using its globally unique `ID`."""
   tagByNodeId(
      """The globally unique `ID` to be used in selecting a single `Tag`."""
      nodeId: ID!
   ): Tag

   """Reads a single `Team` using its globally unique `ID`."""
   teamByNodeId(
      """The globally unique `ID` to be used in selecting a single `Team`."""
      nodeId: ID!
   ): Team

   """Reads a single `TeamsProfile` using its globally unique `ID`."""
   teamsProfileByNodeId(
      """
      The globally unique `ID` to be used in selecting a single `TeamsProfile`.
      """
      nodeId: ID!
   ): TeamsProfile

   """Reads a single `Test` using its globally unique `ID`."""
   testByNodeId(
      """The globally unique `ID` to be used in selecting a single `Test`."""
      nodeId: ID!
   ): Test

   """Reads a single `Travel` using its globally unique `ID`."""
   travelByNodeId(
      """The globally unique `ID` to be used in selecting a single `Travel`."""
      nodeId: ID!
   ): Travel

   """Reads a single `University` using its globally unique `ID`."""
   universityByNodeId(
      """
      The globally unique `ID` to be used in selecting a single `University`.
      """
      nodeId: ID!
   ): University

   """Reads a single `UserAuthentication` using its globally unique `ID`."""
   userAuthenticationByNodeId(
      """
      The globally unique `ID` to be used in selecting a single `UserAuthentication`.
      """
      nodeId: ID!
   ): UserAuthentication

   """Reads a single `UserEmail` using its globally unique `ID`."""
   userEmailByNodeId(
      """The globally unique `ID` to be used in selecting a single `UserEmail`."""
      nodeId: ID!
   ): UserEmail

   """Reads a single `User` using its globally unique `ID`."""
   userByNodeId(
      """The globally unique `ID` to be used in selecting a single `User`."""
      nodeId: ID!
   ): User
}

input RegisterInput {
   username: String!
   email: String!
   password: String!
   name: String
   avatarUrl: String
   firstName: String!
   middleName: String
   lastName: String
}

type RegisterPayload {
   user: User!
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
   userId: UUID!
   resetToken: String!
   newPassword: String!
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String
   user: User

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `User`. May be used by Relay 1."""
   userEdge(
      """The method to use when ordering `User`."""
      orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
   ): UsersEdge
}

type Solution implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!
   code: String!
   problemId: UUID!
   compilerId: UUID!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads a single `Problem` that is related to this `Solution`."""
   problem: Problem

   """Reads a single `Compiler` that is related to this `Solution`."""
   compiler: Compiler

   """Reads and enables pagination through a set of `SolutionRun`."""
   solutionRuns(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `SolutionRun`."""
      orderBy: [SolutionRunsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: SolutionRunCondition
   ): SolutionRunsConnection!
}

"""
A condition to be used against `Solution` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SolutionCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `code` field."""
   code: String

   """Checks for equality with the object’s `problemId` field."""
   problemId: UUID

   """Checks for equality with the object’s `compilerId` field."""
   compilerId: UUID

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `Solution`"""
input SolutionInput {
   code: String!
   problemId: UUID!
   compilerId: UUID!
}

"""
Represents an update to a `Solution`. Fields that are set will be updated.
"""
input SolutionPatch {
   code: String
   problemId: UUID
   compilerId: UUID
}

type SolutionRun implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!
   solutionId: UUID!
   failedTestId: UUID
   outputOfFailedTest: String
   isAllTestsSuccessful: Boolean
   timeOfFailedRun: Date
   typeOfFail: UUID
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads a single `Solution` that is related to this `SolutionRun`."""
   solution: Solution

   """Reads a single `Test` that is related to this `SolutionRun`."""
   failedTest: Test

   """Reads a single `FailType` that is related to this `SolutionRun`."""
   failTypeByTypeOfFail: FailType
}

"""
A condition to be used against `SolutionRun` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SolutionRunCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `solutionId` field."""
   solutionId: UUID

   """Checks for equality with the object’s `failedTestId` field."""
   failedTestId: UUID

   """Checks for equality with the object’s `outputOfFailedTest` field."""
   outputOfFailedTest: String

   """Checks for equality with the object’s `isAllTestsSuccessful` field."""
   isAllTestsSuccessful: Boolean

   """Checks for equality with the object’s `timeOfFailedRun` field."""
   timeOfFailedRun: Date

   """Checks for equality with the object’s `typeOfFail` field."""
   typeOfFail: UUID

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `SolutionRun`"""
input SolutionRunInput {
   solutionId: UUID!
   failedTestId: UUID
   outputOfFailedTest: String
   isAllTestsSuccessful: Boolean
   timeOfFailedRun: Date
   typeOfFail: UUID
}

"""
Represents an update to a `SolutionRun`. Fields that are set will be updated.
"""
input SolutionRunPatch {
   solutionId: UUID
   failedTestId: UUID
   outputOfFailedTest: String
   isAllTestsSuccessful: Boolean
   timeOfFailedRun: Date
   typeOfFail: UUID
}

"""A connection to a list of `SolutionRun` values."""
type SolutionRunsConnection {
   """A list of `SolutionRun` objects."""
   nodes: [SolutionRun]!

   """
   A list of edges which contains the `SolutionRun` and cursor to aid in pagination.
   """
   edges: [SolutionRunsEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `SolutionRun` you could get from the connection."""
   totalCount: Int
}

"""A `SolutionRun` edge in the connection."""
type SolutionRunsEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `SolutionRun` at the end of the edge."""
   node: SolutionRun
}

"""Methods to use when ordering `SolutionRun`."""
enum SolutionRunsOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   SOLUTION_ID_ASC
   SOLUTION_ID_DESC
   FAILED_TEST_ID_ASC
   FAILED_TEST_ID_DESC
   OUTPUT_OF_FAILED_TEST_ASC
   OUTPUT_OF_FAILED_TEST_DESC
   IS_ALL_TESTS_SUCCESSFUL_ASC
   IS_ALL_TESTS_SUCCESSFUL_DESC
   TIME_OF_FAILED_RUN_ASC
   TIME_OF_FAILED_RUN_DESC
   TYPE_OF_FAIL_ASC
   TYPE_OF_FAIL_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

"""A connection to a list of `Solution` values."""
type SolutionsConnection {
   """A list of `Solution` objects."""
   nodes: [Solution]!

   """
   A list of edges which contains the `Solution` and cursor to aid in pagination.
   """
   edges: [SolutionsEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `Solution` you could get from the connection."""
   totalCount: Int
}

"""A `Solution` edge in the connection."""
type SolutionsEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `Solution` at the end of the edge."""
   node: Solution
}

"""Methods to use when ordering `Solution`."""
enum SolutionsOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   CODE_ASC
   CODE_DESC
   PROBLEM_ID_ASC
   PROBLEM_ID_DESC
   COMPILER_ID_ASC
   COMPILER_ID_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

type Tag implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!
   name: String!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads and enables pagination through a set of `ProblemsTag`."""
   problemsTags(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ProblemsTag`."""
      orderBy: [ProblemsTagsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProblemsTagCondition
   ): ProblemsTagsConnection!
}

"""
A condition to be used against `Tag` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TagCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `name` field."""
   name: String

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `Tag`"""
input TagInput {
   name: String!
}

"""Represents an update to a `Tag`. Fields that are set will be updated."""
input TagPatch {
   name: String
}

"""A connection to a list of `Tag` values."""
type TagsConnection {
   """A list of `Tag` objects."""
   nodes: [Tag]!

   """
   A list of edges which contains the `Tag` and cursor to aid in pagination.
   """
   edges: [TagsEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `Tag` you could get from the connection."""
   totalCount: Int
}

"""A `Tag` edge in the connection."""
type TagsEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `Tag` at the end of the edge."""
   node: Tag
}

"""Methods to use when ordering `Tag`."""
enum TagsOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   NAME_ASC
   NAME_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

type Team implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!
   name: String!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads and enables pagination through a set of `TeamsProfile`."""
   teamsProfiles(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `TeamsProfile`."""
      orderBy: [TeamsProfilesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: TeamsProfileCondition
   ): TeamsProfilesConnection!

   """Reads and enables pagination through a set of `ContestsTeam`."""
   contestsTeams(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ContestsTeam`."""
      orderBy: [ContestsTeamsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ContestsTeamCondition
   ): ContestsTeamsConnection!
}

"""
A condition to be used against `Team` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TeamCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `name` field."""
   name: String

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `Team`"""
input TeamInput {
   name: String!
}

"""Represents an update to a `Team`. Fields that are set will be updated."""
input TeamPatch {
   name: String
}

"""A connection to a list of `Team` values."""
type TeamsConnection {
   """A list of `Team` objects."""
   nodes: [Team]!

   """
   A list of edges which contains the `Team` and cursor to aid in pagination.
   """
   edges: [TeamsEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `Team` you could get from the connection."""
   totalCount: Int
}

"""A `Team` edge in the connection."""
type TeamsEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `Team` at the end of the edge."""
   node: Team
}

"""Methods to use when ordering `Team`."""
enum TeamsOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   NAME_ASC
   NAME_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

type TeamsProfile implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   teamId: UUID!
   profileId: UUID!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads a single `Team` that is related to this `TeamsProfile`."""
   team: Team

   """Reads a single `Profile` that is related to this `TeamsProfile`."""
   profile: Profile
}

"""
A condition to be used against `TeamsProfile` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TeamsProfileCondition {
   """Checks for equality with the object’s `teamId` field."""
   teamId: UUID

   """Checks for equality with the object’s `profileId` field."""
   profileId: UUID

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `TeamsProfile`"""
input TeamsProfileInput {
   teamId: UUID!
   profileId: UUID!
}

"""A connection to a list of `TeamsProfile` values."""
type TeamsProfilesConnection {
   """A list of `TeamsProfile` objects."""
   nodes: [TeamsProfile]!

   """
   A list of edges which contains the `TeamsProfile` and cursor to aid in pagination.
   """
   edges: [TeamsProfilesEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `TeamsProfile` you could get from the connection."""
   totalCount: Int
}

"""A `TeamsProfile` edge in the connection."""
type TeamsProfilesEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `TeamsProfile` at the end of the edge."""
   node: TeamsProfile
}

"""Methods to use when ordering `TeamsProfile`."""
enum TeamsProfilesOrderBy {
   NATURAL
   TEAM_ID_ASC
   TEAM_ID_DESC
   PROFILE_ID_ASC
   PROFILE_ID_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

type Test implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!
   index: Int!
   input: String!
   output: String!
   public: Boolean
   problemId: UUID!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads a single `Problem` that is related to this `Test`."""
   problem: Problem

   """Reads and enables pagination through a set of `SolutionRun`."""
   solutionRunsByFailedTestId(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `SolutionRun`."""
      orderBy: [SolutionRunsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: SolutionRunCondition
   ): SolutionRunsConnection!
}

"""
A condition to be used against `Test` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TestCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `index` field."""
   index: Int

   """Checks for equality with the object’s `input` field."""
   input: String

   """Checks for equality with the object’s `output` field."""
   output: String

   """Checks for equality with the object’s `public` field."""
   public: Boolean

   """Checks for equality with the object’s `problemId` field."""
   problemId: UUID

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `Test`"""
input TestInput {
   index: Int!
   input: String!
   output: String!
   public: Boolean
}

"""Represents an update to a `Test`. Fields that are set will be updated."""
input TestPatch {
   index: Int
   input: String
   output: String
   public: Boolean
}

"""A connection to a list of `Test` values."""
type TestsConnection {
   """A list of `Test` objects."""
   nodes: [Test]!

   """
   A list of edges which contains the `Test` and cursor to aid in pagination.
   """
   edges: [TestsEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `Test` you could get from the connection."""
   totalCount: Int
}

"""A `Test` edge in the connection."""
type TestsEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `Test` at the end of the edge."""
   node: Test
}

"""Methods to use when ordering `Test`."""
enum TestsOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   INDEX_ASC
   INDEX_DESC
   INPUT_ASC
   INPUT_DESC
   OUTPUT_ASC
   OUTPUT_DESC
   PUBLIC_ASC
   PUBLIC_DESC
   PROBLEM_ID_ASC
   PROBLEM_ID_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

type Travel implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!
   arrivalTime: Datetime
   arrivalPlace: String
   departureTime: Datetime
   departurePlace: Datetime
   isNeedHousing: Boolean!
   commentary: String
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads and enables pagination through a set of `ProfilesTravel`."""
   profilesTravels(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `ProfilesTravel`."""
      orderBy: [ProfilesTravelsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProfilesTravelCondition
   ): ProfilesTravelsConnection!
}

"""
A condition to be used against `Travel` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TravelCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `arrivalTime` field."""
   arrivalTime: Datetime

   """Checks for equality with the object’s `arrivalPlace` field."""
   arrivalPlace: String

   """Checks for equality with the object’s `departureTime` field."""
   departureTime: Datetime

   """Checks for equality with the object’s `departurePlace` field."""
   departurePlace: Datetime

   """Checks for equality with the object’s `isNeedHousing` field."""
   isNeedHousing: Boolean

   """Checks for equality with the object’s `commentary` field."""
   commentary: String

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `Travel`"""
input TravelInput {
   arrivalTime: Datetime
   arrivalPlace: String
   departureTime: Datetime
   departurePlace: Datetime
   isNeedHousing: Boolean
   commentary: String
}

"""
Represents an update to a `Travel`. Fields that are set will be updated.
"""
input TravelPatch {
   arrivalTime: Datetime
   arrivalPlace: String
   departureTime: Datetime
   departurePlace: Datetime
   isNeedHousing: Boolean
   commentary: String
}

"""A connection to a list of `Travel` values."""
type TravelsConnection {
   """A list of `Travel` objects."""
   nodes: [Travel]!

   """
   A list of edges which contains the `Travel` and cursor to aid in pagination.
   """
   edges: [TravelsEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `Travel` you could get from the connection."""
   totalCount: Int
}

"""A `Travel` edge in the connection."""
type TravelsEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `Travel` at the end of the edge."""
   node: Travel
}

"""Methods to use when ordering `Travel`."""
enum TravelsOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   ARRIVAL_TIME_ASC
   ARRIVAL_TIME_DESC
   ARRIVAL_PLACE_ASC
   ARRIVAL_PLACE_DESC
   DEPARTURE_TIME_ASC
   DEPARTURE_TIME_DESC
   DEPARTURE_PLACE_ASC
   DEPARTURE_PLACE_DESC
   IS_NEED_HOUSING_ASC
   IS_NEED_HOUSING_DESC
   COMMENTARY_ASC
   COMMENTARY_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

"""A connection to a list of `University` values."""
type UniversitiesConnection {
   """A list of `University` objects."""
   nodes: [University]!

   """
   A list of edges which contains the `University` and cursor to aid in pagination.
   """
   edges: [UniversitiesEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `University` you could get from the connection."""
   totalCount: Int
}

"""A `University` edge in the connection."""
type UniversitiesEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `University` at the end of the edge."""
   node: University
}

"""Methods to use when ordering `University`."""
enum UniversitiesOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   CITY_ID_ASC
   CITY_ID_DESC
   SHORT_NAME_ASC
   SHORT_NAME_DESC
   LONG_NAME_ASC
   LONG_NAME_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

type University implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!
   cityId: UUID!
   shortName: String!
   longName: String
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads a single `City` that is related to this `University`."""
   city: City

   """Reads and enables pagination through a set of `Profile`."""
   profiles(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Profile`."""
      orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProfileCondition
   ): ProfilesConnection!
}

"""
A condition to be used against `University` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UniversityCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `cityId` field."""
   cityId: UUID

   """Checks for equality with the object’s `shortName` field."""
   shortName: String

   """Checks for equality with the object’s `longName` field."""
   longName: String

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `University`"""
input UniversityInput {
   cityId: UUID!
   shortName: String!
   longName: String
}

"""
Represents an update to a `University`. Fields that are set will be updated.
"""
input UniversityPatch {
   cityId: UUID
   shortName: String
   longName: String
}

"""All input for the `updateCityByNodeId` mutation."""
input UpdateCityByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `City` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `City` being updated.
   """
   patch: CityPatch!
}

"""All input for the `updateCity` mutation."""
input UpdateCityInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `City` being updated.
   """
   patch: CityPatch!
   id: UUID!
}

"""The output of our update `City` mutation."""
type UpdateCityPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `City` that was updated by this mutation."""
   city: City

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Country` that is related to this `City`."""
   country: Country

   """An edge for our `City`. May be used by Relay 1."""
   cityEdge(
      """The method to use when ordering `City`."""
      orderBy: [CitiesOrderBy!] = PRIMARY_KEY_ASC
   ): CitiesEdge
}

"""All input for the `updateCodeEditorByNameAndVersion` mutation."""
input UpdateCodeEditorByNameAndVersionInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `CodeEditor` being updated.
   """
   patch: CodeEditorPatch!

   """Name of code editor. Use official name, like Visual Studio"""
   name: String!

   """
   Version of code editor. Version is used for define which margin version is will be used, like Visual Studio 2017
   """
   version: String!
}

"""All input for the `updateCodeEditorByNodeId` mutation."""
input UpdateCodeEditorByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `CodeEditor` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `CodeEditor` being updated.
   """
   patch: CodeEditorPatch!
}

"""All input for the `updateCodeEditorByVersion` mutation."""
input UpdateCodeEditorByVersionInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `CodeEditor` being updated.
   """
   patch: CodeEditorPatch!

   """
   Version of code editor. Version is used for define which margin version is will be used, like Visual Studio 2017
   """
   version: String!
}

"""All input for the `updateCodeEditor` mutation."""
input UpdateCodeEditorInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `CodeEditor` being updated.
   """
   patch: CodeEditorPatch!
   id: UUID!
}

"""The output of our update `CodeEditor` mutation."""
type UpdateCodeEditorPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `CodeEditor` that was updated by this mutation."""
   codeEditor: CodeEditor

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `CodeEditor`. May be used by Relay 1."""
   codeEditorEdge(
      """The method to use when ordering `CodeEditor`."""
      orderBy: [CodeEditorsOrderBy!] = PRIMARY_KEY_ASC
   ): CodeEditorsEdge
}

"""All input for the `updateCompilerByNameAndVersion` mutation."""
input UpdateCompilerByNameAndVersionInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `Compiler` being updated.
   """
   patch: CompilerPatch!

   """Compiler name"""
   name: String!

   """Compiler version"""
   version: String!
}

"""All input for the `updateCompilerByNodeId` mutation."""
input UpdateCompilerByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Compiler` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `Compiler` being updated.
   """
   patch: CompilerPatch!
}

"""All input for the `updateCompilerByVersion` mutation."""
input UpdateCompilerByVersionInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `Compiler` being updated.
   """
   patch: CompilerPatch!

   """Compiler version"""
   version: String!
}

"""All input for the `updateCompiler` mutation."""
input UpdateCompilerInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `Compiler` being updated.
   """
   patch: CompilerPatch!
   id: UUID!
}

"""The output of our update `Compiler` mutation."""
type UpdateCompilerPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Compiler` that was updated by this mutation."""
   compiler: Compiler

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """
   Reads a single `ProgrammingLanguage` that is related to this `Compiler`.
   """
   language: ProgrammingLanguage

   """An edge for our `Compiler`. May be used by Relay 1."""
   compilerEdge(
      """The method to use when ordering `Compiler`."""
      orderBy: [CompilersOrderBy!] = PRIMARY_KEY_ASC
   ): CompilersEdge
}

"""All input for the `updateContestByNodeId` mutation."""
input UpdateContestByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Contest` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `Contest` being updated.
   """
   patch: ContestPatch!
}

"""All input for the `updateContest` mutation."""
input UpdateContestInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `Contest` being updated.
   """
   patch: ContestPatch!
   id: UUID!
}

"""The output of our update `Contest` mutation."""
type UpdateContestPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Contest` that was updated by this mutation."""
   contest: Contest

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `User` that is related to this `Contest`."""
   creator: User

   """An edge for our `Contest`. May be used by Relay 1."""
   contestEdge(
      """The method to use when ordering `Contest`."""
      orderBy: [ContestsOrderBy!] = PRIMARY_KEY_ASC
   ): ContestsEdge
}

"""All input for the `updateCountryByNodeId` mutation."""
input UpdateCountryByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Country` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `Country` being updated.
   """
   patch: CountryPatch!
}

"""All input for the `updateCountry` mutation."""
input UpdateCountryInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `Country` being updated.
   """
   patch: CountryPatch!
   id: UUID!
}

"""The output of our update `Country` mutation."""
type UpdateCountryPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Country` that was updated by this mutation."""
   country: Country

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `Country`. May be used by Relay 1."""
   countryEdge(
      """The method to use when ordering `Country`."""
      orderBy: [CountriesOrderBy!] = PRIMARY_KEY_ASC
   ): CountriesEdge
}

"""All input for the `updateFailTypeByCode` mutation."""
input UpdateFailTypeByCodeInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `FailType` being updated.
   """
   patch: FailTypePatch!
   code: Int!
}

"""All input for the `updateFailTypeByNodeId` mutation."""
input UpdateFailTypeByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `FailType` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `FailType` being updated.
   """
   patch: FailTypePatch!
}

"""All input for the `updateFailType` mutation."""
input UpdateFailTypeInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `FailType` being updated.
   """
   patch: FailTypePatch!
   id: UUID!
}

"""The output of our update `FailType` mutation."""
type UpdateFailTypePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `FailType` that was updated by this mutation."""
   failType: FailType

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `FailType`. May be used by Relay 1."""
   failTypeEdge(
      """The method to use when ordering `FailType`."""
      orderBy: [FailTypesOrderBy!] = PRIMARY_KEY_ASC
   ): FailTypesEdge
}

"""All input for the `updateLanguageByNodeId` mutation."""
input UpdateLanguageByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Language` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `Language` being updated.
   """
   patch: LanguagePatch!
}

"""All input for the `updateLanguage` mutation."""
input UpdateLanguageInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `Language` being updated.
   """
   patch: LanguagePatch!
   id: UUID!
}

"""The output of our update `Language` mutation."""
type UpdateLanguagePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Language` that was updated by this mutation."""
   language: Language

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `Language`. May be used by Relay 1."""
   languageEdge(
      """The method to use when ordering `Language`."""
      orderBy: [LanguagesOrderBy!] = PRIMARY_KEY_ASC
   ): LanguagesEdge
}

"""All input for the `updateProblemByNodeId` mutation."""
input UpdateProblemByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Problem` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `Problem` being updated.
   """
   patch: ProblemPatch!
}

"""All input for the `updateProblem` mutation."""
input UpdateProblemInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `Problem` being updated.
   """
   patch: ProblemPatch!
   id: UUID!
}

"""The output of our update `Problem` mutation."""
type UpdateProblemPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Problem` that was updated by this mutation."""
   problem: Problem

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `ProgramInputType` that is related to this `Problem`."""
   inputType: ProgramInputType

   """Reads a single `ProgramOutputType` that is related to this `Problem`."""
   outputType: ProgramOutputType

   """Reads a single `Profile` that is related to this `Problem`."""
   author: Profile

   """Reads a single `Profile` that is related to this `Problem`."""
   tester: Profile

   """An edge for our `Problem`. May be used by Relay 1."""
   problemEdge(
      """The method to use when ordering `Problem`."""
      orderBy: [ProblemsOrderBy!] = PRIMARY_KEY_ASC
   ): ProblemsEdge
}

"""All input for the `updateProfileByNodeId` mutation."""
input UpdateProfileByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Profile` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `Profile` being updated.
   """
   patch: ProfilePatch!
}

"""All input for the `updateProfile` mutation."""
input UpdateProfileInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `Profile` being updated.
   """
   patch: ProfilePatch!
   id: UUID!
}

"""The output of our update `Profile` mutation."""
type UpdateProfilePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Profile` that was updated by this mutation."""
   profile: Profile

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `User` that is related to this `Profile`."""
   user: User

   """Reads a single `City` that is related to this `Profile`."""
   city: City

   """Reads a single `University` that is related to this `Profile`."""
   university: University

   """An edge for our `Profile`. May be used by Relay 1."""
   profileEdge(
      """The method to use when ordering `Profile`."""
      orderBy: [ProfilesOrderBy!] = PRIMARY_KEY_ASC
   ): ProfilesEdge
}

"""All input for the `updateProgramInputTypeByCode` mutation."""
input UpdateProgramInputTypeByCodeInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `ProgramInputType` being updated.
   """
   patch: ProgramInputTypePatch!
   code: String!
}

"""All input for the `updateProgramInputTypeByName` mutation."""
input UpdateProgramInputTypeByNameInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `ProgramInputType` being updated.
   """
   patch: ProgramInputTypePatch!
   name: String!
}

"""All input for the `updateProgramInputTypeByNodeId` mutation."""
input UpdateProgramInputTypeByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `ProgramInputType` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `ProgramInputType` being updated.
   """
   patch: ProgramInputTypePatch!
}

"""All input for the `updateProgramInputType` mutation."""
input UpdateProgramInputTypeInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `ProgramInputType` being updated.
   """
   patch: ProgramInputTypePatch!
   id: UUID!
}

"""The output of our update `ProgramInputType` mutation."""
type UpdateProgramInputTypePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ProgramInputType` that was updated by this mutation."""
   programInputType: ProgramInputType

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `ProgramInputType`. May be used by Relay 1."""
   programInputTypeEdge(
      """The method to use when ordering `ProgramInputType`."""
      orderBy: [ProgramInputTypesOrderBy!] = PRIMARY_KEY_ASC
   ): ProgramInputTypesEdge
}

"""
All input for the `updateProgrammingLanguageByNameAndVersion` mutation.
   """
   input UpdateProgrammingLanguageByNameAndVersionInput {
      """
      An arbitrary string value with no semantic meaning. Will be included in the
      payload verbatim. May be used to track mutations by the client.
      """
      clientMutationId: String

      """
      An object where the defined keys will be set on the `ProgrammingLanguage` being updated.
      """
      patch: ProgrammingLanguagePatch!

      """
      Name of language. Use official name, like C++, Go, JavaScript, but not cpp, Golang, ES
      """
      name: String!

      """
      Version of language. Version is used for compiler or interpreter. Also can have definition of used extensions and presets
      """
      version: String!
   }

"""All input for the `updateProgrammingLanguageByNodeId` mutation."""
input UpdateProgrammingLanguageByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `ProgrammingLanguage` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `ProgrammingLanguage` being updated.
   """
   patch: ProgrammingLanguagePatch!
}

"""All input for the `updateProgrammingLanguageByVersion` mutation."""
input UpdateProgrammingLanguageByVersionInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `ProgrammingLanguage` being updated.
   """
   patch: ProgrammingLanguagePatch!

   """
   Version of language. Version is used for compiler or interpreter. Also can have definition of used extensions and presets
   """
   version: String!
}

"""All input for the `updateProgrammingLanguage` mutation."""
input UpdateProgrammingLanguageInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `ProgrammingLanguage` being updated.
   """
   patch: ProgrammingLanguagePatch!
   id: UUID!
}

"""The output of our update `ProgrammingLanguage` mutation."""
type UpdateProgrammingLanguagePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ProgrammingLanguage` that was updated by this mutation."""
   programmingLanguage: ProgrammingLanguage

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `ProgrammingLanguage`. May be used by Relay 1."""
   programmingLanguageEdge(
      """The method to use when ordering `ProgrammingLanguage`."""
      orderBy: [ProgrammingLanguagesOrderBy!] = PRIMARY_KEY_ASC
   ): ProgrammingLanguagesEdge
}

"""All input for the `updateProgramOutputTypeByCode` mutation."""
input UpdateProgramOutputTypeByCodeInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `ProgramOutputType` being updated.
   """
   patch: ProgramOutputTypePatch!
   code: String!
}

"""All input for the `updateProgramOutputTypeByName` mutation."""
input UpdateProgramOutputTypeByNameInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `ProgramOutputType` being updated.
   """
   patch: ProgramOutputTypePatch!
   name: String!
}

"""All input for the `updateProgramOutputTypeByNodeId` mutation."""
input UpdateProgramOutputTypeByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `ProgramOutputType` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `ProgramOutputType` being updated.
   """
   patch: ProgramOutputTypePatch!
}

"""All input for the `updateProgramOutputType` mutation."""
input UpdateProgramOutputTypeInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `ProgramOutputType` being updated.
   """
   patch: ProgramOutputTypePatch!
   id: UUID!
}

"""The output of our update `ProgramOutputType` mutation."""
type UpdateProgramOutputTypePayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `ProgramOutputType` that was updated by this mutation."""
   programOutputType: ProgramOutputType

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `ProgramOutputType`. May be used by Relay 1."""
   programOutputTypeEdge(
      """The method to use when ordering `ProgramOutputType`."""
      orderBy: [ProgramOutputTypesOrderBy!] = PRIMARY_KEY_ASC
   ): ProgramOutputTypesEdge
}

"""All input for the `updateSolutionByNodeId` mutation."""
input UpdateSolutionByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Solution` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `Solution` being updated.
   """
   patch: SolutionPatch!
}

"""All input for the `updateSolution` mutation."""
input UpdateSolutionInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `Solution` being updated.
   """
   patch: SolutionPatch!
   id: UUID!
}

"""The output of our update `Solution` mutation."""
type UpdateSolutionPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Solution` that was updated by this mutation."""
   solution: Solution

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Problem` that is related to this `Solution`."""
   problem: Problem

   """Reads a single `Compiler` that is related to this `Solution`."""
   compiler: Compiler

   """An edge for our `Solution`. May be used by Relay 1."""
   solutionEdge(
      """The method to use when ordering `Solution`."""
      orderBy: [SolutionsOrderBy!] = PRIMARY_KEY_ASC
   ): SolutionsEdge
}

"""All input for the `updateSolutionRunByNodeId` mutation."""
input UpdateSolutionRunByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `SolutionRun` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `SolutionRun` being updated.
   """
   patch: SolutionRunPatch!
}

"""All input for the `updateSolutionRun` mutation."""
input UpdateSolutionRunInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `SolutionRun` being updated.
   """
   patch: SolutionRunPatch!
   id: UUID!
}

"""The output of our update `SolutionRun` mutation."""
type UpdateSolutionRunPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `SolutionRun` that was updated by this mutation."""
   solutionRun: SolutionRun

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Solution` that is related to this `SolutionRun`."""
   solution: Solution

   """Reads a single `Test` that is related to this `SolutionRun`."""
   failedTest: Test

   """Reads a single `FailType` that is related to this `SolutionRun`."""
   failTypeByTypeOfFail: FailType

   """An edge for our `SolutionRun`. May be used by Relay 1."""
   solutionRunEdge(
      """The method to use when ordering `SolutionRun`."""
      orderBy: [SolutionRunsOrderBy!] = PRIMARY_KEY_ASC
   ): SolutionRunsEdge
}

"""All input for the `updateTagByNodeId` mutation."""
input UpdateTagByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Tag` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `Tag` being updated.
   """
   patch: TagPatch!
}

"""All input for the `updateTag` mutation."""
input UpdateTagInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `Tag` being updated.
   """
   patch: TagPatch!
   id: UUID!
}

"""The output of our update `Tag` mutation."""
type UpdateTagPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Tag` that was updated by this mutation."""
   tag: Tag

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `Tag`. May be used by Relay 1."""
   tagEdge(
      """The method to use when ordering `Tag`."""
      orderBy: [TagsOrderBy!] = PRIMARY_KEY_ASC
   ): TagsEdge
}

"""All input for the `updateTeamByNodeId` mutation."""
input UpdateTeamByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Team` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `Team` being updated.
   """
   patch: TeamPatch!
}

"""All input for the `updateTeam` mutation."""
input UpdateTeamInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `Team` being updated.
   """
   patch: TeamPatch!
   id: UUID!
}

"""The output of our update `Team` mutation."""
type UpdateTeamPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Team` that was updated by this mutation."""
   team: Team

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `Team`. May be used by Relay 1."""
   teamEdge(
      """The method to use when ordering `Team`."""
      orderBy: [TeamsOrderBy!] = PRIMARY_KEY_ASC
   ): TeamsEdge
}

"""All input for the `updateTestByNodeId` mutation."""
input UpdateTestByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Test` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `Test` being updated.
   """
   patch: TestPatch!
}

"""All input for the `updateTest` mutation."""
input UpdateTestInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `Test` being updated.
   """
   patch: TestPatch!
   id: UUID!
}

"""The output of our update `Test` mutation."""
type UpdateTestPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Test` that was updated by this mutation."""
   test: Test

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `Problem` that is related to this `Test`."""
   problem: Problem

   """An edge for our `Test`. May be used by Relay 1."""
   testEdge(
      """The method to use when ordering `Test`."""
      orderBy: [TestsOrderBy!] = PRIMARY_KEY_ASC
   ): TestsEdge
}

"""All input for the `updateTravelByNodeId` mutation."""
input UpdateTravelByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `Travel` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `Travel` being updated.
   """
   patch: TravelPatch!
}

"""All input for the `updateTravel` mutation."""
input UpdateTravelInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `Travel` being updated.
   """
   patch: TravelPatch!
   id: UUID!
}

"""The output of our update `Travel` mutation."""
type UpdateTravelPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `Travel` that was updated by this mutation."""
   travel: Travel

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `Travel`. May be used by Relay 1."""
   travelEdge(
      """The method to use when ordering `Travel`."""
      orderBy: [TravelsOrderBy!] = PRIMARY_KEY_ASC
   ): TravelsEdge
}

"""All input for the `updateUniversityByNodeId` mutation."""
input UpdateUniversityByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `University` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `University` being updated.
   """
   patch: UniversityPatch!
}

"""All input for the `updateUniversity` mutation."""
input UpdateUniversityInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `University` being updated.
   """
   patch: UniversityPatch!
   id: UUID!
}

"""The output of our update `University` mutation."""
type UpdateUniversityPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `University` that was updated by this mutation."""
   university: University

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """Reads a single `City` that is related to this `University`."""
   city: City

   """An edge for our `University`. May be used by Relay 1."""
   universityEdge(
      """The method to use when ordering `University`."""
      orderBy: [UniversitiesOrderBy!] = PRIMARY_KEY_ASC
   ): UniversitiesEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   The globally unique `ID` which will identify a single `User` to be updated.
   """
   nodeId: ID!

   """
   An object where the defined keys will be set on the `User` being updated.
   """
   patch: UserPatch!
}

"""All input for the `updateUserByUsername` mutation."""
input UpdateUserByUsernameInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `User` being updated.
   """
   patch: UserPatch!

   """Public-facing username (or 'handle') of the user."""
   username: String!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String

   """
   An object where the defined keys will be set on the `User` being updated.
   """
   patch: UserPatch!

   """Unique identifier for the user."""
   id: UUID!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String

   """The `User` that was updated by this mutation."""
   user: User

   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query

   """An edge for our `User`. May be used by Relay 1."""
   userEdge(
      """The method to use when ordering `User`."""
      orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
   ): UsersEdge
}

"""A user who can log in to the application."""
type User implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!

   """Unique identifier for the user."""
   id: UUID!

   """Public-facing username (or 'handle') of the user."""
   username: String!

   """Public-facing name (or pseudonym) of the user."""
   name: String

   """Optional avatar URL."""
   avatarUrl: String

   """If true, the user has elevated privileges."""
   isAdmin: Boolean!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads and enables pagination through a set of `UserEmail`."""
   userEmails(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `UserEmail`."""
      orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: UserEmailCondition
   ): UserEmailsConnection!

   """Reads and enables pagination through a set of `Profile`."""
   profiles(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Profile`."""
      orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ProfileCondition
   ): ProfilesConnection!

   """Reads and enables pagination through a set of `Contest`."""
   contestsByCreatorId(
      """Only read the first `n` values of the set."""
      first: Int

      """Only read the last `n` values of the set."""
      last: Int

      """
      Skip the first `n` values from our `after` cursor, an alternative to cursor
      based pagination. May not be used with `last`.
      """
      offset: Int

      """Read all values in the set before (above) this cursor."""
      before: Cursor

      """Read all values in the set after (below) this cursor."""
      after: Cursor

      """The method to use when ordering `Contest`."""
      orderBy: [ContestsOrderBy!] = [PRIMARY_KEY_ASC]

      """
      A condition to be used in determining which values should be returned by the collection.
      """
      condition: ContestCondition
   ): ContestsConnection!
}

"""
Contains information about the login providers this user has used, so that they may disconnect them should they wish.
"""
type UserAuthentication implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!

   """The login service used, e.g. `twitter` or `github`."""
   service: String!

   """A unique identifier for the user within the login service."""
   identifier: String!
   createdAt: Datetime!
   updatedAt: Datetime!
}

"""A `UserAuthentication` edge in the connection."""
type UserAuthenticationsEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `UserAuthentication` at the end of the edge."""
   node: UserAuthentication
}

"""Methods to use when ordering `UserAuthentication`."""
enum UserAuthenticationsOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   SERVICE_ASC
   SERVICE_DESC
   IDENTIFIER_ASC
   IDENTIFIER_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

"""Information about a user's email address."""
type UserEmail implements Node {
   """
   A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   """
   nodeId: ID!
   id: UUID!
   userId: UUID!

   """The users email address, in `a@b.c` format."""
   email: String!

   """
   True if the user has is_verified their email address (by clicking the link in
      the email we sent them, or logging in with a social login provider), false otherwise.
   """
   isVerified: Boolean!
   createdAt: Datetime!
   updatedAt: Datetime!

   """Reads a single `User` that is related to this `UserEmail`."""
   user: User
}

"""
A condition to be used against `UserEmail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserEmailCondition {
   """Checks for equality with the object’s `id` field."""
   id: UUID

   """Checks for equality with the object’s `userId` field."""
   userId: UUID

   """Checks for equality with the object’s `email` field."""
   email: String

   """Checks for equality with the object’s `isVerified` field."""
   isVerified: Boolean

   """Checks for equality with the object’s `createdAt` field."""
   createdAt: Datetime

   """Checks for equality with the object’s `updatedAt` field."""
   updatedAt: Datetime
}

"""An input for mutations affecting `UserEmail`"""
input UserEmailInput {
   """The users email address, in `a@b.c` format."""
   email: String!
}

"""A connection to a list of `UserEmail` values."""
type UserEmailsConnection {
   """A list of `UserEmail` objects."""
   nodes: [UserEmail]!

   """
   A list of edges which contains the `UserEmail` and cursor to aid in pagination.
   """
   edges: [UserEmailsEdge!]!

   """Information to aid in pagination."""
   pageInfo: PageInfo!

   """The count of *all* `UserEmail` you could get from the connection."""
   totalCount: Int
}

"""A `UserEmail` edge in the connection."""
type UserEmailsEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `UserEmail` at the end of the edge."""
   node: UserEmail
}

"""Methods to use when ordering `UserEmail`."""
enum UserEmailsOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   USER_ID_ASC
   USER_ID_DESC
   EMAIL_ASC
   EMAIL_DESC
   IS_VERIFIED_ASC
   IS_VERIFIED_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
   """Public-facing name (or pseudonym) of the user."""
   name: String

   """Optional avatar URL."""
   avatarUrl: String
}

"""A `User` edge in the connection."""
type UsersEdge {
   """A cursor for use in pagination."""
   cursor: Cursor

   """The `User` at the end of the edge."""
   node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
   NATURAL
   ID_ASC
   ID_DESC
   USERNAME_ASC
   USERNAME_DESC
   NAME_ASC
   NAME_DESC
   AVATAR_URL_ASC
   AVATAR_URL_DESC
   IS_ADMIN_ASC
   IS_ADMIN_DESC
   CREATED_AT_ASC
   CREATED_AT_DESC
   UPDATED_AT_ASC
   UPDATED_AT_DESC
   PRIMARY_KEY_ASC
   PRIMARY_KEY_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
